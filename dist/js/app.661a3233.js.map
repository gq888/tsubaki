{"version":3,"file":"js/app.661a3233.js","mappings":"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","sources":["webpack://tsubaki-game-library/./src/utils/gameSettingsManager.js","webpack://tsubaki-game-library/./src/App.vue","webpack://tsubaki-game-library/./src/App.vue?7ccd","webpack://tsubaki-game-library/./src/components/sum.vue","webpack://tsubaki-game-library/./src/utils/gameStateManager.js","webpack://tsubaki-game-library/./src/utils/help.js","webpack://tsubaki-game-library/./src/utils/gameComponentPresets.js","webpack://tsubaki-game-library/./src/utils/gameComponentFactory.js","webpack://tsubaki-game-library/./src/components/sum.js","webpack://tsubaki-game-library/./src/components/sum.vue?4113","webpack://tsubaki-game-library/./src/components/fish.vue","webpack://tsubaki-game-library/./src/components/fish.js","webpack://tsubaki-game-library/./src/components/fish.vue?23f9","webpack://tsubaki-game-library/./src/components/point24.vue","webpack://tsubaki-game-library/./src/components/point24.js","webpack://tsubaki-game-library/./src/components/point24.vue?2f47","webpack://tsubaki-game-library/./src/components/month.vue","webpack://tsubaki-game-library/./src/components/month.js","webpack://tsubaki-game-library/./src/components/month.vue?5f25","webpack://tsubaki-game-library/./src/components/Tortoise.vue","webpack://tsubaki-game-library/./src/components/Tortoise.js","webpack://tsubaki-game-library/./src/components/Tortoise.vue?68f0","webpack://tsubaki-game-library/./src/components/Sort.vue","webpack://tsubaki-game-library/./src/components/candidateUtils.js","webpack://tsubaki-game-library/./src/components/Sort.js","webpack://tsubaki-game-library/./src/components/Sort.vue?7b36","webpack://tsubaki-game-library/./src/components/Pairs.vue","webpack://tsubaki-game-library/./src/components/Pairs.js","webpack://tsubaki-game-library/./src/components/Pairs.vue?b359","webpack://tsubaki-game-library/./src/components/Spider.vue","webpack://tsubaki-game-library/./src/directives/move.js","webpack://tsubaki-game-library/./src/components/Spider.js","webpack://tsubaki-game-library/./src/components/Spider.vue?2441","webpack://tsubaki-game-library/./src/components/Chess.vue","webpack://tsubaki-game-library/./src/components/Chess.js","webpack://tsubaki-game-library/./src/components/Chess.vue?6fd7","webpack://tsubaki-game-library/./src/router/index.js","webpack://tsubaki-game-library/./src/store/index.js","webpack://tsubaki-game-library/./src/main.js","webpack://tsubaki-game-library/./src/utils/cardUtils.js","webpack://tsubaki-game-library/webpack/bootstrap","webpack://tsubaki-game-library/webpack/runtime/chunk loaded","webpack://tsubaki-game-library/webpack/runtime/compat get default export","webpack://tsubaki-game-library/webpack/runtime/define property getters","webpack://tsubaki-game-library/webpack/runtime/ensure chunk","webpack://tsubaki-game-library/webpack/runtime/get javascript chunk filename","webpack://tsubaki-game-library/webpack/runtime/get mini-css chunk filename","webpack://tsubaki-game-library/webpack/runtime/global","webpack://tsubaki-game-library/webpack/runtime/hasOwnProperty shorthand","webpack://tsubaki-game-library/webpack/runtime/load script","webpack://tsubaki-game-library/webpack/runtime/make namespace object","webpack://tsubaki-game-library/webpack/runtime/publicPath","webpack://tsubaki-game-library/webpack/runtime/css loading","webpack://tsubaki-game-library/webpack/runtime/jsonp chunk loading","webpack://tsubaki-game-library/webpack/startup"],"sourcesContent":["/**\n * 游戏设置管理器\n * 统一管理游戏延迟设置的存储和读取\n */\n\nclass GameSettingsManager {\n  constructor() {\n    this.listeners = [];\n  }\n\n  /**\n   * 获取指定游戏的延迟设置\n   * @param {string} gameName - 游戏名称\n   * @returns {number} 延迟时间（毫秒）\n   */\n  getDelay(gameName) {\n    // 优先查找游戏特定设置\n    const gameDelay = localStorage.getItem(`game-delay-${gameName}`);\n    if (gameDelay) {\n      return parseInt(gameDelay);\n    }\n\n    // 其次查找全局设置\n    const globalDelay = localStorage.getItem('game-global-delay');\n    if (globalDelay) {\n      return parseInt(globalDelay);\n    }\n\n    // 返回默认值\n    return 500;\n  }\n\n  /**\n   * 保存延迟设置\n   * @param {string} gameName - 游戏名称（如果为空则为全局设置）\n   * @param {number} delay - 延迟时间（毫秒）\n   * @param {boolean} applyToAll - 是否应用到所有游戏\n   */\n  saveDelay(gameName, delay, applyToAll = false) {\n    if (applyToAll) {\n      // 应用到全部游戏\n      localStorage.setItem('game-global-delay', delay.toString());\n      // 清除所有游戏特定的设置\n      const keys = Object.keys(localStorage);\n      keys.forEach(key => {\n        if (key.startsWith('game-delay-') && key !== 'game-global-delay') {\n          localStorage.removeItem(key);\n        }\n      });\n    } else {\n      // 仅应用到当前游戏\n      if (gameName) {\n        localStorage.setItem(`game-delay-${gameName}`, delay.toString());\n      }\n    }\n\n    // 通知所有监听器\n    this.notifyListeners(delay, applyToAll, gameName);\n  }\n\n  reset() {\n    localStorage.clear();\n  }\n\n  /**\n   * 添加设置变化监听器\n   * @param {Function} callback - 回调函数\n   */\n  addListener(callback) {\n    this.listeners.push(callback);\n  }\n\n  /**\n   * 移除设置变化监听器\n   * @param {Function} callback - 回调函数\n   */\n  removeListener(callback) {\n    const index = this.listeners.indexOf(callback);\n    if (index > -1) {\n      this.listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * 通知所有监听器\n   * @param {number} delay - 延迟时间\n   * @param {boolean} applyToAll - 是否应用到所有游戏\n   * @param {string} gameName - 游戏名称\n   */\n  notifyListeners(delay, applyToAll, gameName) {\n    this.listeners.forEach(callback => {\n      try {\n        callback({ delay, applyToAll, gameName });\n      } catch (error) {\n        console.error('Error in settings listener:', error);\n      }\n    });\n  }\n}\n\n// 导出单例\nexport default new GameSettingsManager();\n","<template>\n  <div id=\"app\">\n    <router-view />\n  </div>\n</template>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #dfcdc3;\n  width: 100%;\n  height: 100vh;\n  margin: 0;\n  padding: 0;\n  overflow: hidden;\n}\n</style>\n","import { render } from \"./App.vue?vue&type=template&id=517c11fd\"\nconst script = {}\n\nimport \"./App.vue?vue&type=style&index=0&id=517c11fd&lang=css\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <GameLayout\n    v-bind=\"gameLayoutProps\"\n    :win-buttons=\"[{ text: 'GO ON', action: 'goon', callback: goon }]\"\n    :win-modal-style=\"{ backgroundColor: 'rgba(0, 0, 0, 0.7)' }\"\n    :win-custom-class=\"'lose'\"\n    :lose-buttons=\"[{ text: 'AGAIN', action: 'goon', callback: goon }]\"\n    :lose-modal-style=\"{ backgroundColor: 'rgba(0, 0, 0, 0.7)' }\"\n    :lose-custom-class=\"'lose'\"\n    :draw-buttons=\"[{ text: 'GO ON', action: 'goon', callback: goon }]\"\n    :draw-modal-style=\"{ backgroundColor: 'rgba(0, 0, 0, 0.7)' }\"\n    :draw-custom-class=\"'draw lose'\"\n    @goon=\"goon\"\n  >\n    <template #game-content>\n      <div class=\"row center\">\n        <img class=\"avatar\" :src=\"'./static/avatar/17.webp'\" />\n        <span class=\"scrore\">{{ score1 }}</span>\n      </div>\n      <div class=\"row\">\n        <div>\n          <ul class=\"cardsul\">\n            <CardImage\n              v-for=\"item in arr1\"\n              :key=\"item.id\"\n              class=\"card\"\n              :card-id=\"item.id\"\n            />\n          </ul>\n        </div>\n      </div>\n      <div class=\"row\" style=\"margin-top: 0.625rem\">\n        <div>\n          <ul class=\"cardsul reverse\">\n            <CardImage\n              v-for=\"item in arr2\"\n              :key=\"item.id\"\n              class=\"card\"\n              :card-id=\"item.id\"\n            />\n          </ul>\n        </div>\n      </div>\n      <div class=\"row center\">\n        <img class=\"avatar\" :src=\"'./static/avatar/32.webp'\" />\n        <span class=\"scrore\">{{ score2 }}</span>\n      </div>\n    </template>\n    <template #bottom-controls>\n      <GameControls\n        :buttons=\"[\n          {\n            label: 'HIT',\n            action: 'hitBtn',\n            disabled: stepDisabled,\n          },\n          {\n            label: 'PASS',\n            action: 'passBtn',\n            disabled: autoDisabled,\n          },\n        ]\"\n        @hitBtn=\"handleHitBtn\"\n        @passBtn=\"pass\"\n      />\n    </template>\n  </GameLayout>\n</template>\n\n<script>\nimport SumComponent from \"./sum.js\";\n\nconst component = SumComponent;\n\nexport default component;\n</script>\n\n<style scoped>\n@import url(\"./sum.css\");\n</style>\n","/**\n * 游戏状态管理类\n * 统一管理游戏状态、历史记录、撤销重做等功能\n */\nexport default class GameStateManager {\n  constructor(options = {}) {\n    // 游戏状态标志\n    this.hitflag = true; // 是否可以操作\n    this.winflag = false; // 胜利标志\n    this.loseflag = false; // 失败标志\n    this.drawflag = false; // 平局标志\n\n    // 历史记录\n    this.history = [];\n\n    // 自动模式相关\n    this.isAutoRunning = false;\n    this.autoInterval = null;\n    this.autoStepDelay = options.autoStepDelay / 10 || 500; // 默认单步延迟500ms，测试时除以10以缩短测试时间\n    this.maxSteps = options.maxSteps || 400; // 防止无限循环的最大步数，默认为400\n\n    // 事件监听器\n    this._listeners = {};\n  }\n\n  /**\n   * 初始化游戏状态\n   */\n  init() {\n    this.hitflag = true;\n    this.winflag = false;\n    this.loseflag = false;\n    this.drawflag = false;\n    this.history = [];\n    this.stopAuto();\n    this.emit(\"init\");\n  }\n\n  /**\n   * 记录游戏操作到历史记录\n   * @param {Object} operation - 操作对象\n   */\n  recordOperation(operation, backword = false) {\n    backword ? this.history.unshift(operation) : this.history.push(operation);\n    this.emit(\"historyUpdate\", this.history);\n  }\n\n  /**\n   * 撤销上一步操作\n   * @returns {Object|null} 撤销的操作对象，如果没有历史记录则返回null\n   */\n  undo() {\n    if (this.history.length === 0) {\n      return null;\n    }\n\n    const operation = this.history.pop();\n    this.emit(\"undo\", operation);\n    this.emit(\"historyUpdate\", this.history);\n\n    // 撤销后重置游戏状态标志\n    this.winflag = false;\n    this.loseflag = false;\n    this.drawflag = false;\n\n    return operation;\n  }\n\n  /**\n   * 获取历史记录长度\n   * @returns {number} 历史记录长度\n   */\n  getStepCount() {\n    return this.history.length;\n  }\n\n  /**\n   * 判断是否可以撤销\n   * @returns {boolean} 是否可以撤销\n   */\n  canUndo() {\n    return this.history.length > 0 && this.hitflag && !this.isAutoRunning;\n  }\n\n  /**\n   * 启动自动模式\n   * @param {Function} stepCallback - 每一步的回调函数\n   */\n  async startAuto(stepCallback) {\n    if (this.isAutoRunning || this.winflag || this.loseflag || this.drawflag) {\n      console.log(\n        `startAuto被跳过: isAutoRunning=${this.isAutoRunning}, win=${this.winflag}, lose=${this.loseflag}, draw=${this.drawflag}`,\n      );\n      return;\n    }\n\n    console.log(\"开始自动模式...\");\n    this.isAutoRunning = true;\n    this.emit(\"autoStart\");\n\n    let stepCount = 0;\n\n    try {\n      while (\n        this.isAutoRunning &&\n        !this.winflag &&\n        !this.loseflag &&\n        !this.drawflag &&\n        stepCount < this.maxSteps\n      ) {\n        await stepCallback();\n        stepCount++;\n\n        await this.wait();\n      }\n\n      if (stepCount >= this.maxSteps) {\n        console.log(`达到最大步数${this.maxSteps}`);\n        this.stopAuto();\n      }\n    } catch (error) {\n      console.error(\"Auto mode error:\", error);\n    } finally {\n      console.log(`自动模式结束，总共执行了${stepCount}步`);\n      this.stopAuto();\n    }\n  }\n\n  /**\n   * 停止自动模式\n   */\n  stopAuto() {\n    if (!this.isAutoRunning) {\n      return;\n    }\n\n    this.isAutoRunning = false;\n    if (this.autoInterval) {\n      clearInterval(this.autoInterval);\n      this.autoInterval = null;\n    }\n\n    this.emit(\"autoStop\");\n  }\n\n  /**\n   * 设置自动模式的延迟时间\n   * @param {number} delay - 延迟时间（毫秒）\n   */\n  setAutoStepDelay(delay) {\n    this.autoStepDelay = delay;\n    this.emit(\"delayChanged\", delay);\n  }\n\n  /**\n   * 获取当前的延迟时间\n   * @returns {number} 当前延迟时间（毫秒）\n   */\n  getAutoStepDelay() {\n    return this.autoStepDelay;\n  }\n\n  /**\n   * 等待指定时间，并在等待前触发事件\n   * @param {number} delay - 延迟时间（毫秒），如果为null则使用autoStepDelay\n   * @returns {Promise} 等待完成的Promise\n   */\n  async wait(delay = null) {\n    const actualDelay = delay !== null ? delay : this.autoStepDelay;\n    \n    // 触发等待前事件\n    this.emit(\"beforeWait\", actualDelay);\n    \n    // 执行实际的等待\n    return new Promise(resolve => setTimeout(resolve, actualDelay));\n  }\n\n  /**\n   * 执行单步操作\n   * @param {Function} stepCallback - 单步操作的回调函数\n   */\n  async step(stepCallback) {\n    if (!this.hitflag || this.winflag || this.loseflag || this.drawflag) {\n      return;\n    }\n\n    this.hitflag = false;\n    try {\n      await stepCallback();\n    } catch (error) {\n      console.error(\"Step error:\", error);\n    } finally {\n      this.hitflag = true;\n    }\n  }\n\n  /**\n   * 设置游戏胜利\n   */\n  setWin() {\n    this.winflag = true;\n    this.stopAuto();\n    this.emit(\"win\");\n  }\n\n  /**\n   * 设置游戏失败\n   */\n  setLose() {\n    this.loseflag = true;\n    this.stopAuto();\n    this.emit(\"lose\");\n  }\n\n  /**\n   * 设置游戏平局\n   */\n  setDraw() {\n    this.drawflag = true;\n    this.stopAuto();\n    this.emit(\"draw\");\n  }\n\n  /**\n   * 重置游戏\n   * @param {Function} resetCallback - 重置游戏的回调函数\n   */\n  reset(resetCallback) {\n    this.stopAuto();\n    this.init();\n    if (resetCallback) {\n      resetCallback();\n    }\n    this.emit(\"reset\");\n  }\n\n  /**\n   * 添加事件监听器\n   * @param {string} event - 事件名称\n   * @param {Function} listener - 事件监听器\n   */\n  on(event, listener) {\n    if (!this._listeners[event]) {\n      this._listeners[event] = [];\n    }\n    this._listeners[event].push(listener);\n  }\n\n  /**\n   * 移除事件监听器\n   * @param {string} event - 事件名称\n   * @param {Function} listener - 要移除的事件监听器\n   */\n  off(event, listener) {\n    if (!this._listeners[event]) {\n      return;\n    }\n    const index = this._listeners[event].indexOf(listener);\n    if (index > -1) {\n      this._listeners[event].splice(index, 1);\n    }\n  }\n\n  /**\n   * 触发事件\n   * @param {string} event - 事件名称\n   * @param {*} data - 事件数据\n   */\n  emit(event, data) {\n    if (!this._listeners[event]) {\n      return;\n    }\n    this._listeners[event].forEach((listener) => {\n      try {\n        listener(data);\n      } catch (error) {\n        console.error(`Error in event listener for ${event}:`, error);\n      }\n    });\n  }\n\n  /**\n   * 获取当前游戏状态\n   * @returns {Object} 游戏状态对象\n   */\n  getState() {\n    return {\n      hitflag: this.hitflag,\n      winflag: this.winflag,\n      loseflag: this.loseflag,\n      drawflag: this.drawflag,\n      step: this.getStepCount(),\n      isAutoRunning: this.isAutoRunning,\n    };\n  }\n\n  /**\n   * 设置游戏状态\n   * @param {Object} state - 要设置的游戏状态\n   */\n  setState(state) {\n    Object.assign(this, state);\n    this.emit(\"stateChange\", this.getState());\n  }\n\n  /**\n   * 获取默认计算属性对象\n   * 供Vue组件使用扩展运算符导入\n   * @returns {Object} 默认计算属性对象\n   */\n  static getDefaultComputedProperties() {\n    return {\n      // 基础状态标志\n      hitflag() {\n        const manager = this.gameManager;\n        return manager ? manager.hitflag : true;\n      },\n\n      winflag() {\n        const manager = this.gameManager;\n        return manager ? manager.winflag : false;\n      },\n\n      loseflag() {\n        const manager = this.gameManager;\n        return manager ? manager.loseflag : false;\n      },\n\n      drawflag() {\n        const manager = this.gameManager;\n        return manager ? manager.drawflag : false;\n      },\n\n      // 步数计算属性\n      step() {\n        const manager = this.gameManager;\n        return manager ? manager.getStepCount() : 0;\n      },\n\n      // 按钮禁用状态计算属性\n      undoDisabled() {\n        const manager = this.gameManager;\n        return !manager || !manager.canUndo();\n      },\n\n      restartDisabled() {\n        const manager = this.gameManager;\n        return !manager || !manager.hitflag || manager.isAutoRunning;\n      },\n\n      stepDisabled() {\n        const manager = this.gameManager;\n        return (\n          !manager ||\n          !manager.hitflag ||\n          manager.isAutoRunning ||\n          manager.winflag ||\n          manager.loseflag ||\n          manager.drawflag\n        );\n      },\n\n      autoDisabled() {\n        const manager = this.gameManager;\n        return (\n          !manager ||\n          !manager.hitflag ||\n          manager.winflag ||\n          manager.loseflag ||\n          manager.drawflag\n        );\n      },\n\n      // 用于模板的便捷计算属性\n      canOperate() {\n        const manager = this.gameManager;\n        return manager && manager.hitflag && !manager.isAutoRunning;\n      },\n\n      // 游戏状态\n      gameState() {\n        const manager = this.gameManager;\n        return manager ? manager.getState() : {};\n      },\n    };\n  }\n}\n","export function shuffleCards(cards, num) {\n  let rand, tmp;\n  let last = num - 1;\n  for (let i = 0; i < 1000; i++) {\n    rand = Math.floor(seededRandom() * last);\n    tmp = cards[last];\n    cards[last] = cards[rand];\n    cards[rand] = tmp;\n  }\n  return cards;\n}\n\nexport function preload(cb) {\n  let arr = [];\n  for (let i = 0; i < 54; i++) {\n    arr.push(\n      new Promise((resolve) => {\n        let img = new Image();\n        img.src = \"./static/\" + i + \".webp\";\n        img.onload = () => {\n          cb && cb(img, i);\n          resolve(img);\n        };\n      }),\n    );\n  }\n  return Promise.all(arr);\n}\n\nfunction equalArray(arr1, arr2) {\n  if (!arr2) return false;\n  for (let i = 0; i < arr2.length; i++) {\n    if (arr1[i] != arr2[i]) return false;\n  }\n  return true;\n}\n\nexport function checkDeadForeach(array, newest) {\n  for (let i = 0; i < array.length >> 1; i++) {\n    if (!equalArray(array[i], newest)) {\n      continue;\n    }\n    let j;\n    let count = {};\n    for (j = 0; j < i; j++) {\n      count[array[i].join(\".\")] = count[array[i].join(\".\")]\n        ? count[array[i].join(\".\")] + 1\n        : 1;\n      if (!equalArray(array[j], array[j + i + 1])) break;\n    }\n    if (j >= i) {\n      if (i > 40) {\n        console.log(\"dead foreach\", array, newest, i);\n      }\n      return false;\n    }\n    let index = Object.values(count).indexOf(1);\n    if (index < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nlet s = 1234;\n\nexport function setSeed(seed) {\n  s = seed;\n}\n\nexport function seededRandom() {\n  s = (s * 9301 + 49297) % 233280;\n  return s / 233280.0;\n}\n","import { createEnhancedGameComponent } from './gameComponentFactory.js';\n\n/**\n * 快速创建游戏组件的便捷函数\n * 针对不同类型的游戏提供预设配置\n */\nexport const GameComponentPresets = {\n  // 纸牌游戏预设（支持撤销）\n  cardGame: (baseComponent, autoStepDelay = 500) =>\n    createEnhancedGameComponent(baseComponent, {\n      autoStepDelay,\n      hasUndo: true,\n      hasRestart: true,\n    }),\n\n  // 简单游戏预设（不支持撤销）\n  simpleGame: (baseComponent, autoStepDelay = 1000) =>\n    createEnhancedGameComponent(baseComponent, {\n      autoStepDelay,\n      hasUndo: false,\n      hasRestart: true,\n      customInit() {\n        // 为fish游戏添加特殊的stepFn和goon方法\n        if (this.title && this.title.includes(\"FISHING\")) {\n          this.stepFn = async () => {\n            await this.gameManager.step(async () => {\n              let cards = this[\"cards\" + ((this.step % 4) + 1)];\n              while (cards.length <= 0) {\n                this.gameManager.recordOperation();\n                cards = this[\"cards\" + ((this.step % 4) + 1)];\n              }\n              await this.hit(cards, this.arr);\n              // 检查胜利条件\n              let i;\n              for (i = 1; i <= 4; i++) {\n                if ((this.step % 4) + 1 != i && this[\"cards\" + i].length > 0) {\n                  break;\n                }\n              }\n              if (i > 4) {\n                this.gameManager.setWin();\n              } else {\n                this.gameManager.recordOperation();\n              }\n            });\n          };\n        }\n\n        // 为month游戏添加特殊的stepFn和goon方法\n        if (this.title && this.title === \"Month\") {\n          this.stepFn = async () => {\n            // 检查失败条件\n            if (this.cards2[12] >= 4) {\n              this.gameManager.setLose();\n            }\n            await this.gameManager.step(async () => {\n              await this.hit();\n            });\n          };\n        }\n      },\n    }),\n\n  // 配对游戏预设\n  pairGame: (baseComponent, autoStepDelay = 500, methods = {}) =>\n    createEnhancedGameComponent(baseComponent, {\n      autoStepDelay,\n      hasUndo: false,\n      hasRestart: true,\n      methods,\n      customCleanup() {\n        // 清理定时器\n        if (this._timer) {\n          clearInterval(this._timer);\n        }\n      },\n    }),\n\n  // 益智游戏预设\n  puzzleGame: (baseComponent, autoStepDelay = 800, methods = {}) =>\n    createEnhancedGameComponent(baseComponent, {\n      autoStepDelay,\n      hasUndo: true,\n      hasRestart: true,\n      methods,\n      customInit() {\n        // 为益智游戏添加特殊功能\n        if (\n          this.title &&\n          (this.title.includes(\"24\") || this.title.includes(\"PUZZLE\"))\n        ) {\n          // 添加提示功能\n          this.showHint = function () {\n            // 实现提示逻辑\n            console.log(\"显示提示\");\n          };\n        }\n      },\n    }),\n\n  // 策略游戏预设\n  strategyGame: (baseComponent, autoStepDelay = 1200) =>\n    createEnhancedGameComponent(baseComponent, {\n      autoStepDelay,\n      hasUndo: true,\n      hasRestart: true,\n      customInit() {\n        // 为策略游戏添加特殊功能\n        this.difficulty = \"normal\";\n        this.setDifficulty = function (level) {\n          this.difficulty = level;\n          // this.gameManager.setAutoStepDelay(\n          //   level === \"easy\" ? 1500 : level === \"hard\" ? 800 : 1200,\n          // );\n        };\n      },\n    }),\n\n  // 动作游戏预设\n  actionGame: (baseComponent, autoStepDelay = 300) =>\n    createEnhancedGameComponent(baseComponent, {\n      autoStepDelay,\n      hasUndo: false,\n      hasRestart: true,\n      customInit() {\n        // 为动作游戏添加特殊功能\n        this.score = 0;\n        this.combo = 0;\n        this.addScore = function (points) {\n          this.score += points * (this.combo + 1);\n          this.combo++;\n        };\n        this.resetCombo = function () {\n          this.combo = 0;\n        };\n      },\n    }),\n\n  // 自定义游戏预设\n  customGame: (baseComponent, config = {}) => {\n    const {\n      autoStepDelay = 500,\n      hasUndo = true,\n      hasRestart = true,\n      features = [],\n      customLogic = null,\n    } = config;\n\n    return createEnhancedGameComponent(baseComponent, {\n      autoStepDelay,\n      hasUndo,\n      hasRestart,\n      customInit() {\n        // 应用自定义功能\n        features.forEach((feature) => {\n          switch (feature) {\n            case \"timer\":\n              this.gameTime = 0;\n              this._gameTimer = null;\n              this.startTimer = function () {\n                this._gameTimer = setInterval(() => {\n                  this.gameTime++;\n                }, 1000);\n              };\n              this.stopTimer = function () {\n                if (this._gameTimer) {\n                  clearInterval(this._gameTimer);\n                  this._gameTimer = null;\n                }\n              };\n              break;\n\n            case \"score\":\n              this.score = 0;\n              this.highScore = parseInt(\n                localStorage.getItem(`${this.title}_highScore`) || \"0\",\n              );\n              this.updateScore = function (points) {\n                this.score += points;\n                if (this.score > this.highScore) {\n                  this.highScore = this.score;\n                  localStorage.setItem(\n                    `${this.title}_highScore`,\n                    this.highScore.toString(),\n                  );\n                }\n              };\n              break;\n\n            case \"difficulty\":\n              this.difficulty = \"normal\";\n              this.setDifficulty = function (level) {\n                this.difficulty = level;\n                // 根据难度调整游戏参数\n                const delays = { easy: 800, normal: 500, hard: 300 };\n                this.gameManager.setAutoStepDelay(delays[level] || 500);\n              };\n              break;\n          }\n        });\n\n        // 应用自定义逻辑\n        if (customLogic && typeof customLogic === \"function\") {\n          customLogic.call(this);\n        }\n      },\n      customCleanup() {\n        // 清理定时器\n        if (this._gameTimer) {\n          clearInterval(this._gameTimer);\n        }\n      },\n    });\n  },\n};\n\n/**\n * 模板字符串生成器\n * 生成标准的游戏组件模板\n */\nexport function generateGameTemplate(options = {}) {\n  const {\n    hasTopControls = true,\n    hasBottomControls = false,\n    hasGameInfo = false,\n    hasCustomContent = true,\n  } = options;\n\n  return `<template>\n  <div class=\"Sum\">\n    <h1>{{ title }}</h1>\n    \n    ${hasTopControls ? `\n    <GameControls\n      v-bind=\"gameControlsConfig\"\n      @undo=\"undo\"\n      @goon=\"goon\"\n      @step=\"stepFn\"\n      @auto=\"pass\"\n    />` : \"\"}\n    \n    ${hasGameInfo ? `\n    <div class=\"row\">\n      <span v-if=\"time !== undefined\">TIME: {{ time }}</span>\n      <br v-if=\"time !== undefined && step !== undefined\" />\n      <span v-if=\"step !== undefined\">STEP: {{ step }}</span>\n    </div>` : \"\"}\n    \n    <div class=\"row\">\n      ${hasCustomContent ? \"<!-- 游戏内容区域 -->\" : \"\"}\n    </div>\n    \n    ${hasBottomControls ? `\n    <GameControls\n      v-bind=\"gameControlsConfig\"\n      @undo=\"undo\"\n      @goon=\"goon\"\n      @step=\"stepFn\"\n      @auto=\"pass\"\n    />` : \"\"}\n    \n    <!-- 游戏结果模态框 -->\n    <GameResultModal\n      v-if=\"winflag\"\n      title=\"U WIN!\"\n      :buttons=\"[{ text: 'GO ON', action: 'goon', callback: goon, disabled: false }]\"\n    />\n    \n    <GameResultModal\n      v-if=\"loseflag\"\n      title=\"U LOSE\"\n      :buttons=\"[{ text: 'GO ON', action: 'goon', callback: goon, disabled: false }]\"\n    />\n  </div>\n</template>`;\n}\n\n/**\n * 使用示例：\n *\n * // 1. 简单使用\n * import { createEnhancedGameComponent } from '../utils/gameComponentFactory.js';\n * import Pairs from './Pairs.js';\n *\n * export default createEnhancedGameComponent(Pairs, {\n *   autoStepDelay: 500,\n *   hasUndo: false\n * });\n *\n * // 2. 使用预设\n * import { GameComponentPresets } from '../utils/gameComponentPresets.js';\n * import fish from './fish.js';\n *\n * export default GameComponentPresets.simpleGame(fish, 1000);\n *\n * // 3. 自定义配置\n * export default createEnhancedGameComponent(GridBattle, {\n *   autoStepDelay: 500,\n *   hasUndo: true,\n *   customInit() {\n *     // 自定义初始化逻辑\n *   }\n * });\n */","import GameStateManager from \"./gameStateManager.js\";\nimport gameSettingsManager from \"./gameSettingsManager.js\";\nimport { defineAsyncComponent } from \"vue\";\nimport { setSeed } from \"./help.js\";\nimport { CARD_TYPES, CARD_POINTS, getCardPlaceholderText } from \"./cardUtils.js\";\n\n/**\n * 游戏规则说明映射\n * 为每个游戏提供简要的规则说明\n */\nconst gameRules = {\n  // 月份游戏\n  month: \"The game has 13 positions (12 months + 1 deck). Each turn, take the top card from the current position and move it to the position corresponding to its value. If the deck reaches 4 cards, the game ends.\",\n  \n  // 钓鱼游戏\n  fish: \"A 4-player game where each player starts with cards. On your turn, draw the top card from your deck. If it matches a card in the center, collect those cards. Special cards let you take cards from other players. The player who collects all cards wins.\",\n  \n  // 24点游戏\n  point24: \"Use 4 given numbers and apply +, -, ×, ÷ operations to make the result equal to 24. Each number can be used exactly once. You can combine numbers by selecting an operator and clicking cards to perform calculations.\",\n  \n  // 龟兔赛跑（卡片配对游戏）\n  Tortoise: \"A card matching game with hierarchical dependencies. Cards have z-index priorities and connection requirements. Match cards of the same value pair (cards with same base number). Cards can only be matched when all their prerequisite cards are already matched. Complete all pairs to win.\",\n  \n  // 排序游戏\n  Sort: \"A card sorting puzzle with 3 difficulty modes: simple (by number), medium (by color), and hard (by suit). Move cards to empty slots following specific rules. Cards can only be placed in valid positions. The goal is to arrange all cards in the correct order.\",\n  \n  // 配对游戏\n  Pairs: \"A memory matching game with 48 cards. Flip cards to find pairs. Cards are paired based on their base value (4 cards share the same base value). Find all matching pairs as quickly as possible to win.\",\n  \n  // 蜘蛛纸牌\n  Spider: \"A classic Spider Solitaire game with 52 standard playing cards. Arrange cards in descending order by number. Cards can be moved in sequences to build foundations. The goal is to sort all cards by suit and rank to win.\",\n  \n  // 国际象棋（策略游戏）\n  GridBattle: \"A strategy game on a 6x6 grid with two types of pieces: high (1) and low (0) grade. Pieces move according to specific rules defined by their positions. Win by eliminating all opponent's pieces of the opposite grade, or reach a draw when only one of each remains.\",\n  \n  // 21点（BlackJack）\n  blackjack: \"A card game using a 54-card deck. The goal is to get as close to 21 as possible without exceeding it. Cards 2-10 are worth their face value, J/Q/K are worth 10, and Aces can be worth 1 or 11. If your score exceeds 21, you bust. Both player and dealer start with 2 cards.\"\n};\n\n/**\n * 组件定义 - 根据环境选择 Mock 或真实组件\n */\nlet GameResultModal, GameControls, GameLayout, CardImage;\n\nif (typeof window === \"undefined\") {\n  // Node.js 环境：直接使用 Mock 组件\n  GameResultModal = {\n    name: \"GameResultModal\",\n    template: \"<div>Mock GameResultModal</div>\",\n    props: [\"title\", \"subtitle\", \"buttons\", \"show\"],\n  };\n  GameControls = {\n    name: \"GameControls\",\n    template: \"<div>Mock GameControls</div>\",\n    props: [\"canUndo\", \"canGoon\", \"canRestart\", \"canAuto\", \"canStep\"],\n  };\n  GameLayout = {\n    name: \"GameLayout\",\n    template: \"<div><slot name='game-content'></slot></div>\",\n    props: [\"title\", \"winflag\", \"loseflag\", \"drawflag\"],\n  };\n  CardImage = {\n    name: \"CardImage\",\n    template: \"<div>Mock CardImage</div>\",\n    props: [\"src\", \"alt\"],\n  };\n} else {\n  // 浏览器环境：使用 Vue 3 异步组件\n  GameResultModal = defineAsyncComponent(\n    () => import(\"../components/GameResultModal.vue\"),\n  );\n  GameControls = defineAsyncComponent(\n    () => import(\"../components/GameControls.vue\"),\n  );\n  GameLayout = defineAsyncComponent(\n    () => import(\"../components/GameLayout.vue\"),\n  );\n  CardImage = defineAsyncComponent(\n    () => import(\"../components/CardImage.vue\"),\n  );\n}\n\n/**\n * 游戏组件工厂函数\n * 为现有游戏组件添加统一的GameStateManager、GameControls和GameResultModal功能\n * 这是一个保守的重构方案，最大程度保持现有代码结构不变\n */\n\n/**\n * 创建增强的游戏组件（同步版本）\n * @param {Object} baseComponent - 基础游戏组件 (.js文件导出的组件)\n * @param {Object} options - 配置选项\n * @param {number} options.autoStepDelay - 自动模式延迟时间\n * @param {boolean} options.hasUndo - 是否支持撤销\n * @param {boolean} options.hasRestart - 是否支持重新开始\n * @param {Function} options.customInit - 自定义初始化函数\n * @param {Function} options.customCleanup - 自定义清理函数\n * @returns {Object} 增强后的Vue组件配置\n */\nexport function createEnhancedGameComponent(baseComponent, options = {}) {\n  const {\n    computed = {},\n    methods = {},\n    autoStepDelay = 500,\n    hasUndo = true,\n    hasRestart = true,\n    customInit = null,\n    customCleanup = null,\n  } = options;\n\n  return {\n    // 继承基础组件的所有属性\n    ...baseComponent,\n\n    // 添加必要的组件\n    components: {\n      ...baseComponent.components,\n      GameResultModal,\n      GameControls,\n      GameLayout,\n      CardImage,\n    },\n\n    // 扩展data函数\n    data() {\n      const baseData = baseComponent.data ? baseComponent.data.call(this) : {};\n      \n      return {\n        types: CARD_TYPES,\n        point: CARD_POINTS,\n        ...baseData,\n        gameManager: new GameStateManager({\n          autoStepDelay,\n        }),\n        customButtons: [], // 存储自定义按钮配置\n      };\n    },\n\n    // 扩展created生命周期\n    created() {\n      this.setSeed(this.seed ? this.seed : Date.now());\n      \n      // 初始化GameStateManager\n      this.gameManager.init();\n\n      // 从 localStorage 加载延迟设置\n      this.loadDelaySettings();\n\n      // 监听设置变化\n      this._settingsChangeHandler = this.handleSettingsChanged.bind(this);\n      gameSettingsManager.addListener(this._settingsChangeHandler);\n\n      // 设置事件监听\n      this.handleUndo && this.gameManager.on(\"undo\", this.handleUndo);\n\n      // 注册beforeWait事件监听 - 在wait前调用renderTextView\n      this.gameManager.on(\"beforeWait\", () => {\n        if (this.renderTextView && typeof this.renderTextView === 'function') {\n          this.renderTextView();\n        }\n      });\n\n      // 设置historyUpdate事件监听\n      this.gameManager.on(\"historyUpdate\", () => {\n        // 先执行各页面自定义的handleHistoryUpdate方法\n        if (\n          this.handleHistoryUpdate &&\n          typeof this.handleHistoryUpdate === \"function\"\n        ) {\n          this.handleHistoryUpdate();\n        }\n\n        // 然后执行autoCalc方法（如果存在）\n        if (this.autoCalc && typeof this.autoCalc === \"function\") {\n          this.autoCalc();\n        }\n      });\n\n      // 调用自定义初始化函数\n      if (customInit) {\n        customInit.call(this);\n      }\n\n      // 调用原组件的created方法\n      if (baseComponent.created) {\n        baseComponent.created.call(this);\n      }\n\n      // 调用init方法（如果存在）\n      if (this.init) {\n        this.init();\n      }\n    },\n\n    // 扩展beforeUnmount生命周期\n    beforeUnmount() {\n      // 停止自动模式\n      this.gameManager.stopAuto();\n\n      // 清理事件监听\n      this.gameManager.off(\"undo\");\n      this.gameManager.off(\"beforeWait\");\n      this.gameManager.off(\"historyUpdate\");\n\n      // 移除设置变化监听器\n      if (this._settingsChangeHandler) {\n        gameSettingsManager.removeListener(this._settingsChangeHandler);\n      }\n\n      // 调用自定义清理函数\n      if (customCleanup) {\n        customCleanup.call(this);\n      }\n\n      // 调用原组件的beforeUnmount方法\n      if (baseComponent.beforeUnmount) {\n        baseComponent.beforeUnmount.call(this);\n      }\n    },\n\n    // 扩展computed属性\n    computed: {\n      // 使用GameStateManager的默认计算属性\n      ...GameStateManager.getDefaultComputedProperties(),\n\n      // 显示按钮计算属性\n      displayButtons() {\n        // 如果提供了自定义按钮数组，则使用它\n        if (this.gameControlsConfig?.buttons && this.gameControlsConfig.buttons.length > 0) {\n          return this.gameControlsConfig.buttons;\n        }\n\n        // 否则生成默认按钮列表\n        const defaultButtons = [];\n\n        // 根据配置添加按钮\n        if (hasUndo) {\n          defaultButtons.push({\n            label: \"◀︎\",\n            action: \"undo\",\n            disabled: this.undoDisabled,\n          });\n        }\n\n        if (hasRestart) {\n          defaultButtons.push({\n            label: \"RESTART\",\n            action: \"goon\",\n            disabled: this.restartDisabled,\n          });\n        }\n\n        // 默认添加AUTO按钮\n        defaultButtons.push({\n          label: this.isAutoRunning ? \"STOP\" : \"AUTO\",\n          action: \"auto\",\n          disabled: this.autoDisabled,\n        });\n\n        // 默认添加STEP按钮\n        defaultButtons.push({\n          label: \"►\",\n          action: \"step\",\n          disabled: this.stepDisabled,\n        });\n\n        return defaultButtons;\n      },\n\n      // 游戏控制配置\n      gameControlsConfig() {\n        return {\n          buttons: this.displayButtons,\n          undoDisabled: this.undoDisabled,\n          restartDisabled: this.restartDisabled,\n          stepDisabled: this.stepDisabled,\n          autoDisabled: this.autoDisabled,\n          isAutoRunning: this.gameManager?.isAutoRunning || false,\n        };\n      },\n\n      // GameLayout通用属性配置\n      gameLayoutProps() {\n        // 获取当前游戏名称\n        const currentGame = this.$route?.path?.substring(1) || '';\n        \n        return {\n          title: this.title,\n          gameControlsConfig: this.gameControlsConfig,\n          winflag: this.winflag,\n          loseflag: this.loseflag,\n          drawflag: this.drawflag,\n          step: this.step,\n          gameRule: gameRules[currentGame],\n          customButtons: this.collectedGameButtons,\n        };\n      },\n      \n      // 自定义按钮配置，用于getAvailableActions\n      collectedGameButtons() {\n        return [...this.displayButtons, ...this.customButtons.filter(button => button.action)];\n      },\n\n      ...baseComponent.computed,\n      ...computed,\n    },\n\n    // 扩展methods\n    methods: {\n      getCardPlaceholderText,\n      // 设置随机数种子\n      setSeed(seed) {\n        this.seed = seed;\n        setSeed(seed);\n      },\n      \n      // 统一的等待方法 - 委托给gameManager处理\n      async wait(delay = null) {\n        return this.gameManager.wait(delay);\n      },\n      \n      // 统一的撤销方法\n      undo() {\n        this.gameManager.undo();\n      },\n\n      // 统一的自动模式方法\n      async pass() {\n        this.gameManager.isAutoRunning ? this.gameManager.stopAuto() : await this.gameManager.startAuto(async () => {\n          // 使用replacer处理循环引用和特殊对象\n          let seen = new WeakMap(); // 使用WeakMap记录路径\n          let pathStack = []; // 记录当前路径\n          \n          const replacer = function(key, value) {\n            // 跳过以_开头的属性\n            if (typeof key === 'string' && key.startsWith('_')) {\n              return undefined;\n            }\n            \n            // 处理对象循环引用\n            if (typeof value === 'object' && value !== null) {\n              if (seen.has(value)) {\n                return undefined; // 跳过循环引用\n              }\n              \n              const currentPath = pathStack.join('.') + (key ? '.' + key : '');\n              seen.set(value, currentPath);\n              pathStack.push(key);\n            }\n            \n            return value;\n          };\n          const beforeState = JSON.stringify(this.$data, replacer);\n          await this.stepFn();\n          seen = new WeakMap(); // 使用WeakMap记录路径\n          pathStack = []; // 记录当前路径\n          const afterState = JSON.stringify(this.$data, replacer);\n          \n          // 如果状态没变，说明移动无效\n          if (beforeState === afterState) {\n            console.warn('移动无效，游戏可能陷入死锁');\n            this.gameManager.stopAuto();\n          }\n        });\n      },\n\n      // 统一的重新开始方法\n      goon() {\n        this.gameManager.reset(() => {\n          if (this.init) {\n            this.init();\n          }\n        });\n      },\n\n      /**\n       * 从 localStorage 加载延迟设置\n       */\n      loadDelaySettings() {\n        const currentGame = this.$route?.path?.substring(1) || '';\n        const delay = gameSettingsManager.getDelay(currentGame);\n        this.gameManager.setAutoStepDelay(delay);\n      },\n\n      /**\n       * 处理设置变化事件\n       */\n      handleSettingsChanged(settings) {\n        const currentGame = this.$route?.path?.substring(1) || '';\n        \n        // 如果是应用到所有游戏，或者是针对当前游戏的设置，则更新\n        if (settings.applyToAll || settings.gameName === currentGame) {\n          this.gameManager.setAutoStepDelay(settings.delay);\n        }\n      },\n      \n      /**\n       * 处理GameControls组件挂载事件\n       */\n\n      \n      /**\n       * 统一的获取可用操作方法\n       * 用于终端交互式游戏\n       */\n      getAvailableActions() {\n        const actions = [];\n        const actionToMethodMap = {\n          'undo': 'undo',\n          'goon': 'goon',\n          'step': 'stepFn',\n          'auto': 'pass'\n        };\n        \n        // 使用收集的自定义按钮\n        this.collectedGameButtons.forEach((button, index) => {\n          const methodName = button.method || actionToMethodMap[button.action] || button.action;\n          if (this[methodName] && typeof this[methodName] === 'function') {\n            actions.push({\n              id: index + 1, // 使用从1开始的序号\n              label: button.label || `${button.action.toUpperCase()}`,\n              method: methodName,\n              args: button.args || [], // 默认空数组\n              disabled: button.disabled || false,\n            });\n          } else {\n            console.log(`未找到对应方法 ${methodName} 的操作按钮 ${button.action}`);\n          }\n        });\n        \n        // 过滤掉禁用的按钮\n        return actions.filter(a => !a.disabled);\n      },\n\n      ...baseComponent.methods,\n      ...methods,\n    },\n  };\n}\n\n// 从单独的模块导入预设和模板生成器，保持向后兼容性\nexport * from './gameComponentPresets.js';\n","import { GameComponentPresets } from \"../utils/gameComponentFactory.js\";\nimport { shuffleCards } from \"../utils/help.js\";\nimport { getCardPlaceholderText } from \"../utils/cardUtils.js\";\n\n/**\n * Sum对象定义了黑杰克(BlackJack)游戏的基础组件，将传递给GameComponentPresets.strategyGame工厂函数\n * 工厂函数会为该组件添加游戏管理、按钮控制、自动操作等功能\n */\nconst Sum = {\n  name: \"Sum\",\n  data() {\n    return {\n      title: \"BlackJack\",\n      cardsChg: [],\n      arr1: [],\n      arr2: [],\n      number: 54,\n      \n      // 以下属性由工厂函数GameComponentPresets.strategyGame添加：\n      // gameManager: 游戏管理器实例，提供游戏状态控制和自动操作功能\n      // customButtons: 自定义按钮数组，用于存储游戏控制按钮配置\n      // step: 当前游戏步骤计数\n      // difficulty: 游戏难度级别\n      // seed: 随机种子，用于确保游戏结果可重现\n    };\n  },\n  component: [],\n  methods: {\n    init() {\n      // 重置玩家牌组\n      this.arr1.splice(0);\n      this.arr2.splice(0);\n      \n      // 只有在牌堆为空时才重新初始化\n      if (this.cardsChg.length === 0) {\n        this.refillCards();\n      } else {\n        console.log('使用现有牌堆，剩余:', this.cardsChg.length, '张');\n      }\n      \n      // 发初始牌\n      this.hit(this.arr1);\n      this.hit(this.arr2);\n      this.hit(this.arr1);\n      this.hit(this.arr2);\n    },\n    // 摸牌\n    hit(arr) {\n      // 如果牌堆空了，重新洗牌\n      if (this.cardsChg.length === 0) {\n        console.log('牌堆已空，重新洗牌...');\n        this.refillCards();\n      }\n      \n      var currentCard = this.cardsChg.shift();\n      var value = currentCard >> 2;\n      arr.push({ id: currentCard, value: ++value > 10 ? 10 : value });\n      this.gameManager.recordOperation();\n    },\n    \n    // 重新填充牌堆\n    refillCards() {\n      // 清空已使用记录\n      this.cardsChg.splice(0);\n      for (let i = 0; i < this.number; i++) {\n        this.cardsChg.push(i);\n      }\n      \n      // 洗牌\n      shuffleCards(this.cardsChg, this.cardsChg.length);\n      console.log('重新洗牌完成，新牌堆:', this.cardsChg.length, '张');\n    },\n    // 计算点数\n    getScore(player) {\n      let score = 0;\n      let arr = this[\"arr\" + player];\n      let flag = false;\n      for (let i = 0; i < arr.length; i++) {\n        score += arr[i].value;\n        if (arr[i].value === 1) {\n          flag = true;\n        }\n      }\n      if (score <= 11 && flag === true) {\n        score += 10;\n      } else if (score > 21) {\n        score = 0;\n        player == 2 ? this.gameManager.setLose() : this.gameManager.setWin();\n      }\n      return score;\n    },\n\n    async stepFn() {\n      if (this.score1 === this.score2) {\n        this.gameManager.setDraw();\n      } else if (this.score1 < this.score2) {\n        this.hit(this.arr1);\n      } else if (this.score1 > this.score2) {\n        this.gameManager.setLose();\n      }\n    },\n    // 点击摸牌按钮\n    handleHitBtn() {\n      this.hit(this.arr2);\n    },\n    \n    /**\n     * 渲染文本视图 - 显示当前游戏状态\n     * 用于终端交互式游戏\n     */\n    renderTextView() {\n      console.log('\\n╔════════════════════════════════════════════════╗');\n      console.log('║            黑杰克 (BlackJack)                 ║');\n      console.log('╚════════════════════════════════════════════════╝');\n      console.log(`\\n步数: ${this.step}\\n`);\n      \n      // 显示游戏规则\n      console.log('规则: 点数接近21获胜，超过21爆牌');\n      \n      // 显示剩余牌堆\n      console.log('━━━ 牌堆 ━━━');\n      const remainingCards = this.cardsChg ? this.cardsChg.length : 0;\n      console.log(`  剩余: ${remainingCards} 张\\n`);\n      \n      // 显示（玩家1）\n      console.log('━━━ 庄家 ━━━');\n      const playerScore = this.getScore(1);\n      if (this.arr1 && this.arr1.length > 0) {\n        const playerCards = this.arr1.map(c => getCardPlaceholderText(c.id)).join(' ');\n        console.log(`  ${playerCards}`);\n        console.log(`  分数: ${playerScore}${playerScore > 21 ? ' 💥 爆牌!' : playerScore === 21 ? ' 🎉 BlackJack!' : ''}\\n`);\n      } else {\n        console.log('  (无牌)\\n');\n      }\n      \n      // 显示（玩家2）\n      console.log('━━━ 玩家 ━━━');\n      const dealerScore = this.getScore(2);\n      if (this.arr2 && this.arr2.length > 0) {\n        const dealerCards = this.arr2.map(c => getCardPlaceholderText(c.id)).join(' ');\n        console.log(`  ${dealerCards}`);\n        console.log(`  分数: ${dealerScore}${dealerScore > 21 ? ' 💥 爆牌!' : ''}\\n`);\n      } else {\n        console.log('  (无牌)\\n');\n      }\n      \n      return '渲染完成';\n    },\n    \n    /**\n     * 获取当前可用的操作列表\n     * 用于终端交互式游戏\n     */\n    getAvailableActions() {\n      const actions = [];\n      \n      // 重新开始按钮\n      actions.push({\n        id: 1,\n        label: '重新开始 (RESTART)',\n        method: 'goon',\n        args: []\n      });\n      \n      // 摘牌按钮（玩家1）\n      const playerScore = this.getScore(1);\n      if (playerScore < 21) {\n        actions.push({\n          id: 2,\n          label: '摘牌 (HIT)',\n          method: 'handleHitBtn',\n          args: []\n        });\n      }\n      \n      // 停牌按钮\n      actions.push({\n        id: 3,\n        label: '停牌 (PASS)',\n        method: 'pass',\n        args: []\n      });\n      \n      return actions;\n    },\n    \n    // 停牌方法（庄家摧牌）\n    // stand() {\n    //   // 庄家持续摘牌直到点数>=17\n    //   while (this.getScore(2) < 17) {\n    //     this.hit(this.cardsChg, this.arr2);\n    //   }\n      \n    //   // 判断胜负\n    //   const playerScore = this.getScore(1);\n    //   const dealerScore = this.getScore(2);\n      \n    //   if (playerScore > 21) {\n    //     this.gameManager.setLose();\n    //   } else if (dealerScore > 21) {\n    //     this.gameManager.setWin();\n    //   } else if (playerScore > dealerScore) {\n    //     this.gameManager.setWin();\n    //   } else if (playerScore < dealerScore) {\n    //     this.gameManager.setLose();\n    //   } else {\n    //     this.gameManager.setDraw();\n    //   }\n      \n    //   this.gameManager.recordOperation();\n    // },\n  },\n  \n  // 以下方法由工厂函数GameComponentPresets.strategyGame添加：\n  // wait(): Promise<void> - 等待指定时间，用于游戏步骤延迟\n  // undo(): void - 撤销上一步操作\n  // pass(): void - 跳过当前步骤（已被组件使用）\n  // goon(): void - 继续游戏（已被组件使用）\n  // goBack(): void - 返回上一状态\n  // step(fn: Function): Promise<void> - 执行游戏步骤\n  // executeMethodWithRenderToString(method: string, ...args: any[]): Promise<void> - 执行方法并渲染\n  // getActions(): Array<Object> - 获取当前可用的操作列表\n  computed: {\n    // 监听点数\n    score1: function () {\n      return this.getScore(1);\n    },\n    score2: function () {\n      return this.getScore(2);\n    },\n  },\n};\n\n// 使用工厂函数创建增强的Sum组件并导出\nexport default GameComponentPresets.strategyGame(Sum, 1000);\n\n/**\n * 工厂函数GameComponentPresets.strategyGame为Sum组件添加的功能：\n * \n * 基础增强功能（来自createEnhancedGameComponent）：\n * - gameManager属性：提供游戏状态管理、自动模式控制和步骤执行\n * - customButtons属性：存储自定义按钮配置\n * - displayButtons计算属性：决定显示哪些游戏控制按钮\n * - gameControlsConfig计算属性：游戏控制配置\n * - wait()、undo()、pass()、goon()等方法：游戏控制方法\n * - created和beforeUnmount生命周期钩子：管理游戏状态和事件监听\n * \n * strategyGame特有功能：\n * - step属性：游戏步骤计数器\n * - difficulty属性：游戏难度配置\n * - seed属性：随机种子，确保游戏可重现\n * - getActions()方法：获取当前可用的操作列表（组件提供了getAvailableActions()替代实现）\n * - 提供策略游戏相关的自动操作和状态管理\n * - 支持自动步骤延迟配置（此处设置为1000ms）\n */\n","import { render } from \"./sum.vue?vue&type=template&id=45783e8e&scoped=true\"\nimport script from \"./sum.vue?vue&type=script&lang=js\"\nexport * from \"./sum.vue?vue&type=script&lang=js\"\n\nimport \"./sum.vue?vue&type=style&index=0&id=45783e8e&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-45783e8e\"]])\n\nexport default __exports__","<template>\n  <GameLayout\n    v-bind=\"gameLayoutProps\"\n    :win-title=\"''\"\n    @step=\"stepFn\"\n    @auto=\"pass\"\n    @goon=\"goon\"\n  >\n    <template #game-content>\n      <div\n        class=\"row flex-row\"\n        style=\"padding-top: 0.625rem; justify-content: space-around\"\n      >\n        <div class=\"flex-col center rela\" style=\"max-width: 25%\">\n          <message\n            class=\"abso\"\n            style=\"top: 4.375rem; left: 0; width: 100%\"\n            show1=\"1\"\n            >1</message\n          >\n          <img class=\"avatar\" :src=\"'./static/avatar/32.webp'\" />\n          <span class=\"diff\" :style=\"{ opacity: diff1 != 0 ? 1 : 0 }\"\n            >{{ diff1 > 0 ? \"+\" : \"\" }}{{ diff1 }}</span\n          >\n          <span class=\"scrore\">{{ score1 }}</span>\n        </div>\n        <div class=\"flex-col center rela\" style=\"max-width: 25%\">\n          <message class=\"abso\" style=\"top: 4.375rem; left: 0; width: 100%\"\n            >asfasfasdfasfdasdfasdfas</message\n          >\n          <img class=\"avatar\" :src=\"'./static/avatar/31.webp'\" />\n          <span class=\"diff\" :style=\"{ opacity: diff2 != 0 ? 1 : 0 }\"\n            >{{ diff2 > 0 ? \"+\" : \"\" }}{{ diff2 }}</span\n          >\n          <span class=\"scrore\">{{ score2 }}</span>\n        </div>\n        <div class=\"flex-col center rela\" style=\"max-width: 25%\">\n          <message class=\"abso\" style=\"top: 4.375rem; left: 0; width: 100%\"\n            >1</message\n          >\n          <img class=\"avatar\" :src=\"'./static/avatar/29.webp'\" />\n          <span class=\"diff\" :style=\"{ opacity: diff3 != 0 ? 1 : 0 }\"\n            >{{ diff3 > 0 ? \"+\" : \"\" }}{{ diff3 }}</span\n          >\n          <span class=\"scrore\">{{ score3 }}</span>\n        </div>\n        <div class=\"flex-col center rela\" style=\"max-width: 25%\">\n          <message class=\"abso\" style=\"top: 4.375rem; left: 0; width: 100%\"\n            >1</message\n          >\n          <img class=\"avatar\" :src=\"'./static/avatar/30.webp'\" />\n          <span class=\"diff\" :style=\"{ opacity: diff4 != 0 ? 1 : 0 }\"\n            >{{ diff4 > 0 ? \"+\" : \"\" }}{{ diff4 }}</span\n          >\n          <span class=\"scrore\">{{ score4 }}</span>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div>\n          <ul\n            class=\"cardsul\"\n            style=\"padding-left: 0; margin: 0; min-height: 9.375rem\"\n          >\n            <CardImage\n              v-for=\"item in arr\"\n              :key=\"item\"\n              class=\"card m-0\"\n              style=\"max-width: 25%\"\n              :class=\"{\n                shanshuo: ssArr.indexOf(item) >= 0,\n                flyin1: flyin1.indexOf(item) >= 0,\n                flyin2: flyin2.indexOf(item) >= 0,\n                flyout1: flyout1.indexOf(item) >= 0,\n                flyout2: flyout2.indexOf(item) >= 0,\n              }\"\n              :card-id=\"item\"\n            />\n          </ul>\n        </div>\n      </div>\n    </template>\n\n    <template #win-content>\n      <h1>\n        <img\n          class=\"avatar\"\n          :src=\"'./static/avatar/' + [32, 31, 29, 30][step % 4] + '.webp'\"\n        />WIN!\n      </h1>\n    </template>\n  </GameLayout>\n</template>\n\n<script>\nimport FishComponent from \"./fish.js\";\n\nconst component = FishComponent;\n\nexport default component;\n</script>\n\n<style scoped>\n@import url(\"./sum.css\");\n</style>\n","import { shuffleCards } from \"../utils/help.js\";\nimport { GameComponentPresets } from \"../utils/gameComponentFactory.js\";\nimport { getCardPlaceholderText } from \"../utils/cardUtils.js\";\nimport { defineAsyncComponent } from \"vue\";\n\n/**\n * message 组件 - 根据环境选择\n */\nconst message =\n  typeof window === \"undefined\"\n    ? { name: \"message\", template: \"<div>Mock message</div>\" }\n    : defineAsyncComponent(() => import(\"./message.vue\"));\n\n/**\n * Fish对象定义了钓鱼游戏的基础组件，将传递给GameComponentPresets.simpleGame工厂函数\n * 工厂函数会为该组件添加游戏管理、按钮控制、自动操作等功能\n */\nconst Fish = {\n  name: \"Fish\",\n  components: { message },\n  data() {\n    return {\n      title: \"FISHING CONTEST OF DOG TEAM\",\n      diff1: 0,\n      diff2: 0,\n      diff3: 0,\n      diff4: 0,\n      cards1: [],\n      cards2: [],\n      cards3: [],\n      cards4: [],\n      ssArr: [],\n      flyin1: [],\n      flyin2: [],\n      flyout1: [],\n      flyout2: [],\n      arr: [],\n      number: 54,\n      \n      // 以下属性由工厂函数GameComponentPresets.simpleGame添加：\n      // gameManager: 游戏管理器实例，提供游戏状态控制和自动操作功能\n      // customButtons: 自定义按钮数组，用于存储游戏控制按钮配置\n      // step: 当前游戏步骤计数\n    };\n  },\n  // 初始化\n  methods: {\n    init() {\n      this.cards1.splice(0);\n      this.cards2.splice(0);\n      this.cards3.splice(0);\n      this.cards4.splice(0);\n      let cards = this.cards1;\n      this.arr.splice(0);\n      for (let i = 0; i < this.number; i++) {\n        cards.push(i);\n      }\n      shuffleCards(cards, this.number);\n      this.cards2.push(...cards.splice(-14));\n      this.cards3.push(...cards.splice(-13));\n      this.cards4.push(...cards.splice(-13));\n    },\n    time(handle, time) {\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve();\n          handle();\n        }, time);\n      });\n    },\n    async push(arr, item) {\n      arr.push(item);\n      // var type = (this.step % 2) == 0 ? 'flyout1' : 'flyout2'\n      // this[type].push(item)\n      // await this.time(() => {\n      //   this[type].splice(0)\n      // }, 500)\n    },\n    // 摸牌\n    async hit(cards, arr) {\n      var currentCard = cards.shift();\n      var value = currentCard >> 2;\n      if (value == 13) {\n        this.push(arr, currentCard);\n        this.ssArr.push(currentCard);\n        return await this.time(() => {\n          this.ssArr.splice(0);\n          for (let i = 1; i <= 4; i++) {\n            i != (this.step % 4) + 1 &&\n              arr.push(\n                ...this[\"cards\" + i].splice(0, currentCard == 53 ? 5 : 3),\n              );\n          }\n          // arr.push(...((this.step % 2) == 0 ? this.cards2 : this.cards1).splice(0, currentCard == 53 ? 5 : 3))\n        }, this.gameManager.autoStepDelay);\n      }\n      var index = value == 10 ? 0 : arr.findIndex((item) => item >> 2 == value);\n      this.push(arr, currentCard);\n      if (index < 0) {\n        return;\n      }\n      this.ssArr.push(currentCard, arr[index]);\n      await this.time(() => {\n        this.ssArr.splice(0);\n        cards.push(...arr.splice(index));\n      }, this.gameManager.autoStepDelay);\n    },\n    /**\n     * 渲染文本视图 - 显示当前游戏状态\n     * 用于终端交互式游戏\n     */\n    renderTextView() {\n      console.log('\\n╔════════════════════════════════════════════════╗');\n      console.log('║              钓鱼游戏 (Fish)                  ║');\n      console.log('╚════════════════════════════════════════════════╝');\n      console.log(`\\n步数: ${this.step}\\n`);\n      \n      // 显示4个玩家的牌 - 两行表格格式\n      // console.log('┌─────────┬─────────┬─────────┬─────────┐');\n      console.log('│ 玩家1(你) │  玩家2  │  玩家3  │  玩家4  │');\n      // console.log('├─────────┼─────────┼─────────┼─────────┤');\n      \n      // 获取每个玩家的牌数\n      const cardCounts = [];\n      for (let i = 1; i <= 4; i++) {\n        const cards = this[`cards${i}`];\n        cardCounts.push(cards.length > 0 ? `${cards.length}张` : '已出完');\n      }\n      \n      console.log(`│${cardCounts[0].padStart(9, ' ')}│${cardCounts[1].padStart(9, ' ')}│${cardCounts[2].padStart(9, ' ')}│${cardCounts[3].padStart(9, ' ')}│`);\n      // console.log('└─────────┴─────────┴─────────┴─────────┘');\n      \n      // 显示中央区域\n      console.log('\\n━━━ 中央区域 ━━━');\n      if (this.arr.length > 0) {\n        const cardTexts = this.arr.map(c => getCardPlaceholderText(c)).join(' ');\n        console.log(`  ${cardTexts}`);\n      } else {\n        console.log('  (空)');\n      }\n      \n      return '渲染完成';\n    },\n  },\n  computed: {\n    // 监听点数\n    score1: function () {\n      return this.cards1.length;\n    },\n    score2: function () {\n      return this.cards2.length;\n    },\n    score3: function () {\n      return this.cards3.length;\n    },\n    score4: function () {\n      return this.cards4.length;\n    },\n  },\n  watch: {\n    score4(val, old) {\n      this.diff4 = val - old;\n      this.time(() => {\n        this.diff4 = 0;\n      }, this.gameManager.autoStepDelay);\n    },\n    score3(val, old) {\n      this.diff3 = val - old;\n      this.time(() => {\n        this.diff3 = 0;\n      }, this.gameManager.autoStepDelay);\n    },\n    score2(val, old) {\n      this.diff2 = val - old;\n      this.time(() => {\n        this.diff2 = 0;\n      }, this.gameManager.autoStepDelay);\n    },\n    score1(val, old) {\n      this.diff1 = val - old;\n      this.time(() => {\n        this.diff1 = 0;\n      }, this.gameManager.autoStepDelay);\n    },\n  },\n};\n\n// 使用工厂函数创建增强的fish组件并导出\nexport default GameComponentPresets.simpleGame(Fish, 1000);\n\n/**\n * 工厂函数GameComponentPresets.simpleGame为Fish组件添加的功能：\n * \n * 基础增强功能（来自createEnhancedGameComponent）：\n * - gameManager属性：提供游戏状态管理、自动模式控制和步骤执行\n * - customButtons属性：存储自定义按钮配置\n * - displayButtons计算属性：决定显示哪些游戏控制按钮\n * - gameControlsConfig计算属性：游戏控制配置\n * - wait()、pass()、goon()等方法：游戏控制方法\n * - created和beforeUnmount生命周期钩子：管理游戏状态和事件监听\n * \n * simpleGame特有功能：\n * - step属性：游戏步骤计数器\n * - getActions()方法：获取当前可用的操作列表\n * - 提供简单游戏相关的自动操作和状态管理\n * - 支持自动步骤延迟配置（此处设置为1000ms）\n */\n","import { render } from \"./fish.vue?vue&type=template&id=a9f40ed8&scoped=true\"\nimport script from \"./fish.vue?vue&type=script&lang=js\"\nexport * from \"./fish.vue?vue&type=script&lang=js\"\n\nimport \"./fish.vue?vue&type=style&index=0&id=a9f40ed8&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-a9f40ed8\"]])\n\nexport default __exports__","<template>\n  <GameLayout\n    v-bind=\"gameLayoutProps\"\n    :lose-subtitle=\"'NO EXP = 24'\"\n    @undo=\"undo\"\n    @goon=\"goon\"\n    @step=\"stepFn\"\n    @auto=\"pass\"\n  >\n    <template #game-content>\n      <div class=\"row center\" style1=\"overflow:scroll\">\n        <div class=\"flex-row center\">\n          <ul class=\"cardsul flex-row center\" style=\"padding-left: 0\">\n            <div class=\"flex-col center m-0\">\n              <!-- <span class=\"vertical m-0\">(</span> -->\n              <point24card :card=\"arr[0]\"></point24card>\n              <div class=\"flex-row\" v-show=\"step < 3\">\n                <span\n                  v-for=\"i in 4\"\n                  :key=\"i\"\n                  class=\"sign center\"\n                  :class=\"{ choose: sign == i }\"\n                  @click=\"canOperate && clickSign(i)\"\n                  >{{ signs[i] }}</span\n                >\n              </div>\n              <CardImage\n                v-if=\"sign != 0\"\n                card-id=\"bg\"\n                class=\"card align-center\"\n              />\n              <!-- <span class=\"vertical m-0\">)</span> -->\n              <span class=\"vertical m-0\">=</span>\n              <span class=\"m-0\">{{ calc(arr[0]).toFixed(2) }}</span>\n            </div>\n          </ul>\n          <ul\n            class=\"cardsul flex-row center\"\n            style=\"padding-left: 0; margin-left: 1.25rem\"\n          >\n            <div\n              v-for=\"(item, i) in arr\"\n              :key=\"i\"\n              class=\"align-center flex-wrap flex-row center\"\n            >\n              <div v-if=\"i != 0\" class=\"flex-row center m-0\">\n                <span\n                  class=\"sign center\"\n                  @click=\"canOperate && clickCard(item, i)\"\n                  >{{ signs[sign] }}</span\n                >\n                <point24card\n                  :card=\"item\"\n                  @click=\"canOperate && clickCard(item, i)\"\n                ></point24card>\n              </div>\n            </div>\n          </ul>\n        </div>\n      </div>\n    </template>\n  </GameLayout>\n</template>\n\n<script>\nimport Point24Component from \"./point24.js\";\n\nconst component = Point24Component;\n\nexport default component;\n</script>\n\n<style scoped>\n@import url(\"./sum.css\");\n</style>\n","import { shuffleCards } from \"../utils/help.js\";\nimport { GameComponentPresets } from \"../utils/gameComponentFactory.js\";\nimport { getCardPlaceholderText } from \"../utils/cardUtils.js\";\nimport { defineAsyncComponent } from \"vue\";\n\n/**\n * point24card 组件 - 根据环境选择\n */\nconst point24card =\n  typeof window === \"undefined\"\n    ? { name: \"point24card\", template: \"<div>Mock point24card</div>\" }\n    : defineAsyncComponent(() => import(\"./point24card.vue\"));\n// var opts    =  [ \" + \" , \" * \" , \" - \" , \" - \" , \" / \" , \" / \" ];\nvar opts = [1, 3, 2, 2, 4, 4];\n\nfunction process(nums, len, aim) {\n  for (var i = 0; i < len; i++) {\n    for (var j = i + 1; j < len; j++) {\n      var numij = [nums[i], nums[j]];\n      nums[j] = nums[len - 1];\n      for (var k = 0; k < 6; k++) {\n        // nums[i]  =   ' ( '   +  numij[k % 2 ]  +  opts[k]  +  numij[( ! (k % 2 ) * 1 )]  +   ' ) ' ;\n        nums[i] = [numij[k % 2], opts[k], numij[!(k % 2) * 1]];\n        if (process(nums, len - 1, aim)) {\n          return true;\n        }\n      }\n      nums[i] = numij[0];\n      nums[j] = numij[1];\n    }\n  }\n  // return  (len  ==   1 )  &&  (Math.abs(( new  Function( \" return \"   +  nums[ 0 ])())  -  aim)  <   0.0000001 );\n  return len == 1 && Math.abs(calc(nums[0]) - aim) < 0.0000001;\n}\n\nlet fns = [\n  () => {},\n  (a, b) => a + b,\n  (a, b) => a - b,\n  (a, b) => a * b,\n  (a, b) => a / b,\n];\n\nfunction calc(a) {\n  if (Number.isFinite(a)) {\n    return (a >> 2) + 1;\n  } else {\n    let [num1, sign, num2] = a;\n    num1 = calc(num1);\n    num2 = calc(num2);\n    return fns[sign](num1, num2);\n  }\n}\n\nfunction first(i) {\n  return Number.isFinite(i) ? i : first(i[0]);\n}\n\n/**\n * Point24对象定义了24点游戏的基础组件，将传递给GameComponentPresets.puzzleGame工厂函数\n * 工厂函数会为该组件添加游戏管理、按钮控制、自动操作等功能\n */\nconst Point24 = {\n  name: \"point24\",\n  components: { point24card },\n  data() {\n    return {\n      title: \"Point24\",\n      sign: 0,\n      cards1: [],\n      cards2: [0, 0, 0],\n      signs: [\"UP\", \"+\", \"-\", \"X\", \"/\"],\n      arr: [],\n      number: 52,\n      \n      // 以下属性由工厂函数GameComponentPresets.puzzleGame添加：\n      // gameManager: 游戏管理器实例，提供游戏状态控制和自动操作功能\n      // customButtons: 自定义按钮数组，用于存储游戏控制按钮配置\n      // step: 当前游戏步骤计数\n      // history: 计算历史记录数组\n      // result: 当前计算结果\n    };\n  },\n  // 初始化\n  methods: {\n    init() {\n      this.sign = 0;\n      this.cards1.splice(0);\n      this.arr.splice(0);\n      let cards = this.cards1;\n      for (let i = 0; i < this.number; i++) {\n        cards.push(i);\n      }\n      shuffleCards(cards, this.number);\n      this.arr.push(...cards.splice(0, 4));\n      this.autoCalc(); // 恢复autoCalc调用\n    },\n    calc,\n    first,\n    process,\n    clickSign(sign) {\n      this.sign = this.sign == sign ? 0 : sign;\n    },\n    // 记录操作\n    recordOperation(type, data) {\n      this.gameManager.recordOperation({\n        type: type,\n        ...data,\n        timestamp: Date.now(),\n      });\n    },\n\n    // 处理撤销操作\n    handleUndo(operation) {\n      // 根据操作类型执行相应的撤销逻辑\n      switch (operation.type) {\n        case \"combine\":\n          // 撤销组合操作\n          this.cards2.splice(this.step, 1);\n          this.arr.splice(\n            this.arr.findIndex(\n              (a) => this.first(a) == this.first(operation.combined),\n            ),\n            1,\n            operation.left,\n            operation.right,\n          );\n          break;\n      }\n    },\n\n    // 重写clickCard方法，使用GameStateManager记录操作\n    clickCard(card, i) {\n      if (i == 0) {\n        console.log(`索引为0，直接返回`);\n        return;\n      }\n      if (i === -1) {\n        throw new Error(`没找到该卡片`);\n      }\n      if (this.sign != 0) {\n        let left = this.arr[0];\n        let right = this.arr.splice(i, 1)[0];\n        let combined = [left, this.sign, right];\n        this.arr.splice(0, 1, combined);\n        this.sign = 0;\n        this.cards2.splice(this.step, 1, combined);\n        this.recordOperation(\"combine\", {\n          left: left,\n          right: right,\n          combined: combined,\n        });\n      } else {\n        let temp = this.arr[0];\n        this.arr.splice(0, 1, this.arr[i]);\n        this.arr.splice(i, 1, temp);\n      }\n    },\n\n    // 重写stepFn方法\n    async stepFn() {\n      await this.gameManager.step(async () => {\n        if (this.step >= 3) {\n          console.log(`步数已达到3，检查游戏结果...`);\n          // this.autoCalc(); // 调用autoCalc来检查游戏结果\n          return;\n        }\n        let temp = this.cards2[this.step];\n        this.sign = 0;\n        const index1 = this.arr.findIndex((a) => this.first(a) == this.first(temp[0]));\n        this.clickCard(temp[0], index1);\n        await this.wait();\n        this.clickSign(temp[1]);\n        await this.wait();\n        const index2 = this.arr.findIndex((a) => this.first(a) == this.first(temp[2]));\n        this.clickCard(temp[2], index2);\n      });\n    },\n    autoCalc() {\n      if (this.step >= 3) {\n        try {\n          const result = this.calc(this.arr[0]);\n          if (result == 24) {\n            console.log(\"游戏胜利！\");\n            this.gameManager.setWin();\n          } else {\n            console.log(\"游戏失败！\");\n            this.gameManager.setLose();\n          }\n        } catch (error) {\n          console.log(\"计算过程出错:\", error.message);\n          this.gameManager.stopAuto();\n        }\n        return;\n      }\n      let step = this.step;\n      let temp = [...this.arr];\n      let f = this.process(temp, temp.length, 24);\n      if (!f) {\n        this.gameManager.setLose();\n        return;\n      }\n      this.cards2.splice(2, 1, temp[0]);\n      if (step >= 2) {\n        return;\n      }\n      let temp00 = temp[0][0],\n        temp02 = temp[0][2];\n      let l = Number.isFinite(temp00);\n      let r = Number.isFinite(temp02);\n\n      this.cards2.splice(\n        1,\n        1,\n        l\n          ? temp02\n          : r\n            ? temp[0][0]\n            : first(temp00) == first(this.cards2[0])\n              ? temp02\n              : temp00,\n      );\n      if (step >= 1) {\n        return;\n      }\n\n      this.cards2.splice(\n        0,\n        1,\n        l\n          ? Number.isFinite(temp02[0])\n            ? temp02[2]\n            : temp02[0]\n          : r\n            ? Number.isFinite(temp00[0])\n              ? temp00[2]\n              : temp00[0]\n            : temp00,\n      );\n    },\n    /**\n     * 将公式结构转换为可读字符串\n     * 递归处理嵌套的公式结构，类似于point24card组件的渲染方式\n     */\n    formulaToString(formula) {\n      if (Number.isFinite(formula)) {\n        // 如果是数字，直接返回牌的文本表示\n        return getCardPlaceholderText(formula);\n      } else if (Array.isArray(formula) && formula.length === 3) {\n        // 如果是数组 [左操作数, 运算符, 右操作数]\n        const [left, operator, right] = formula;\n        const operatorSymbol = this.signs[operator] || this.signs[0];\n        const leftStr = this.formulaToString(left);\n        const rightStr = this.formulaToString(right);\n        return `(${leftStr} ${operatorSymbol} ${rightStr})`;\n      } else {\n        // 其他情况，返回字符串表示\n        return String(formula);\n      }\n    },\n\n    /**\n     * 渲染文本视图 - 显示当前游戏状态\n     * 用于终端交互式游戏\n     */\n    renderTextView() {\n      console.log('\\n╔════════════════════════════════════════════════╗');\n      console.log('║              24点游戏 (Point24)               ║');\n      console.log('╚════════════════════════════════════════════════╝');\n      console.log(`\\n步数: ${this.step}\\n`);\n      \n      // 显示4张牌（显示完整公式而不仅仅是第一张牌）\n      console.log('━━━ 当前牌面 ━━━');\n      const cards = [];\n      for (let i = 0; i < 4; i++) {\n        if (this.arr[i] !== undefined) {\n          const formulaStr = this.formulaToString(this.arr[i]);\n          cards.push(`[${i}] ${formulaStr}`);\n        }\n      }\n      console.log(`  ${cards.join('  ')}\\n`);\n      \n      // 显示运算符\n      console.log('━━━ 可用运算符 ━━━');\n      console.log('  [+] 加  [-] 减  [×] 乘  [÷] 除\\n');\n      \n      // 显示计算历史\n      if (this.history && this.history.length > 0) {\n        console.log('━━━ 计算历史 ━━━');\n        this.history.forEach((h, idx) => {\n          console.log(`  ${idx + 1}. ${h}`);\n        });\n        console.log('');\n      }\n      \n      // 显示当前结果\n      if (this.result !== undefined && this.result !== null) {\n        console.log(`当前结果: ${this.result}`);\n        if (this.result === 24) {\n          console.log('🎉 恭喜！达到24点！');\n        }\n      }\n      \n      return '渲染完成';\n    },\n    \n    /**\n     * 获取当前可用的操作列表\n     * 用于终端交互式游戏\n     * 使用工厂函数中统一实现的方法\n     */\n  },\n  \n  // 以下方法由工厂函数GameComponentPresets.puzzleGame添加：\n  // wait(): Promise<void> - 等待指定时间，用于游戏步骤延迟\n  // undo(): void - 撤销上一步操作\n  // pass(): void - 跳过当前步骤\n  // goon(): void - 继续游戏\n  // goBack(): void - 返回上一状态\n  // step(fn: Function): Promise<void> - 执行游戏步骤\n  // executeMethodWithRenderToString(method: string, ...args: any[]): Promise<void> - 执行方法并渲染\n  // getActions(): Array<Object> - 获取当前可用的操作列表\n  // formulaToString(formula): string - 将公式对象转换为字符串表示\n};\n\n// 使用工厂函数创建增强的point24组件并导出\nexport default GameComponentPresets.puzzleGame(Point24, 800);\n\n/**\n * 工厂函数GameComponentPresets.puzzleGame为Point24组件添加的功能：\n * \n * 基础增强功能（来自createEnhancedGameComponent）：\n * - gameManager属性：提供游戏状态管理、自动模式控制和步骤执行\n * - customButtons属性：存储自定义按钮配置\n * - displayButtons计算属性：决定显示哪些游戏控制按钮\n * - gameControlsConfig计算属性：游戏控制配置\n * - wait()、pass()、goon()等方法：游戏控制方法\n * - created和beforeUnmount生命周期钩子：管理游戏状态和事件监听\n * \n * puzzleGame特有功能：\n * - step属性：游戏步骤计数器\n * - history属性：计算历史记录数组\n * - result属性：当前计算结果\n * - getActions()方法：获取当前可用的操作列表\n * - formulaToString()方法：将公式对象转换为字符串表示\n * - 提供拼图/解谜游戏相关的自动操作和状态管理\n * - 支持自动步骤延迟配置（此处设置为800ms）\n */\n","import { render } from \"./point24.vue?vue&type=template&id=eaeab1bc&scoped=true\"\nimport script from \"./point24.vue?vue&type=script&lang=js\"\nexport * from \"./point24.vue?vue&type=script&lang=js\"\n\nimport \"./point24.vue?vue&type=style&index=0&id=eaeab1bc&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-eaeab1bc\"]])\n\nexport default __exports__","<template>\n  <GameLayout\n    v-bind=\"gameLayoutProps\"\n    :lose-title=\"''\"\n    :lose-subtitle=\"'YOUR LUCKY CLASSES:'\"\n    :lose-buttons=\"[\n      {\n        text: 'GO ON',\n        action: 'goon',\n        callback: goon,\n        disabled: false,\n      },\n    ]\"\n    :lose-modal-style=\"{ backgroundColor: 'rgba(0,0,0,0.8)' }\"\n    @step=\"stepFn\"\n    @auto=\"pass\"\n    @goon=\"goon\"\n  >\n    <template #game-content>\n      <div class=\"row\">\n        <div class=\"center\">\n          <ul\n            class=\"cardsul\"\n            style=\"\n              padding-left: 0;\n              max-width: 43.125rem;\n              justify-content: space-between;\n              margin-top: 11.25rem;\n            \"\n          >\n            <li\n              v-for=\"(item, i) in arr\"\n              :key=\"i\"\n              class=\"cards m-0\"\n              :class=\"'cards' + i\"\n            >\n              <CardImage\n                v-for=\"(card, j) in item\"\n                :key=\"card\"\n                class=\"m-0 card abso\"\n                :style=\"{\n                  top: ((month == i ? j : 1 + j) * 30) / 16 + 'rem',\n                  left: 0,\n                }\"\n                :card-id=\"\n                  cards2[i] > j ||\n                  (month == i && ((month == 12 && j == 3) || j == 4))\n                    ? card\n                    : 'bg'\n                \"\n              />\n              <div\n                v-show=\"i == 12 && month != i\"\n                class=\"m-0 card\"\n                style=\"background-color: #719192\"\n              ></div>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </template>\n\n    <template #lose-cards>\n      <div class1=\"row\" style=\"margin-top: 0.625rem\">\n        <div>\n          <ul class=\"cardsul\" style=\"padding-left: 0; max-width: 46.25rem\">\n            <CardImage\n              v-for=\"(item, i) in visibleCards\"\n              :key=\"i\"\n              :card-id=\"item.cardId\"\n              class=\"card\"\n            />\n          </ul>\n        </div>\n      </div>\n    </template>\n  </GameLayout>\n</template>\n\n<script>\nimport MonthComponent from \"./month.js\";\n\nconst component = {\n  ...MonthComponent,\n  computed: {\n    ...MonthComponent.computed,\n    visibleCards() {\n      return this.cards2\n        .map((item, i) => ({ originalItem: item, index: i, cardId: i * 4 + 1 }))\n        .filter(item => item.originalItem >= 4 && item.index < 12);\n    }\n  }\n};\n\nexport default component;\n</script>\n\n<style scoped>\n@import url(\"./sum.css\");\n\n.cards12 {\n  position: absolute;\n  top: -11.25rem;\n  height: 9.375rem;\n  min-width: 25rem;\n  width: 100%;\n  height: 9.375rem;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n}\n.cards12 .card {\n  position: static;\n}\n</style>\n","import { shuffleCards } from \"../utils/help.js\";\nimport { GameComponentPresets } from \"../utils/gameComponentFactory.js\";\nimport { getCardPlaceholderText } from \"../utils/cardUtils.js\";\n\n/**\n * Month对象定义了月份游戏的基础组件，将传递给GameComponentPresets.simpleGame工厂函数\n * 工厂函数会为该组件添加游戏管理、按钮控制、自动操作等功能\n */\nconst Month = {\n  name: \"Month\",\n  data() {\n    return {\n      title: \"Month\",\n      month: 12,\n      cards1: [],\n      cards2: [],\n      arr: [],\n      number: 52,\n      \n      // 以下属性由工厂函数GameComponentPresets.simpleGame添加：\n      // gameManager: 游戏管理器实例，提供游戏状态控制和自动操作功能\n      // customButtons: 自定义按钮数组，用于存储游戏控制按钮配置\n      // step: 当前游戏步骤计数\n    };\n  },\n  // 初始化\n  methods: {\n    init() {\n      this.month = 12;\n      this.cards1.splice(0);\n      this.cards2.splice(0);\n      this.arr.splice(0);\n      let cards = this.cards1;\n      for (let i = 0; i < this.number; i++) {\n        cards.push(i);\n      }\n      shuffleCards(cards, this.number);\n      for (let i = 0; i < this.number >> 2; i++) {\n        this.cards2.push(0);\n        this.arr.push(cards.splice(0, 4));\n      }\n    },\n    async push(arr, item) {\n      arr.push(item);\n    },\n    // 摸牌\n    async hit() {\n      let currentCard = this.arr[this.month].pop();\n      var value = currentCard >> 2;\n      this.arr[value].unshift(currentCard);\n      this.month = value;\n      this.cards2[value]++;\n    },\n    \n    /**\n     * 渲染文本视图 - 显示当前游戏状态\n     * 用于终端交互式游戏\n     */\n    renderTextView() {\n      console.log('\\n╔════════════════════════════════════════════════╗');\n      console.log('║              月份游戏 (Month)                 ║');\n      console.log('╚════════════════════════════════════════════════╝');\n      console.log(`\\n步数: ${this.step}\\n`);\n      \n      // 显示12个月份位置\n      const months = ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'];\n      for (let i = 0; i < 12; i++) {\n        const count = this.cards2[i];\n        console.log(`  [${months[i]}] ` + this.arr[i].map((c, i) => `${i < count || i >= 4 ? getCardPlaceholderText(c) : \"[?]\"}`).join(' ') + (count >= 4 ? ' [✓] 已完成' : ''));\n      }\n      \n      // 显示第13个位置\n      const count13 = this.cards2[12];\n      console.log(`  [牌堆] ` + this.arr[12].map((c, i) => `${i < count13 || i >= 3 ? getCardPlaceholderText(c) : \"[?]\"}`).join(' ') + (count13 >= 4 ? ' [✓] 已完成' : `剩余 ${4 - count13} 次机会`));\n      \n      return '渲染完成';\n    },\n    \n    /**\n     * 获取当前可用的操作列表\n     * 用于终端交互式游戏\n     * 使用工厂函数中统一实现的方法\n     */\n  },\n  \n  // 以下方法由工厂函数GameComponentPresets.simpleGame添加：\n  // wait(): Promise<void> - 等待指定时间，用于游戏步骤延迟\n  // undo(): void - 撤销上一步操作\n  // pass(): void - 跳过当前步骤\n  // goon(): void - 继续游戏\n  // goBack(): void - 返回上一状态\n  // step(fn: Function): Promise<void> - 执行游戏步骤\n  // executeMethodWithRenderToString(method: string, ...args: any[]): Promise<void> - 执行方法并渲染\n  // getActions(): Array<Object> - 获取当前可用的操作列表\n};\n\n// 使用工厂函数创建增强的month组件并导出\nexport default GameComponentPresets.simpleGame(Month, 1000);\n\n/**\n * 工厂函数GameComponentPresets.simpleGame为Month组件添加的功能：\n * \n * 基础增强功能（来自createEnhancedGameComponent）：\n * - gameManager属性：提供游戏状态管理、自动模式控制和步骤执行\n * - customButtons属性：存储自定义按钮配置\n * - displayButtons计算属性：决定显示哪些游戏控制按钮\n * - gameControlsConfig计算属性：游戏控制配置\n * - wait()、pass()、goon()等方法：游戏控制方法\n * - created和beforeUnmount生命周期钩子：管理游戏状态和事件监听\n * \n * simpleGame特有功能：\n * - step属性：游戏步骤计数器\n * - getActions()方法：获取当前可用的操作列表\n * - 提供简单游戏相关的自动操作和状态管理\n * - 支持自动步骤延迟配置（此处设置为1000ms）\n */\n","import { render } from \"./month.vue?vue&type=template&id=cebf8f72&scoped=true\"\nimport script from \"./month.vue?vue&type=script&lang=js\"\nexport * from \"./month.vue?vue&type=script&lang=js\"\n\nimport \"./month.vue?vue&type=style&index=0&id=cebf8f72&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-cebf8f72\"]])\n\nexport default __exports__","<template>\n  <GameLayout\n    v-bind=\"gameLayoutProps\"\n    :lose-subtitle=\"'NO PAIR'\"\n    @undo=\"undo\"\n    @goon=\"goon\"\n    @step=\"stepFn\"\n    @auto=\"pass\"\n  >\n    <template #game-content>\n      <div class=\"row\">\n        <div>\n          <ul\n            class=\"cardsul cards\"\n            style=\"\n              padding-left: 0;\n              width: 100%;\n              height: 46.875rem;\n              max-width: 31.25rem;\n              margin: auto;\n            \"\n          >\n            <CardImage\n              v-for=\"(item, i) in cards1\"\n              :key=\"i\"\n              v-show=\"!done(item)\"\n              class=\"card abso\"\n              :style=\"map[i]\"\n              style=\"width: 20%; height: 9.375rem; margin: 0\"\n              :card-id=\"check(i) ? item : 'bg'\"\n              @click=\"canOperate && clickCard(item, i)\"\n              :class=\"{ shanshuo: sign == item }\"\n            />\n          </ul>\n        </div>\n      </div>\n    </template>\n  </GameLayout>\n</template>\n\n<script>\nimport TortoiseComponent from \"./Tortoise.js\";\n\nconst component = TortoiseComponent;\n\nexport default component;\n</script>\n\n<style scoped>\n@import url(\"./sum.css\");\n</style>\n","import { shuffleCards } from \"../utils/help.js\";\nimport { GameComponentPresets } from \"../utils/gameComponentFactory.js\";\nimport { getCardPlaceholderText } from \"../utils/cardUtils.js\";\n\n/**\n * Tortoise对象定义了乌龟棋游戏的基础组件，将传递给GameComponentPresets.cardGame工厂函数\n * 工厂函数会为该组件添加游戏管理、按钮控制、自动操作等功能\n */\nconst Tortoise = {\n  name: \"Tortoise\",\n  data() {\n    return {\n      title: \"Tortoise\",\n      sign: -1,\n      cards1: [],\n      next: [],\n      number: 54,\n      \n      // 以下属性由工厂函数GameComponentPresets.cardGame添加：\n      // gameManager: 游戏管理器实例，提供游戏状态控制和自动操作功能\n      // customButtons: 自定义按钮数组，用于存储游戏控制按钮配置\n      // record: 操作记录数组，用于撤销功能\n      // step: 当前游戏步骤计数\n      \n      map: [\n        { \"z-index\": 0, left: \"10%\", top: \"4.6875rem\", up: [16, 30] },\n        { \"z-index\": 0, left: \"30%\", top: \"4.6875rem\", up: [16, 17, 31] },\n        { \"z-index\": 0, left: \"50%\", top: \"4.6875rem\", up: [17, 18, 31] },\n        { \"z-index\": 0, left: \"70%\", top: \"4.6875rem\", up: [18, 32] },\n        { \"z-index\": 0, left: \"10%\", top: \"14.0625rem\", up: [16, 19, 37] },\n        { \"z-index\": 0, left: \"30%\", top: \"14.0625rem\", up: [16, 17, 19, 20] },\n        { \"z-index\": 0, left: \"50%\", top: \"14.0625rem\", up: [17, 18, 20, 21] },\n        { \"z-index\": 0, left: \"70%\", top: \"14.0625rem\", up: [18, 21, 33] },\n        { \"z-index\": 0, left: \"10%\", top: \"23.4375rem\", up: [19, 22, 37] },\n        { \"z-index\": 0, left: \"30%\", top: \"23.4375rem\", up: [19, 20, 22, 23] },\n        { \"z-index\": 0, left: \"50%\", top: \"23.4375rem\", up: [20, 21, 23, 24] },\n        { \"z-index\": 0, left: \"70%\", top: \"23.4375rem\", up: [21, 24, 33] },\n        { \"z-index\": 0, left: \"10%\", top: \"32.8125rem\", up: [22, 36] },\n        { \"z-index\": 0, left: \"30%\", top: \"32.8125rem\", up: [22, 23, 35] },\n        { \"z-index\": 0, left: \"50%\", top: \"32.8125rem\", up: [23, 24, 35] },\n        { \"z-index\": 0, left: \"70%\", top: \"32.8125rem\", up: [24, 34] },\n        { \"z-index\": 1, left: \"20%\", top: \"9.375rem\", up: [25] },\n        { \"z-index\": 1, left: \"40%\", top: \"9.375rem\", up: [25, 26] },\n        { \"z-index\": 1, left: \"60%\", top: \"9.375rem\", up: [26] },\n        { \"z-index\": 1, left: \"20%\", top: \"18.75rem\", up: [25, 27] },\n        { \"z-index\": 1, left: \"40%\", top: \"18.75rem\", up: [25, 26, 27, 28] },\n        { \"z-index\": 1, left: \"60%\", top: \"18.75rem\", up: [26, 28] },\n        { \"z-index\": 1, left: \"20%\", top: \"28.125rem\", up: [27] },\n        { \"z-index\": 1, left: \"40%\", top: \"28.125rem\", up: [27, 28] },\n        { \"z-index\": 1, left: \"60%\", top: \"28.125rem\", up: [28] },\n        { \"z-index\": 2, left: \"30%\", top: \"14.0625rem\", up: [29] },\n        { \"z-index\": 2, left: \"50%\", top: \"14.0625rem\", up: [29] },\n        { \"z-index\": 2, left: \"30%\", top: \"23.4375rem\", up: [29] },\n        { \"z-index\": 2, left: \"50%\", top: \"23.4375rem\", up: [29] },\n        { \"z-index\": 3, left: \"40%\", top: \"18.75rem\", up: [] },\n        { \"z-index\": 1, left: \"0\", top: \"0\", up: [38] },\n        { \"z-index\": 1, left: \"40%\", top: \"0\", up: [39] },\n        { \"z-index\": 1, left: \"80%\", top: \"0\", up: [40] },\n        { \"z-index\": 1, left: \"80%\", top: \"18.75rem\", up: [41] },\n        { \"z-index\": 1, left: \"80%\", top: \"37.5rem\", up: [42] },\n        { \"z-index\": 1, left: \"40%\", top: \"37.5rem\", up: [43] },\n        { \"z-index\": 1, left: \"0\", top: \"37.5rem\", up: [44] },\n        { \"z-index\": 1, left: \"0\", top: \"18.75rem\", up: [45] },\n        { \"z-index\": 2, left: \"0\", top: \"2.3438rem\", up: [46] },\n        { \"z-index\": 2, left: \"35%\", top: \"0\", up: [47] },\n        { \"z-index\": 2, left: \"75%\", top: \"0\", up: [48] },\n        { \"z-index\": 2, left: \"80%\", top: \"16.4063rem\", up: [49] },\n        { \"z-index\": 2, left: \"80%\", top: \"35.1563rem\", up: [50] },\n        { \"z-index\": 2, left: \"45%\", top: \"37.5rem\", up: [51] },\n        { \"z-index\": 2, left: \"5%\", top: \"37.5rem\", up: [52] },\n        { \"z-index\": 2, left: \"0\", top: \"21.0938rem\", up: [53] },\n        { \"z-index\": 3, left: \"0\", top: \"4.6875rem\", up: [] },\n        { \"z-index\": 3, left: \"30%\", top: \"0\", up: [] },\n        { \"z-index\": 3, left: \"70%\", top: \"0\", up: [] },\n        { \"z-index\": 3, left: \"80%\", top: \"14.0625rem\", up: [] },\n        { \"z-index\": 3, left: \"80%\", top: \"32.8125rem\", up: [] },\n        { \"z-index\": 3, left: \"50%\", top: \"37.5rem\", up: [] },\n        { \"z-index\": 3, left: \"10%\", top: \"37.5rem\", up: [] },\n        { \"z-index\": 3, left: \"0\", top: \"23.4375rem\", up: [] },\n      ],\n    };\n  },\n  // 初始化\n  methods: {\n    init() {\n      this.sign = -1;\n      this.cards1.splice(0);\n      let cards = this.cards1;\n      for (let i = 0; i < this.number; i++) {\n        cards.push(i);\n      }\n      shuffleCards(cards, this.number);\n      this.autoCalc();\n    },\n    async stepFn() {\n      if (this.step >= this.number) {\n        return;\n      }\n      await this.gameManager.step(async () => {\n        let next,\n          next_i,\n          max = -1;\n        let fn = (temp) => {\n          if (temp == this.sign) {\n            return;\n          }\n          if (this.done(temp)) {\n            return;\n          }\n          let index = this.cards1.indexOf(temp);\n          if (this.check(index) && this.map[index][\"z-index\"] > max) {\n            next = temp;\n            next_i = index;\n            max = this.map[index][\"z-index\"];\n          }\n        };\n        if (this.sign != -1 && this.sign << 2 != this.next[0] << 2) {\n          let card = this.sign >> 2;\n          for (let i = 0; i < 4; i++) {\n            let temp = card * 4 + i;\n            fn(temp);\n          }\n        }\n        if (max < 0) {\n          for (let temp of this.next) {\n            fn(temp);\n          }\n        }\n        this.clickCard(next, next_i);\n      });\n    },\n    check(i) {\n      return (\n        this.map[i] &&\n        this.map[i].up.findIndex((up) => !this.done(this.cards1[up])) < 0\n      );\n    },\n    done(card) {\n      return this.gameManager.history.indexOf(card) >= 0;\n    },\n    clickCard(card, i) {\n      if (!this.check(i)) {\n        return;\n      }\n      if (this.sign == card) {\n        this.sign = -1;\n      } else if (this.sign >> 2 != card >> 2) {\n        this.sign = card;\n      } else {\n        this.gameManager.recordOperation(this.sign);\n        this.gameManager.recordOperation(card);\n        this.sign = -1;\n      }\n    },\n    undo() {\n      this.sign = -1;\n      this.gameManager.undo();\n      this.gameManager.undo();\n    },\n    autoCalc() {\n      let step = this.step;\n      if (step % 2 == 1) {\n        return;\n      }\n      if (step >= this.number) {\n        this.gameManager.setWin();\n        return;\n      }\n      let temp = [],\n        i,\n        max = -1,\n        m = -1,\n        d = false;\n      for (i = this.number - 1; i >= 0; i--) {\n        if (!this.done(i)) {\n          let card = this.cards1.indexOf(i);\n          if (this.check(card)) {\n            temp.push(i);\n            if (this.map[card][\"z-index\"] > max) {\n              max = this.map[card][\"z-index\"];\n            }\n          }\n        } else {\n          d = true;\n        }\n        if (i % 4 == 0) {\n          if (temp.length > 1) {\n            if (d) {\n              this.next = temp;\n              return;\n            }\n            if (max > m) {\n              this.next = temp;\n              m = max;\n            }\n          }\n          max = -1;\n          temp = [];\n          d = false;\n        }\n      }\n      if (m < 0) {\n        this.gameManager.setLose();\n      }\n    },\n    \n    /**\n     * 渲染文本视图 - 字符画形式显示当前游戏状态\n     * 通过16格子(4x4)系统模拟浏览器渲染效果，使用细线边框\n     * 画布20x20，卡牌4x4，后渲染的自然覆盖先渲染的\n     */\n    renderTextView() {\n      console.log('\\n╔════════════════════════════════════════════════╗');\n      console.log('║              龟兔赛跑 (Tortoise)              ║');\n      console.log('╚════════════════════════════════════════════════╝');\n      console.log(`\\n步数: ${this.step} / ${this.number}`);\n      console.log(`已配对: ${this.step} 张 | 剩余: ${this.number - this.step} 张\\n`);\n      \n      // 图例\n      console.log('\\n图例:');\n      console.log('  ┌──┐ = 卡牌边框  ▄ = 选中卡牌边框 ♥5 = 可点击卡牌内容  ·· = 不可点击卡牌');\n      \n      // 显示下一步提示\n      if (this.next && this.next.length > 0) {\n        const nextCards = this.next.map(c => getCardPlaceholderText(c)).join(', ');\n        console.log(`\\n💡 提示: 可配对的卡片: ${nextCards}`);\n      }\n      \n      if (this.sign !== -1) {\n        const signIndex = this.cards1.indexOf(this.sign);\n        const signCard = getCardPlaceholderText(this.sign);\n        console.log(`🎯 当前选中: ${signCard} (位置 ${signIndex})\\n`);\n      }\n      \n      // 创建字符画布：20行 × 20列\n      const CANVAS_ROWS = 20;\n      const CANVAS_COLS = 20;\n      const canvas = Array(CANVAS_ROWS).fill(null).map(() => Array(CANVAS_COLS).fill('·'));\n      \n      // 卡牌尺寸（字符单位）\n      const CARD_ROWS = 4;  // 4行\n      const CARD_COLS = 4;  // 4列\n      \n      // 布局参数（来自CSS）\n      const LAYOUT_WIDTH = 100;  // 100%\n      const LAYOUT_HEIGHT = 46.875; // rem\n      \n      // 收集所有未完成的卡牌，按z-index排序（从低到高）\n      const activeCards = [];\n      this.cards1.forEach((cardId, posIdx) => {\n        if (!this.done(cardId)) {\n          const mapInfo = this.map[posIdx];\n          const canClick = this.check(posIdx);\n          const isSelected = cardId === this.sign;\n          \n          activeCards.push({\n            cardId,\n            posIdx,\n            left: parseFloat(mapInfo.left),\n            top: parseFloat(mapInfo.top),\n            zIndex: mapInfo[\"z-index\"],\n            canClick,\n            isSelected,\n            cardText: getCardPlaceholderText(cardId)\n          });\n        }\n      });\n      \n      // 按z-index升序排列（底层先渲染）\n      activeCards.sort((a, b) => a.zIndex - b.zIndex);\n      \n      // 逐层渲染卡牌（后渲染的自然覆盖先渲染的）\n      activeCards.forEach(card => {\n        // 计算卡牌在字符画布中的位置\n        const startCol = Math.round((card.left / LAYOUT_WIDTH) * (CANVAS_COLS - CARD_COLS));\n        const startRow = Math.round((card.top / LAYOUT_HEIGHT) * (CANVAS_ROWS - CARD_ROWS));\n        \n        // 确保位置在有效范围内\n        const safeStartRow = Math.max(0, Math.min(startRow, CANVAS_ROWS - CARD_ROWS));\n        const safeStartCol = Math.max(0, Math.min(startCol, CANVAS_COLS - CARD_COLS));\n        \n        // 渲染16格子卡牌\n        for (let row = 0; row < CARD_ROWS; row++) {\n          for (let col = 0; col < CARD_COLS; col++) {\n            const canvasRow = safeStartRow + row;\n            const canvasCol = safeStartCol + col;\n            \n            if (canvasRow < CANVAS_ROWS && canvasCol < CANVAS_COLS) {\n              let char = ' ';\n              \n              if (row === 0) {\n                // 第一行：上边框\n                if (this.sign == card.cardId) {\n                  char = \"▄\";\n                } else if (col === 0) {\n                  char = '┌'; // 左上角\n                } else if (col === CARD_COLS - 1) {\n                  char = '┐'; // 右上角\n                } else {\n                  char = '──'; // 上边框（占2个字符宽度）\n                }\n              } else if (row === CARD_ROWS - 1) {\n                // 最后一行：下边框\n                if (this.sign == card.cardId) {\n                  char = \"▀\";\n                } else if (col === 0) {\n                  char = '└'; // 左下角\n                } else if (col === CARD_COLS - 1) {\n                  char = '┘'; // 右下角\n                } else {\n                  char = '──'; // 下边框（占2个字符宽度）\n                }\n              } else if (col === 0 || col === CARD_COLS - 1) {\n                // 左右边框\n                char = this.sign == card.cardId? \"█\" : '│';\n              } else if (card.canClick) {\n                // 可点击卡牌的内部内容\n                if (row === 1 && col === 1) {\n                  char = card.cardText[0] || ' '; // 花色\n                } else if (row === 1 && col === 2) {\n                  char = card.cardText[1] || ' '; // 点数\n                } else if (row === 2 && col === 1) {\n                  char = card.cardText[1] || ' '; // 下方点数\n                } else if (row === 2 && col === 2) {\n                  char = card.cardText[0] || ' '; // 下方花色\n                }\n              } else {\n                // 不可点击卡牌的内部内容\n                if (row === 1 && (col === 1 || col === 2)) {\n                  char = '·'; // 中间点\n                } else if (row === 2 && (col === 1 || col === 2)) {\n                  char = '·'; // 下方点\n                }\n              }\n              \n              // 处理双字符边框\n              if (char === '──') {\n                canvas[canvasRow][canvasCol] = '─';\n                if (canvasCol + 1 < CANVAS_COLS) {\n                  canvas[canvasRow][canvasCol + 1] = '─';\n                }\n              } else {\n                canvas[canvasRow][canvasCol] = char;\n              }\n            }\n          }\n        }\n      });\n      \n      // 输出字符画\n      console.log('\\n━━━ 游戏布局 (字符画) ━━━');\n      console.log('画布: 20行 × 20列，每张卡牌: 4行 × 4列\\n');\n      \n      // 添加边框\n      const borderedCanvas = [];\n      borderedCanvas.push('┌' + '─'.repeat(CANVAS_COLS) + '┐');\n      \n      canvas.forEach(row => {\n        borderedCanvas.push('│' + row.join('') + '│');\n      });\n      \n      borderedCanvas.push('└' + '─'.repeat(CANVAS_COLS) + '┘');\n      \n      console.log(borderedCanvas.join('\\n'));\n      \n      return '字符画渲染完成';\n    },\n    \n    /**\n     * 获取当前可用的操作列表\n     * 用于终端交互式游戏\n     * 使用工厂函数中统一实现的方法\n     */\n  },\n  \n  // 以下方法由工厂函数GameComponentPresets.cardGame添加：\n  // wait(): Promise<void> - 等待指定时间，用于游戏步骤延迟\n  // undo(): void - 撤销上一步操作（注意：组件重写了此方法）\n  // pass(): void - 跳过当前步骤\n  // goon(): void - 继续游戏\n  // goBack(): void - 返回上一状态\n  // step(fn: Function): Promise<void> - 执行游戏步骤\n  // executeMethodWithRenderToString(method: string, ...args: any[]): Promise<void> - 执行方法并渲染\n  // getActions(): Array<Object> - 获取当前可用的操作列表\n};\n\n// 使用工厂函数创建增强的Tortoise组件并导出\nexport default GameComponentPresets.cardGame(Tortoise, 500);\n\n/**\n * 工厂函数GameComponentPresets.cardGame为Tortoise组件添加的功能：\n * \n * 基础增强功能（来自createEnhancedGameComponent）：\n * - gameManager属性：提供游戏状态管理、自动模式控制和步骤执行\n * - customButtons属性：存储自定义按钮配置\n * - displayButtons计算属性：决定显示哪些游戏控制按钮\n * - gameControlsConfig计算属性：游戏控制配置\n * - wait()、pass()、goon()等方法：游戏控制方法\n * - created和beforeUnmount生命周期钩子：管理游戏状态和事件监听\n * \n * cardGame特有功能：\n * - record属性：存储操作记录，支持撤销功能\n * - step属性：游戏步骤计数器\n * - getActions()方法：获取当前可用的操作列表\n * - 提供纸牌游戏相关的自动操作和状态管理\n * - 支持自动步骤延迟配置（此处设置为500ms）\n * \n * 注意：\n * - Tortoise组件重写了undo()方法，实现了特殊的双步撤销逻辑\n */\n","import { render } from \"./Tortoise.vue?vue&type=template&id=0ad3d044&scoped=true\"\nimport script from \"./Tortoise.vue?vue&type=script&lang=js\"\nexport * from \"./Tortoise.vue?vue&type=script&lang=js\"\n\nimport \"./Tortoise.vue?vue&type=style&index=0&id=0ad3d044&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-0ad3d044\"]])\n\nexport default __exports__","<template>\n  <GameLayout\n    v-bind=\"gameLayoutProps\"\n    :lose-subtitle=\"n + '/' + (number + 1) * 4\"\n    :lose-buttons=\"[\n      {\n        text: 'RESTART',\n        action: 'goon',\n        callback: goon,\n        disabled: false,\n      },\n      {\n        text: 'UNDO',\n        action: 'undo',\n        callback: undo,\n        disabled: undoDisabled,\n      },\n    ]\"\n    @undo=\"undo\"\n    @goon=\"goon\"\n    @step=\"stepFn\"\n    @auto=\"pass\"\n  >\n    <template #game-content>\n      <div class=\"row\">\n        <div>\n          <ul\n            class=\"cardsul flex-col\"\n            :style=\"{ height: (150 * (number + 1)) / 16 + 'rem' }\"\n            style=\"\n              padding-left: 0;\n              width: 100%;\n              max-width: 31.25rem;\n              margin: 0 auto;\n              position: static;\n            \"\n          >\n            <CardImage\n              v-for=\"(item, i) in cards1\"\n              :key=\"i\"\n              class=\"card m-0\"\n              style=\"width: 25%; height: 9.375rem\"\n              :card-id=\"item\"\n              :hide=\"item < 0\"\n              @click=\"canOperate && (item >= 0 ? clickCard(item) : cards1[i - 1] >= 4 && clickSign(i))\"\n              :class=\"{ shanshuo: item >= 0 && canMoveCard(item) }\"\n            >\n              <span v-if=\"cards1[i - 1] >= 4\" class=\"m-0\">{{ getCurrentCandidateCard(i) }}</span>\n            </CardImage>\n          </ul>\n        </div>\n      </div>\n    </template>\n  </GameLayout>\n</template>\n\n<script>\nimport SortComponent from \"./Sort.js\";\n\nconst component = SortComponent;\n\nexport default component;\n</script>\n\n<style scoped>\n@import url(\"./sum.css\");\n</style>\n","// 候选卡片评估工具函数\n\n/**\n * 创建候选对象，延迟计算特征值\n * @param {number} targetCard - 目标卡片\n * @param {number} slotIndex - 空位索引\n * @param {Object} context - 上下文对象，包含必要的方法和属性\n * @param {number} candidatePriority - 候选优先级\n * @param {Object} t - 临时对象信息\n * @param {number} currentTargetIdx - 当前目标索引\n * @param {Object} ruleBasedScore - 基于规则的评分对象（可选）\n * @returns {Object} 候选对象\n */\nexport function createCandidate(targetCard, slotIndex, context, candidatePriority, t, currentTargetIdx, ruleBasedScore = null) {\n  const currentCandidate = {\n    targetCard,\n    slotIndex,\n    ruleBasedScore: ruleBasedScore,  // 保存rule-based评分\n    // 统一使用大于比较，对需要小于比较的特征取反\n    _getters: [\n      // 【新规则第1优先级】空位优先级（rank越小越优先）\n      () => {\n        if (ruleBasedScore) {\n          return ruleBasedScore.slotPriority;\n        }\n        // 如果没有rule-based评分，使用原有的priority\n        return candidatePriority;\n      },\n      // 【新规则第2优先级】排除标记（被排除的候选排在后面）\n      () => {\n        if (ruleBasedScore && ruleBasedScore.excludeReason) {\n          return -1000000; // 大负数使其排在最后\n        }\n        return 0;\n      },\n      // 卡片在列中的位置 (d=0.057, ↓)\n      () => {\n          if (currentCandidate._feature2 === undefined) {\n          currentCandidate._feature2 = currentTargetIdx % (context.number + 1);\n          }\n          return -currentCandidate._feature2;\n      },\n      // 【新规则第3优先级】matchNextCard得分\n      () => {\n        if (ruleBasedScore) {\n          return ruleBasedScore.matchNextCard;\n        }\n        return 0;\n      },\n      // 【新规则第4优先级】候选卡所在列前后相邻的空位数\n      () => {\n        if (ruleBasedScore) {\n          return ruleBasedScore.adjacentEmptyCount;\n        }\n        return 0;\n      },\n      // 【新规则第5优先级】候选卡所在列空位总数\n      () => {\n        if (ruleBasedScore) {\n          return ruleBasedScore.columnEmptyCount;\n        }\n        return 0;\n      },\n      // 【原算法优先级】保留作为后续tiebreaker\n      () => {\n        return candidatePriority;\n      },\n      // 【原算法深度】\n      () => {\n        if (!currentCandidate._deep) {\n          currentCandidate._deep = t.deep;\n        }\n        return currentCandidate._deep;\n      },\n      // 获胜概率 (分治评估，正常比较)\n      () => {\n        if (currentCandidate._winProbability === undefined) {\n          // 使用分治算法评估移动后的获胜可达性\n          const simulatedCards = [...context.cards1];\n          const slotId = simulatedCards[t.index];\n          simulatedCards[currentTargetIdx] = slotId;\n          simulatedCards[t.index] = targetCard;\n          currentCandidate._winProbability = context.estimateWinProbability(simulatedCards);\n        }\n        return currentCandidate._winProbability;\n      },\n      // 距离 (取反，因为原逻辑是小于比较)\n      () => {\n        if (!currentCandidate._diff) {\n          currentCandidate._diff = Math.abs(\n            (targetCard >> 2) - (context.number - 1) + ((t.index % (context.number + 1)))\n          );\n        }\n        return -currentCandidate._diff; // 取反，使小于比较变为大于比较\n      },\n        // 1. 卡片等级 (d=0.064, ↑)\n        () => {\n            if (currentCandidate._feature0 === undefined) {\n            currentCandidate._feature0 = targetCard >> 2;\n            }\n            return currentCandidate._feature0;\n        },\n        // 2. 卡片花色 (d=0.052, ↑)\n        () => {\n            if (currentCandidate._feature1 === undefined) {\n            currentCandidate._feature1 = targetCard % 4;\n            }\n            return currentCandidate._feature1;\n        },\n        // 4. 空位在列中的位置 (d=0.213, ↓)\n        () => {\n            if (currentCandidate._feature3 === undefined) {\n            currentCandidate._feature3 = t.index % (context.number + 1);\n            }\n            return -currentCandidate._feature3;\n        },\n        // 5. 空位前牌等级 (d=0.064, ↑)\n        () => {\n            if (currentCandidate._feature4 === undefined) {\n            currentCandidate._feature4 = t.card >> 2;\n            }\n            return currentCandidate._feature4;\n        },\n        // 6. 卡片所在列的空位数 (d=0.003, ↑)\n        () => {\n            if (currentCandidate._feature5 === undefined) {\n            currentCandidate._feature5 = context.countEmptyInColumn(context.cards1, Math.floor(currentTargetIdx / (context.number + 1)));\n            }\n            return currentCandidate._feature5;\n        },\n        // 7. 卡片上方的空位数 (d=0.160, ↑)\n        () => {\n            if (currentCandidate._feature6 === undefined) {\n            currentCandidate._feature6 = context.countEmptyAbove(context.cards1, currentTargetIdx);\n            }\n            return currentCandidate._feature6;\n        },\n        // 8. 卡片下方的空位数 (d=0.098, ↓)\n        () => {\n            if (currentCandidate._feature7 === undefined) {\n            currentCandidate._feature7 = context.countEmptyBelow(context.cards1, currentTargetIdx);\n            }\n            return -currentCandidate._feature7;\n        },\n        // 9. 空位所在列的空位数 (d=0.138, ↓)\n        () => {\n            if (currentCandidate._feature8 === undefined) {\n            currentCandidate._feature8 = context.countEmptyInColumn(context.cards1, Math.floor(t.index / (context.number + 1)));\n            }\n            return -currentCandidate._feature8;\n        },\n        // 10. 空位上方的空位数 (d=0.043, ↑)\n        () => {\n            if (currentCandidate._feature9 === undefined) {\n            currentCandidate._feature9 = context.countEmptyAbove(context.cards1, t.index);\n            }\n            return currentCandidate._feature9;\n        },\n        // 11. 总空位数 (d=0.000, ↓)\n        () => {\n            if (currentCandidate._feature10 === undefined) {\n            currentCandidate._feature10 = context.cards1.filter(c => c < 0).length;\n            }\n            return -currentCandidate._feature10;\n        },\n        // 12. 卡片上方的牌数 (d=0.011, ↑)\n        () => {\n            if (currentCandidate._feature11 === undefined) {\n            currentCandidate._feature11 = context.countCardsAbove(context.cards1, currentTargetIdx);\n            }\n            return currentCandidate._feature11;\n        },\n        // 13. 空位下方已就位的牌数 (d=0.138, ↑)\n        () => {\n            if (currentCandidate._feature12 === undefined) {\n            currentCandidate._feature12 = context.countCorrectBelow(context.cards1, t.index);\n            }\n            return currentCandidate._feature12;\n        },\n        // 14. 同rank的其他候选数 (d=0.021, ↑)\n        () => {\n            if (currentCandidate._feature13 === undefined) {\n            currentCandidate._feature13 = context.countSameRankCandidates(context.cards1, t);\n            }\n            return currentCandidate._feature13;\n        },\n        // 15. 移动后可移动数 (d=0.215, ↑)\n        () => {\n            if (currentCandidate._feature14 === undefined) {\n            const simulatedCards = [...context.cards1];\n            const slotId = simulatedCards[t.index];\n            simulatedCards[currentTargetIdx] = slotId;\n            simulatedCards[t.index] = targetCard;\n            currentCandidate._feature14 = context.countPossibleMoves(simulatedCards);\n            }\n            return currentCandidate._feature14;\n        },\n        // 16. 空位分布熵 (d=0.096, ↓)\n        () => {\n            if (currentCandidate._feature15 === undefined) {\n            const simulatedCards = [...context.cards1];\n            const slotId = simulatedCards[t.index];\n            simulatedCards[currentTargetIdx] = slotId;\n            simulatedCards[t.index] = targetCard;\n            currentCandidate._feature15 = context.calculateEmptyEntropy(simulatedCards);\n            }\n            return -currentCandidate._feature15;\n        },\n        // 17. 移动后已就位牌数 (d=0.189, ↑)\n        () => {\n            if (currentCandidate._feature16 === undefined) {\n            const simulatedCards = [...context.cards1];\n            const slotId = simulatedCards[t.index];\n            simulatedCards[currentTargetIdx] = slotId;\n            simulatedCards[t.index] = targetCard;\n            currentCandidate._feature16 = context.countRestoredCards(simulatedCards);\n            }\n            return currentCandidate._feature16;\n        },\n        // 18. 曼哈顿距离 (d=0.074, ↑)\n        () => {\n            if (currentCandidate._feature17 === undefined) {\n            currentCandidate._feature17 = Math.abs((currentTargetIdx % (context.number + 1)) - (context.number - 1 - (targetCard >> 2))) + Math.abs(Math.floor(currentTargetIdx / (context.number + 1)) - ((targetCard % 4) % context.matchMode));\n            }\n            return currentCandidate._feature17;\n        },\n        // 19. 是否跨列 (d=0.034, ↑)\n        () => {\n            if (currentCandidate._feature18 === undefined) {\n            currentCandidate._feature18 = (Math.floor(currentTargetIdx / (context.number + 1)) !== Math.floor(t.index / (context.number + 1))) ? 1 : 0;\n            }\n            return currentCandidate._feature18;\n        },\n        // 20. slot_score版本2 (d=0.084, ↑)\n        () => {\n            if (currentCandidate._feature19 === undefined) {\n            currentCandidate._feature19 = (t.card >> 2) * 10 - (t.index % (context.number + 1));\n            }\n            return currentCandidate._feature19;\n        },\n        // 21. slot_score版本3 (d=0.310, ↓)\n        () => {\n            if (currentCandidate._feature20 === undefined) {\n            currentCandidate._feature20 = (t.card >> 2) * context.countEmptyBelow(context.cards1, t.index);\n            }\n            return -currentCandidate._feature20;\n        },\n    ],\n  };\n  return currentCandidate;\n}\n\n/**\n * 比较两个候选的优先级函数 - 使用循环和统一的大于比较\n * 优先级：priority > deep > lookahead > winProbability(分治) > diff > rank > prevRank > slotPosition > restoredCount(DP) > cardPosition\n * @param {Object} candidateA - 候选A\n * @param {Object} candidateB - 候选B\n * @returns {boolean} 是否候选A更好\n */\nexport function isBetterCandidate(candidateA, candidateB) {\n  // 使用_getters数组进行循环比较，所有特征都统一为大于比较\n  for (let i = 0; i < candidateA._getters.length; i++) {\n    const valueA = candidateA._getters[i]();\n    const valueB = candidateB._getters[i]();\n    \n    if (valueA > valueB) {\n      return true; // A比B好\n    } else if (valueA < valueB) {\n      return false; // B比A好\n    }\n    // 相等时继续比较下一个特征\n  }\n  \n  // 所有特征都相等，返回false（A不优于B）\n  return false;\n}\n\n/**\n * 游戏状态评估工具方法集合\n */\nexport const gameEvaluationMethods = {\n/**\n * 基于规则的候选卡片优先级计算\n * @param {Object} context - 游戏上下文\n * @param {number} slotId - 空位ID（-1到-4）\n * @param {Object} slotInfo - 空位信息 {index, card}\n * @param {number} candidateCard - 候选卡片\n * @param {number} candidateIdx - 候选卡片索引\n * @returns {Object} 优先级评分对象\n */\ncalculateRuleBasedPriority(context, slotId, slotInfo, candidateCard, candidateIdx) {\n  const { cards1, number, matchMode } = context;\n  const slotIndex = slotInfo.index;\n  const slotPrevCard = slotInfo.card;\n  \n  // 计算列号和行号\n  const colSize = number + 1;\n  // const slotCol = Math.floor(slotIndex / colSize);\n  const slotRow = slotIndex % colSize;\n  const candidateCol = Math.floor(candidateIdx / colSize);\n  const candidateRow = candidateIdx % colSize;\n  \n  const slotPrevRank = slotPrevCard >> 2;\n  const candidateRank = candidateCard >> 2;\n  const candidateSuit = candidateCard % 4;\n  const candidateGroup = candidateSuit % matchMode;\n  \n  // 1. 空位优先级：空位位置号-1的卡的rank（越小越优先）\n  const slotPriority = -slotPrevRank; // 取负数使rank小的优先\n  \n  // 2. 候选卡优先级评分\n  let candidateScore = {\n    slotPriority: slotPriority,\n    excludeReason: null,\n    matchNextCard: 0,\n    adjacentEmptyCount: 0,\n    columnEmptyCount: 0,\n  };\n  \n  // 2.1 排除规则1：候选卡的rank等于同匹配组位置号-1的卡的rank-1\n  // 找到候选卡所在列的位置号-1的卡\n  if (candidateRow > 0) {\n    const prevPosInCandidateCol = candidateIdx - 1;\n    const prevCardInCandidateCol = cards1[prevPosInCandidateCol];\n    if (prevCardInCandidateCol >= 0) {\n      const prevRankInCandidateCol = prevCardInCandidateCol >> 2;\n      const prevSuitInCandidateCol = prevCardInCandidateCol % 4;\n      const prevGroupInCandidateCol = prevSuitInCandidateCol % matchMode;\n      \n      // 如果是同匹配组，且候选卡rank = 该卡rank - 1，则排除\n      if (candidateGroup === prevGroupInCandidateCol && candidateRank === prevRankInCandidateCol - 1) {\n        candidateScore.excludeReason = 'rule1_same_group_rank_minus_1';\n        // return candidateScore;\n      }\n    }\n  }\n  \n  // 2.2 排除规则2：对应空位号的行号>候选卡的行号\n  if (slotRow < candidateRow) {\n    candidateScore.excludeReason = 'rule2_slot_row_greater';\n    // return candidateScore;\n  }\n  \n  // 2.3 优先选择规则：候选卡的rank等于同匹配组位置号+1的卡的rank+1\n  let matchNextCardScore = 0;\n  if (candidateRow < number) {\n    const nextPosInCandidateCol = candidateIdx + 1;\n    const nextCardInCandidateCol = cards1[nextPosInCandidateCol];\n    if (nextCardInCandidateCol >= 0) {\n      const nextRankInCandidateCol = nextCardInCandidateCol >> 2;\n      const nextSuitInCandidateCol = nextCardInCandidateCol % 4;\n      const nextGroupInCandidateCol = nextSuitInCandidateCol % matchMode;\n      \n      // 检查是否满足：同匹配组且候选卡rank = 该卡rank + 1\n      if (candidateGroup === nextGroupInCandidateCol && candidateRank === nextRankInCandidateCol + 1) {\n        // 基础分：10000（回到原来的值）\n        matchNextCardScore = 10000;\n        // 行号越小越好（靠近列顶部）\n        matchNextCardScore -= candidateRow * 100;\n        // 前一张卡的rank越小越好\n        if (candidateRow > 0) {\n          const prevPosInCandidateCol = candidateIdx - 1;\n          const prevCardInCandidateCol = cards1[prevPosInCandidateCol];\n          const prevRankInCandidateCol = prevCardInCandidateCol >> 2;\n          matchNextCardScore -= prevRankInCandidateCol;\n        }\n      }\n    }\n  }\n  candidateScore.matchNextCard = matchNextCardScore;\n  \n  // 2.4 候选卡所在列前后相邻的空位数（越多越好）\n  let adjacentEmptyCount = 0;\n  if (candidateRow > 0 && cards1[candidateIdx - 1] < 0) {\n    adjacentEmptyCount++;\n  }\n  if (candidateRow < number && cards1[candidateIdx + 1] < 0) {\n    adjacentEmptyCount++;\n  }\n  candidateScore.adjacentEmptyCount = adjacentEmptyCount;\n  \n  // 2.5 候选卡所在列空位总数（越多越好）\n  let columnEmptyCount = 0;\n  const colStart = candidateCol * colSize;\n  for (let i = colStart; i < colStart + colSize; i++) {\n    if (cards1[i] < 0) columnEmptyCount++;\n  }\n  candidateScore.columnEmptyCount = columnEmptyCount;\n  \n  return candidateScore;\n},\n\n/**\n * 比较两个候选卡片的优先级（基于新规则）\n * @param {Object} scoreA - 候选A的评分\n * @param {Object} scoreB - 候选B的评分\n * @returns {number} >0表示A更优，<0表示B更优，0表示相等\n */\ncompareRuleBasedPriority(scoreA, scoreB) {\n  // 1. 先比较空位优先级（rank越小越优先）\n  if (scoreA.slotPriority !== scoreB.slotPriority) {\n    return scoreA.slotPriority - scoreB.slotPriority;\n  }\n  \n  // 2. 排除的候选排在后面\n  if (scoreA.excludeReason && !scoreB.excludeReason) return 1;\n  if (!scoreA.excludeReason && scoreB.excludeReason) return -1;\n  if (scoreA.excludeReason && scoreB.excludeReason) return 0;\n  \n  // 3. 比较matchNextCard（越高越好）\n  if (scoreA.matchNextCard !== scoreB.matchNextCard) {\n    return scoreB.matchNextCard - scoreA.matchNextCard;\n  }\n  \n  // 4. 比较相邻空位数（越多越好）\n  if (scoreA.adjacentEmptyCount !== scoreB.adjacentEmptyCount) {\n    return scoreB.adjacentEmptyCount - scoreA.adjacentEmptyCount;\n  }\n  \n  // 5. 比较列空位总数（越多越好）\n  if (scoreA.columnEmptyCount !== scoreB.columnEmptyCount) {\n    return scoreB.columnEmptyCount - scoreA.columnEmptyCount;\n  }\n  \n  return 0;\n},\n\n\n    // === 辅助函数：特征计算 ===\n\n    // 计算列中的空位数\n    countEmptyInColumn(cards, colIdx) {\n        const colStart = colIdx * (this.number + 1);\n        const colEnd = colStart + this.number + 1;\n        let count = 0;\n        for (let i = colStart; i < colEnd; i++) {\n        if (cards[i] < 0) count++;\n        }\n        return count;\n    },\n\n    // 计算位置上方的空位数\n    countEmptyAbove(cards, pos) {\n        const col = Math.floor(pos / (this.number + 1));\n        const colEnd = (col + 1) * (this.number + 1);\n        let count = 0;\n        for (let i = pos + 1; i < colEnd; i++) {\n        if (cards[i] < 0) count++;\n        }\n        return count;\n    },\n\n    // 计算位置下方的空位数\n    countEmptyBelow(cards, pos) {\n        const col = Math.floor(pos / (this.number + 1));\n        const colStart = col * (this.number + 1);\n        let count = 0;\n        for (let i = colStart; i < pos; i++) {\n        if (cards[i] < 0) count++;\n        }\n        return count;\n    },\n\n    // 计算位置上方的牌数\n    countCardsAbove(cards, pos) {\n        const col = Math.floor(pos / (this.number + 1));\n        const colEnd = (col + 1) * (this.number + 1);\n        let count = 0;\n        for (let i = pos + 1; i < colEnd; i++) {\n        if (cards[i] >= 0) count++;\n        }\n        return count;\n    },\n\n    // 计算空位下方已就位的牌数\n    countCorrectBelow(cards, slotIdx) {\n        const col = Math.floor(slotIdx / (this.number + 1));\n        const colStart = col * (this.number + 1);\n        let count = 0;\n        \n        for (let i = colStart; i < slotIdx; i++) {\n        const c = cards[i];\n        if (c < 0) break;\n        \n        const cRank = c >> 2;\n        const cSuit = c % 4;\n        const expectedRank = this.number - 1 - (i % (this.number + 1));\n        \n        if ((cSuit % this.matchMode) === (col % this.matchMode) && cRank === expectedRank) {\n            count++;\n        } else {\n            break;\n        }\n        }\n        \n        return count;\n    },\n\n    // 计算同rank的其他候选数\n    countSameRankCandidates(cards, slot) {\n        let count = 0;\n        const prevCard = slot.card;\n        const prevRank = prevCard >> 2;\n        const targetRank = prevRank - 1;\n        \n        if (targetRank < 0) return 0;\n        \n        const cardGroup = prevCard % this.matchMode;\n        for (let suit = cardGroup; suit < 4; suit += this.matchMode) {\n        const card = targetRank * 4 + suit;\n        const idx = cards.indexOf(card);\n        if (idx >= 0 && idx + 1 < cards.length && cards[idx + 1] < 0) {\n            count++;\n        }\n        }\n        \n        return count;\n    },\n\n    // 计算空位分布熵\n    calculateEmptyEntropy(cards) {\n        const emptyPerCol = [0, 0, 0, 0];\n        let totalEmpty = 0;\n        \n        for (let i = 0; i < cards.length; i++) {\n        if (cards[i] < 0) {\n            totalEmpty++;\n            const col = Math.floor(i / (this.number + 1));\n            emptyPerCol[col]++;\n        }\n        }\n        \n        if (totalEmpty === 0) return 0;\n        \n        let entropy = 0;\n        for (let count of emptyPerCol) {\n        if (count > 0) {\n            const p = count / totalEmpty;\n            entropy -= p * Math.log2(p);\n        }\n        }\n        \n        return entropy;\n    },\n  /**\n   * 前瞻1步：计算给定状态下有多少个可能的移动\n   * @param {Array} cards1Array - 卡片数组\n   * @returns {number} 可能的移动数量\n   */\n    countPossibleMoves(cards1Array) {\n      let count = 0;\n      \n      // 遍历所有空位\n      for (let i = 0; i < cards1Array.length; i++) {\n        if (cards1Array[i] >= 0) continue;  // 不是空位\n        \n        const prevCard = i > 0 ? cards1Array[i - 1] : null;\n        if (prevCard === null || prevCard < 0) continue;  // 空位前没有有效卡片\n        \n        const prevRank = prevCard >> 2;\n        const targetRank = prevRank - 1;\n        if (targetRank < 0) continue;  // 前面是A，无法移动\n        \n        // 查找所有匹配的候选牌\n        const card_group = prevCard % this.matchMode;\n        for (let suit = card_group; suit < 4; suit += this.matchMode) {\n          const targetCard = targetRank * 4 + suit;\n          const cardIdx = cards1Array.indexOf(targetCard);\n          \n          // 检查候选牌是否存在\n          if (cardIdx >= 0) {\n            count++;\n          }\n        }\n      }\n      \n      return count;\n    },\n    \n  /**\n   * 动态规划：计算已还原到正确位置的卡片数量（从高rank开始）\n   * @param {Array} cards1Array - 卡片数组\n   * @returns {number} 已还原的卡片数量\n   */\n    countRestoredCards(cards1Array) {\n      let restoredCount = 0;\n      const colSize = this.number + 1;  // 每列的大小\n      \n      // 从最高rank开始检查（K往下到A=0）\n      for (let rank = this.number - 1; rank >= 0; rank--) {\n        // 检查每种花色\n        for (let suit = 0; suit < 4; suit++) {\n          const card = rank * 4 + suit;\n          const cardIdx = cards1Array.indexOf(card);\n          \n          if (cardIdx < 0) continue;  // 卡片不存在\n          \n          // 计算该卡片的目标列（基于matchMode）\n          const targetGroup = suit % this.matchMode;\n          \n          // 计算该卡片在目标列中应该的位置\n          // 目标列从底部开始：colStart + (number - rank)\n          const colStart = targetGroup * colSize;\n          const expectedPosition = colStart + (this.number - 1 - rank);\n          \n          // 检查卡片是否在正确位置\n          if (cardIdx === expectedPosition) {\n            // 还需要检查该位置下方的所有卡片是否都正确\n            let allBelowCorrect = true;\n            \n            // 检查该位置下方的每个位置\n            for (let checkRank = rank + 1; checkRank < this.number; checkRank++) {\n              const checkPos = colStart + (this.number - 1 - checkRank);\n              const cardAtPos = cards1Array[checkPos];\n              \n              if (cardAtPos < 0) {\n                // 下方有空位，不正确\n                allBelowCorrect = false;\n                break;\n              }\n              \n              const cardAtPosRank = cardAtPos >> 2;\n              const cardAtPosSuit = cardAtPos % 4;\n              const cardAtPosGroup = cardAtPosSuit % this.matchMode;\n              \n              // 检查下方卡片是否属于同一列且rank正确\n              if (cardAtPosGroup !== targetGroup || cardAtPosRank !== checkRank) {\n                allBelowCorrect = false;\n                break;\n              }\n            }\n            \n            if (allBelowCorrect) {\n              restoredCount++;\n            }\n          }\n        }\n      }\n      \n      return restoredCount;\n    },\n    \n  /**\n   * 分治算法：评估获胜状态可达性（0-100分，分数越高越可能获胜）\n   * @param {Array} cards1Array - 卡片数组\n   * @returns {number} 获胜概率分数（0-100）\n   */\n    estimateWinProbability(cards1Array) {\n      const colSize = this.number + 1;\n      const totalCols = 4;\n      let totalScore = 0;\n      let maxScore = 0;\n      \n      // 分治：评估每一行的完成度\n      for (let row = 0; row < colSize; row++) {\n        const rowScore = this.evaluateRowScore(cards1Array, row, colSize, totalCols);\n        totalScore += rowScore.score;\n        maxScore += rowScore.maxScore;\n      }\n      \n      // 计算全局阻塞惩罚\n      const blockPenalty = this.calculateBlockPenalty(cards1Array);\n      \n      // 归一化到0-100\n      const baseScore = maxScore > 0 ? (totalScore / maxScore) * 80 : 0;\n      const finalScore = Math.max(0, baseScore - blockPenalty);\n      \n      return finalScore;\n  },\n\n\n    \n    // 评估单行的完成度（分治子问题）\n    evaluateRowScore(cards1Array, row, colSize, totalCols) {\n      let score = 0;\n      let maxScore = 0;\n      \n      // 对于每一行，检查每一列中的对应位置\n      for (let col = 0; col < totalCols; col++) {\n        const pos = col * colSize + row;\n        const cardAtPos = cards1Array[pos];\n        \n        maxScore += 10;  // 每个位置满分10分\n        \n        if (cardAtPos < 0) {\n          // 空位：检查该rank的所有候选卡片位置\n          const emptySlotsAbove = this.countEmptySlotsAbove(cards1Array, pos);\n          score += Math.max(0, 10 - emptySlotsAbove * 2);  // 上方空位越多，分数越低\n          continue;\n        }\n        \n        const cardRank = cardAtPos >> 2;\n        const cardSuit = cardAtPos % 4;\n        const cardGroup = cardSuit % this.matchMode;\n        \n        // 计算该行应该对应的rank\n        const expectedRank = this.number - 1 - row;\n        \n        // 计算该列应该对应的group\n        const expectedGroup = col % this.matchMode;\n        \n        // 检查卡片是否属于正确的组和rank\n        if (cardGroup === expectedGroup) {\n          // 正确的组\n          if (cardRank === expectedRank) {\n            // rank完全正确\n            score += 10;\n            \n            // 额外奖励：该组下方行都已正确放置\n            if (this.checkRowBelowCorrect(cards1Array, row, col, colSize)) {\n              score += 5;\n              maxScore += 5;\n            }\n          } else if (cardRank > expectedRank) {\n            // rank太高，轻微扣分（还能移走）\n            score += 5;\n          } else {\n            // rank太低，严重扣分（阻塞）\n            score += 2;\n          }\n        } else {\n          // 错误的组，适度扣分\n          score += 3;\n          \n          // 如果rank正确，给予部分分数\n          if (cardRank === expectedRank) {\n            score += 2;\n          }\n        }\n      }\n      \n      return { score, maxScore };\n    },\n    \n    // 计算某位置上方的空位数\n    countEmptySlotsAbove(cards1Array, pos) {\n      let count = 0;\n      const col = Math.floor(pos / (this.number + 1));\n        const colStart = col * (this.number + 1);\n      const colEnd = colStart + this.number + 1;\n      \n      for (let i = pos + 1; i < colEnd; i++) {\n        if (cards1Array[i] < 0) count++;\n              }\n      \n      return count;\n    },\n    \n    // 检查某位置下方的行是否都已正确放置\n    checkRowBelowCorrect(cards1Array, row, col, colSize) {\n      for (let checkRow = row + 1; checkRow < this.number; checkRow++) {\n        const checkPos = col * colSize + checkRow;\n        const cardAtPos = cards1Array[checkPos];\n        \n        if (cardAtPos < 0) return false;\n        \n        const cardRank = cardAtPos >> 2;\n        const expectedRank = this.number - 1 - checkRow;\n        \n        if (cardRank !== expectedRank) return false;\n      }\n      \n      return true;\n    },\n    \n    // 计算全局阻塞惩罚\n    calculateBlockPenalty(cards1Array) {\n      let penalty = 0;\n      const colSize = this.number + 1;\n      \n      // 检查每列的阻塞情况\n      for (let col = 0; col < 4; col++) {\n        const colStart = col * colSize;\n        \n        // 检查是否存在\"死锁\"：高rank卡片被低rank卡片压住\n        for (let i = colStart; i < colStart + colSize - 1; i++) {\n          const card = cards1Array[i];\n          if (card < 0) continue;\n          \n          const cardRank = card >> 2;\n          \n          // 检查上方的卡片\n          for (let j = i + 1; j < colStart + colSize; j++) {\n            const upperCard = cards1Array[j];\n            if (upperCard < 0) continue;\n            \n            const upperRank = upperCard >> 2;\n            \n            // 如果上方卡片rank更低，这是一个阻塞\n            if (upperRank < cardRank) {\n              penalty += 5;\n            }\n          }\n        }\n      }\n      \n      // 检查可移动性：如果没有任何可移动的牌，增加惩罚\n      const possibleMoves = this.countPossibleMoves(cards1Array);\n      if (possibleMoves === 0) {\n        penalty += 20;\n      } else if (possibleMoves === 1) {\n        penalty += 10;\n      }\n      \n      return penalty;\n    },\n};\n\n/**\n * 候选评估工具函数集合\n */\nexport const candidateUtils = {\n  createCandidate,\n  isBetterCandidate,\n  gameEvaluationMethods\n};","import { shuffleCards, checkDeadForeach } from \"../utils/help.js\";\nimport { GameComponentPresets } from \"../utils/gameComponentFactory.js\";\nimport { createCandidate, isBetterCandidate, gameEvaluationMethods } from \"./candidateUtils.js\";\nimport { getCardPlaceholderText } from \"../utils/cardUtils.js\";\n\n/**\n * Sort对象定义了排序游戏的基础组件，将传递给GameComponentPresets.puzzleGame工厂函数\n * 工厂函数会为该组件添加游戏管理、按钮控制、自动操作等功能\n */\nconst Sort = {\n  name: \"Sort\",\n  data() {\n    return {\n      title: \"Sort\",\n      cards1: [],\n      number: 4,\n      n: 0,\n      sign_index: -1,\n      matchMode: 1,  // 1=简单(数值), 2=中等(颜色), 4=困难(花色)\n      candidateIntervals: {}, // 存储每个空位的候选卡牌循环定时器\n      currentCandidates: {}, // 存储每个空位当前显示的候选卡牌索引\n      \n      // 以下属性由工厂函数GameComponentPresets.puzzleGame添加：\n      // gameManager: 游戏管理器实例，提供游戏状态控制和自动操作功能\n      // customButtons: 自定义按钮数组，用于存储游戏控制按钮配置\n    };\n  },\n  methods: {\n    init() {\n      this.sign_index = -1;\n      this.cards1.splice(0);\n      let cards = this.cards1;\n      for (let i = 0; i < this.number * 4; i++) {\n        cards.push(i);\n      }\n      shuffleCards(cards, this.number * 4);\n      for (let i = 0; i < 4; i++) {\n        cards.splice(cards.indexOf(this.number * 4 - 1 - i), 1, -1 - i);\n      }\n      for (let i = 0; i < 4; i++) {\n        cards.splice(i * (this.number + 1), 0, this.number * 4 - 4 + i);\n      }\n      this.autoCalc();\n      \n      // 初始化候选卡牌循环\n      this.$nextTick(() => {\n        this.updateAllCandidateCycling();\n      });\n    },\n\n    // 组件销毁时清理定时器\n    beforeDestroy() {\n      Object.keys(this.candidateIntervals).forEach(slotIndex => {\n        this.stopCandidateCycling(parseInt(slotIndex));\n      });\n    },\n\n    // 更新所有空位的候选卡牌循环\n    updateAllCandidateCycling() {\n      // 停止所有现有的循环\n      Object.keys(this.candidateIntervals).forEach(slotIndex => {\n        this.stopCandidateCycling(parseInt(slotIndex));\n      });\n      \n      // 为所有有空位的位置启动新的循环\n      for (let i = 0; i < this.cards1.length; i++) {\n        if (this.cards1[i] < 0 && i > 0 && this.cards1[i - 1] >= 4) {\n          this.startCandidateCycling(i);\n        }\n      }\n    },\n\n    // 获取指定空位的候选卡牌数组\n    getCandidateCardsForSlot(slotIndex) {\n      const prevCard = this.cards1[slotIndex - 1];\n      if (prevCard < 4) return []; // 如果前一个卡片不是有效卡片，返回空数组\n      \n      const candidates = this.findAllCardsByRankOffset(prevCard, -1);\n      return candidates.map(c => c.card);\n    },\n\n    // 开始候选卡牌循环显示\n    startCandidateCycling(slotIndex) {\n      this.stopCandidateCycling(slotIndex); // 先停止现有的循环\n      \n      const candidates = this.getCandidateCardsForSlot(slotIndex);\n      if (candidates.length === 0) return;\n      \n      this.currentCandidates[slotIndex] = 0; // 从第一个候选开始\n      \n      // 设置定时器循环显示候选卡牌\n      this.candidateIntervals[slotIndex] = setInterval(() => {\n        if (candidates.length > 0) {\n          this.currentCandidates[slotIndex] = (this.currentCandidates[slotIndex] + 1) % candidates.length;\n        }\n      }, this.gameManager.autoStepDelay);\n    },\n\n    // 停止候选卡牌循环显示\n    stopCandidateCycling(slotIndex) {\n      if (this.candidateIntervals[slotIndex]) {\n        clearInterval(this.candidateIntervals[slotIndex]);\n        delete this.candidateIntervals[slotIndex];\n        delete this.currentCandidates[slotIndex];\n      }\n    },\n\n    // 获取当前显示的候选卡牌\n    getCurrentCandidateCard(slotIndex) {\n      const candidates = this.getCandidateCardsForSlot(slotIndex);\n      if (candidates.length === 0) return '';\n      \n      const currentIndex = this.currentCandidates[slotIndex] || 0;\n      return this.getCardPlaceholderText(candidates[currentIndex]);\n    },\n    \n    // 计算 cards1 的哈希值\n    calculateStateHash() {\n      return this.cards1.join(',');\n    },\n    \n    // 检查当前状态哈希是否已存在\n    isStateHashRepeated(hash) {\n      return this.gameManager.history.find((record) => record.stateHash == hash);\n    },\n    // 记录移动操作\n    recordMove(from, to, card, sign) {\n      // 计算并记录当前状态的哈希\n      const stateHash = this.calculateStateHash();\n      \n      this.gameManager.recordOperation({\n        type: \"move\",\n        from: from,\n        to: to,\n        card: card,\n        sign: sign,\n        timestamp: Date.now(),\n        stateHash: stateHash,\n      });\n    },\n\n    // 处理撤销操作\n    handleUndo(operation) {\n      // 根据操作类型执行相应的撤销逻辑\n      switch (operation.type) {\n        case \"move\":\n          // 撤销移动操作\n          this.cards1.splice(operation.to, 1, operation.sign);\n          this.cards1.splice(operation.from, 1, operation.card);\n          break;\n      }\n    },\n\n    // 提取的移动执行函数（供 clickCard 和 stepFn 复用）\n    executeMove(cardToMove, targetEmptyIndex) {\n      const cardToMoveIndex = this.cards1.indexOf(cardToMove);\n      const emptySlot = this.cards1[targetEmptyIndex];\n      \n      if (this.findNextCard(cardToMove, (idx) => idx == targetEmptyIndex - 1) < 0) {\n        return console.warn(\"❌ 无效的移动\");\n      }\n\n      this.cards1.splice(cardToMoveIndex, 1, emptySlot);\n      this.cards1.splice(targetEmptyIndex, 1, cardToMove);\n      this.recordMove(cardToMoveIndex, targetEmptyIndex, cardToMove, emptySlot);\n      \n      // autoCalc 已经在工厂函数里监听 historyUpdate 事件自动执行，无需手动调用\n    },\n    \n    // 重写clickCard方法，使用GameStateManager记录操作\n    clickCard(card) {\n      // 查找同颜色的下一张牌，要求其后必须有空位\n      let index = this.findNextCard(card, (idx) => this.sign_index >= 0 ? idx == this.sign_index - 1 : this.cards1[idx + 1] < 0);\n      \n      if (index >= 0) {\n        let targetEmptyIndex = index + 1;\n        this.executeMove(card, targetEmptyIndex);\n      } else {\n        console.error(`❌ clickCard: 移动失败 card=${card}, 找不到有效目标位置。Seed:${this.seed}`);\n      }\n      this.sign_index = -1;\n    },\n\n    updateN() {\n      this.n = 0;\n      for (let i = 0; i < this.number * 4 + 4; i++) {\n        if (\n          this.cards1[i] >> 2 ==\n          this.number - 1 - (i % (this.number + 1))\n        ) {\n          this.n++;\n        }\n      }\n    },\n\n    // 重写stepFn方法，使用clickSign/clickCard保持行为一致\n    async stepFn() {\n      // 验证 this.next 是否有效\n      if (!this.next || this.next[0] < 0) {\n        console.error('❌ stepFn: this.next 无效', this.next);\n        \n        // 保存故障状态\n        const errorState = {\n          cards1: [...this.cards1],\n          next: this.next,\n          sign_index: this.sign_index,\n          n: this.n,\n        };\n        console.error('💾 故障状态已保存:', JSON.stringify(errorState));\n        \n        // 检查游戏状态：计算已完成的牌数\n        this.updateN();\n        \n        // 如果所有牌都已完成，标记为胜利；否则标记为失败\n        if (this.n >= (this.number + 1) * 4) {\n          this.gameManager.setWin();\n        }\n        \n        this.gameManager.stopAuto();\n        return;\n      }\n      \n      // 根据用户建议：直接使用 this.executeMove(this.next[0], this.next[1])\n      // this.next[0] = 要移动的卡片\n      // this.next[1] = 目标空位位置\n      \n      await this.gameManager.step(async () => {\n        this.clickSign(this.next[1])\n        await this.wait();\n        this.executeMove(this.next[0], this.next[1]);\n      });\n    },\n    clickSign(i) {\n      let card = this.cards1[i - 1];\n      if (card < 4) {\n        return;\n      }\n      // 查找同颜色的前一张牌\n      let index = this.findPrevCard(card);\n      \n      // 滚动到目标卡片位置\n      if (index >= 0 && typeof window !== 'undefined' && window.document) {\n        const scrollTop = (index % (this.number + 1)) * 150;\n        \n        // 优先滚动 GameLayout 的 wrapper\n        const wrapper = document.querySelector('.game-content-wrapper');\n        if (wrapper) {\n          wrapper.scrollTop = scrollTop;\n        } else {\n          // 降级到传统的 document 滚动\n          document.documentElement.scrollTop = scrollTop;\n          document.body.scrollTop = scrollTop;\n        }\n      }\n      this.sign_index = i;;\n    },\n    \n    // 评估候选牌的优先级得分\n    evaluateCandidateScore(candidate) {\n      if (!candidate || candidate.idx < 0) return -999999;\n      \n      let score = 0;\n      let idx = candidate.idx;\n      \n      // 因素1: 后面是否有空位（决定性因素）\n      if (this.cards1[idx + 1] < 0) {\n        score += 100000;\n      }\n      \n      // 因素2: 位置靠前（列顶）的优先级更高\n      let row = idx % (this.number + 1);\n      score += (this.number - row) * 10;\n      \n      // 因素3: 更倾向于选择花色值小的（保持稳定性）\n      let suit = candidate.card % 4;\n      score += (4 - suit);\n      \n      return score;\n    },\n    // 从多个候选中选择最优的\n    selectBestCandidate(candidates) {\n      if (!candidates || candidates.length === 0) return -1;\n      if (candidates.length === 1) return candidates[0].idx;\n      \n      let bestScore = -999999;\n      let bestIdx = -1;\n      \n      for (let candidate of candidates) {\n        let score = this.evaluateCandidateScore(candidate);\n        \n        if (score > bestScore) {\n          bestScore = score;\n          bestIdx = candidate.idx;\n        }\n      }\n      \n      return bestIdx;\n    },\n    // 基础辅助函数：查找同颜色的相邻牌的索引\n    // offset: +1查找下一张，-1查找前一张\n    // condition: 可选的额外条件检查函数\n    // returnAll: 返回所有候选（用于多路径搜索）\n    findCardByRankOffset(card, offset, condition = null, returnAll = false) {\n      let target_rank = (card >> 2) + offset;\n      let card_group = card % this.matchMode;  // 按 matchMode 分组\n      let candidates = [];\n      \n      // 收集所有同组的候选牌\n      for (let suit = card_group; suit < 4; suit += this.matchMode) {\n        let target_card = target_rank * 4 + suit;\n        let idx = this.cards1.indexOf(target_card);\n        if (idx >= 0) {\n          // 如果提供了条件检查函数，必须满足条件\n          if (!condition || condition(idx)) {\n            candidates.push({ idx, card: target_card });\n          }\n        }\n      }\n      \n      if (returnAll) return candidates;\n      if (candidates.length === 0) return -1;\n      if (candidates.length === 1) return candidates[0].idx;\n      \n      // 有多个候选时，使用评分系统选择最优的\n      return this.selectBestCandidate(candidates);\n    },\n    // 获取所有同颜色的候选牌（用于多路径分析）\n    findAllCardsByRankOffset(card, offset, condition = null) {\n      return this.findCardByRankOffset(card, offset, condition, true);\n    },\n    // 便捷方法：查找同颜色的下一张牌（支持条件检查）\n    findNextCard(card, condition = null) {\n      return this.findCardByRankOffset(card, 1, condition);\n    },\n    // 便捷方法：查找同颜色的前一张牌\n    findPrevCard(card) {\n      return this.findCardByRankOffset(card, -1);\n    },\n    // 判断卡牌是否可移动（用于 shanshuo 闪烁提示）\n    canMoveCard(card) {\n      if (card < 0) return false;\n      // 查找同颜色的下一张牌，检查其后是否有空位\n      let nextIdx = this.findNextCard(card, (idx) => this.cards1[idx + 1] < 0);\n      return nextIdx >= 0;\n    },\n    \n    ...gameEvaluationMethods,\n    autoCalc() {\n      let over = true,\n        temp = {},\n        prior = [],\n        slotsToResetPriority = [];  // 记录需要清空 priority 的空位\n      for (let id = -4; id < 0; id++) {\n        let index = this.cards1.indexOf(id);\n        let card = this.cards1[index - 1];\n        \n        temp[id] = {\n          index,\n          card: card,\n          priority: 0,\n          _in: 0,\n          able: true,\n          bestCard: null,  // 记录深度搜索找到的最优候选牌\n        };\n      }\n      for (let id = -4; id < 0; id++) {\n        let index = temp[id].index;\n        let card = temp[id].card;\n        let dead = [];\n        let candidatePriorities = new Map();  // 存储候选牌与优先级的映射\n        let candidates = this.findAllCardsByRankOffset(card, -1);\n        for (let candidate of candidates) {\n          candidatePriorities.set(candidate.card, 0);\n        }\n        let prevFn = (prev_c, deep, accumulatedPriority = 0) => {\n          if (prev_c < 0) {\n            // 到达空位，累加 priority\n            prior.push([id, prev_c, deep]);\n            temp[prev_c].priority = Math.max(temp[prev_c].priority, ++accumulatedPriority);\n            temp[prev_c]._in++;\n            return accumulatedPriority;\n          } else {\n            if (prev_c >= 48) {\n              return 0;\n            }\n            if (!checkDeadForeach(dead, [prev_c, 0])) return 0;\n            dead.unshift([prev_c, 0]);\n            \n            // 获取所有同颜色的候选\n            let candidates = this.findAllCardsByRankOffset(prev_c, 1);\n            \n            if (candidates.length === 0) {\n              return 0;\n            }\n            \n            // 多候选深度优先搜索：递归评估每个候选的 priority\n            let maxPriority = 0;\n            \n            for (let candidate of candidates) {\n              let next_idx = candidate.idx;\n              let signCard = this.cards1[next_idx + 1];\n              \n              let subPriority = prevFn(signCard, deep, accumulatedPriority);\n              maxPriority = Math.max(maxPriority, subPriority);\n              \n              candidatePriorities.has(candidate.card) && candidatePriorities.set(candidate.card, Math.max(candidatePriorities.get(candidate.card), subPriority));\n            }\n            \n            return maxPriority;\n          }\n        };\n        let nextFn = (next_i, next_c, deep, accumulatedPriority = 0) => {\n          if (!checkDeadForeach(dead, [next_c, 1])) return 0;\n          dead.unshift([next_c, 1]);\n          if (deep > 0 && next_c >= 8) {\n            let prev_c = this.cards1[next_i + 1];\n            prevFn(prev_c, deep, accumulatedPriority);\n          }\n          next_c = this.cards1[next_i - 1];\n          if (next_c < 4) {\n            let n = next_i - 2;\n            let num = 1;\n            while (next_c < 0) {\n              next_c = this.cards1[n];\n              n--;\n              num++;\n            }\n            if (next_c >= num * 4) {\n              prior.push([id, this.cards1[next_i - 1], deep]);\n              let emptySlotId = this.cards1[next_i - 1];\n              temp[emptySlotId].priority = Math.max(temp[emptySlotId].priority, ++accumulatedPriority);\n              temp[emptySlotId]._in++;\n              \n              return accumulatedPriority;\n            }\n            next_c += 4;\n            // 检查是否形成同颜色递增序列\n            while (n % (this.number + 1) > 0) {\n              let card_at_n = this.cards1[n];\n              if (card_at_n >= 0 && \n                  (card_at_n >> 2) == (next_c >> 2) && \n                  (card_at_n % this.matchMode) == (next_c % this.matchMode)) {\n                n--;\n                next_c += 4;\n                deep++;\n              } else {\n                break;\n              }\n            }\n            if (n % (this.number + 1) == 0) {\n              return 0;\n            }\n            let prev_c = this.cards1[this.cards1.indexOf(next_c) + 1];\n            let priority = prevFn(prev_c, deep, accumulatedPriority);\n            \n            // 同步候选卡片的优先级\n            if (candidatePriorities.has(next_c)) {\n              candidatePriorities.set(next_c, Math.max(candidatePriorities.get(next_c), priority));\n            }\n            \n            return priority;\n          }\n          let prevCandidates = this.findAllCardsByRankOffset(next_c, -1);\n          let maxPriority = 0;\n          for (let prevCandidate of prevCandidates) {\n            let priority = nextFn(prevCandidate.idx, next_c, deep, accumulatedPriority);\n            maxPriority = Math.max(maxPriority, priority);\n            \n            // 同步候选卡片的优先级\n            if (candidatePriorities.has(prevCandidate.card)) {\n              candidatePriorities.set(prevCandidate.card, Math.max(candidatePriorities.get(prevCandidate.card), priority));\n            }\n          }\n          return maxPriority;\n        };\n        if (card >= 4) {\n          over = false;\n        }\n        nextFn(index, id, 0);\n        \n        // 深度搜索完成后，查找比 card 小一号的牌（规则：小的放到大的后面）\n        if (card >= 4) {\n          let candidates = this.findAllCardsByRankOffset(card, -1);\n          if (candidates.length > 0) {\n            // 存储所有候选及其优先级\n            let candidatesWithPriority = [];\n            \n            for (let candidate of candidates) {\n              // 模拟移动并检查哈希重复\n              let cardIdx = this.cards1.indexOf(card);\n              if (cardIdx < 0) continue;\n\n              // 创建临时状态来计算哈希\n              let tempCards = [...this.cards1];\n              tempCards[candidate.idx] = id;\n              tempCards[index] = candidate.card;\n              \n              let simulatedHash = tempCards.join(',');\n              \n              // 从深度搜索中获取该候选的优先级\n              let candidatePriority = candidatePriorities.get(candidate.card) || 0;\n              \n              // 计算基于新规则的优先级评分\n              const ruleBasedScore = this.calculateRuleBasedPriority(\n                this,\n                id,\n                { index: index, card: card },\n                candidate.card,\n                candidate.idx\n              );\n              \n              candidatesWithPriority.push({\n                card: candidate.card,\n                idx: candidate.idx,\n                priority: candidatePriority,\n                ruleBasedScore: ruleBasedScore,  // 新增：基于规则的评分\n                stateHash: simulatedHash  // 保存状态哈希用于后续过滤\n              });\n            }\n            \n            // 保存所有候选，留到最后统一比较\n            if (candidatesWithPriority.length > 0) {\n              temp[id].allCandidates = candidatesWithPriority;\n            } else if (candidates.length > 0) {\n              // 如果所有候选都被哈希过滤，记录这个空位以便后续清空 priority\n              slotsToResetPriority.push(id);\n            }\n          }\n        }\n      }\n      \n      // 四次深度搜索结束后，统一清空被哈希过滤的空位的 priority\n      for (let slotId of slotsToResetPriority) {\n        if (temp[slotId]) {\n          temp[slotId].priority = 0;\n        }\n      }\n      \n      if (over) {\n        this.updateN();\n        if (this.n >= (this.number + 1) * 4) {\n          this.gameManager.setWin();\n        } else {\n          this.gameManager.setLose();\n        }\n        return;\n      }\n      let signs = [-1, -2, -3, -4];\n      while (signs.length > 0) {\n        let ind;\n        for (ind = 0; ind < signs.length; ind++) {\n          if (temp[signs[ind]]._in <= 0) {\n            break;\n          }\n        }\n        if (ind < signs.length) {\n          let s = signs.splice(ind, 1)[0];\n          let j = 0;\n          while (j < prior.length) {\n            if (prior[j][0] == s) {\n              temp[prior[j][1]]._in--;\n              temp[prior[j][1]].deep = prior[j][2];\n              prior.splice(j, 1);\n              temp[s].able = false;\n            } else {\n              j++;\n            }\n          }\n        } else {\n          let road = [signs[0]];\n          while (prior.length > 0) {\n            let p = prior.findIndex((t) => t[1] == road[0]);\n            let index = road.indexOf(prior[p][0]);\n            if (index >= 0) {\n              temp[prior[p][1]]._in--;\n              prior.splice(p, 1);\n              for (let i = 0; i < index; i++) {\n                for (let j = 0; j < prior.length; j++) {\n                  if (prior[j][0] == road[i] && prior[j][1] == road[i + 1]) {\n                    temp[prior[j][1]]._in--;\n                    prior.splice(j, 1);\n                    break;\n                  }\n                }\n              }\n              break;\n            }\n            road.unshift(prior[p][0]);\n          }\n        }\n      }\n      this.next = [-1, -1];\n      let bestCandidate = null;\n      \n      // 遍历所有空位的所有候选，选择最优的\"空位+候选\"组合\n      for (let i = -4; i < 0; i++) {\n        let t = temp[i];\n        \n        // 跳过前面不是有效卡片的空位\n        if (t.card < 4) {\n          continue;\n        }\n        \n        // 获取该空位的所有候选\n        let allCandidates = t.allCandidates;\n        if (!allCandidates || allCandidates.length === 0) {\n          continue;\n        }\n        \n        // 验证：t.index 位置是否是空位\n        if (this.cards1[t.index] >= 0) {\n          continue;\n        }\n        \n        // 遍历该空位的所有候选\n        for (let candidateInfo of allCandidates) {\n          let targetCard = candidateInfo.card;\n          let candidatePriority = candidateInfo.priority;\n          let ruleBasedScore = candidateInfo.ruleBasedScore; // 获取基于规则的评分\n          \n          // 验证：targetCard 是否存在\n          let currentTargetIdx = this.cards1.indexOf(targetCard);\n          if (currentTargetIdx < 0) {\n            continue;\n          }\n          \n          // 检查状态哈希是否重复，如果重复则跳过\n          if (this.isStateHashRepeated(candidateInfo.stateHash)) {\n            allCandidates.splice(allCandidates.indexOf(candidateInfo), 1);\n            continue;\n          }\n\n          // 排除规则1：候选卡的rank等于同匹配组位置号-1的卡的rank-1\n          // 找到候选卡所在列的位置号-1的卡\n          const prevPosInCandidateCol = currentTargetIdx - 1;\n          const prevCardInCandidateCol = this.cards1[prevPosInCandidateCol];\n          if (prevCardInCandidateCol >= 0) {\n            const prevRankInCandidateCol = prevCardInCandidateCol >> 2;\n            const prevSuitInCandidateCol = prevCardInCandidateCol % 4;\n            const prevGroupInCandidateCol = prevSuitInCandidateCol % this.matchMode;\n            \n            // 如果是同匹配组，且候选卡rank = 该卡rank - 1，则排除\n            if (targetCard % this.matchMode === prevGroupInCandidateCol && (targetCard >> 2) === prevRankInCandidateCol - 1) {\n              continue;\n            }\n          }\n          \n          // 使用导入的工具函数创建候选对象，传入rule-based评分\n          const currentCandidate = createCandidate(targetCard, t.index, this, candidatePriority, t, currentTargetIdx, ruleBasedScore);\n          \n          // 判断是否替换最佳候选\n          if (!bestCandidate || isBetterCandidate(currentCandidate, bestCandidate)) {\n            bestCandidate = currentCandidate;\n            // 更新最佳移动\n            this.next = [currentCandidate.targetCard, currentCandidate.slotIndex];\n          }\n        }\n      }\n      \n      // isBetterCandidate函数已从candidateUtils.js导入，此处不再重复定义\n      \n      \n      // 如果没有找到有效移动，检查游戏状态\n      if (this.next[0] < 0) {\n        \n        // 检查四个空位的 priority 是否都为 0（只检查前面是有效卡片且有候选的空位）\n        let allPrioritiesZero = true;\n        let validSlotCount = 0;\n        for (let i = -4; i < 0; i++) {\n          if (temp[i] && temp[i].card >= 4) {\n            validSlotCount++;\n            // 只有既有 priority 又有候选的空位才算有效移动\n            const allCandidates = temp[i].allCandidates;\n            if (temp[i].priority > 0 && allCandidates && allCandidates.length > 0) {\n              allPrioritiesZero = false;\n            }\n          }\n        }\n        \n        // 计算已完成的牌数\n        this.updateN();\n        \n        // 如果所有牌都已完成，标记为胜利\n        if (this.n >= this.number * 4) {\n          this.gameManager.setWin();\n        } else if (allPrioritiesZero && validSlotCount > 0) {\n          // 仅当有有效空位且所有 priority 都为 0 时才设置失败\n          this.gameManager.setLose();\n        }\n      } else {\n        this.updateN();\n      }\n    },\n    \n    // 设置匹配难度\n    setMatchMode(mode) {\n      if ([1, 2, 4].includes(mode)) {\n        this.matchMode = mode;\n        this.init();  // 重新初始化游戏\n        console.log(`✅ 难度已设置为: ${mode === 1 ? '简单(数值)' : mode === 2 ? '中等(颜色)' : '困难(花色)'}`);\n      } else {\n        console.error('❌ 无效的难度模式，请使用 1, 2 或 4');\n      }\n    },\n    \n    // 获取当前难度的描述\n    getMatchModeDescription() {\n      const descriptions = {\n        1: '简单(数值匹配) - 任意点数相同即可连接',\n        2: '中等(颜色匹配) - 同颜色的牌可以连接',\n        4: '困难(花色匹配) - 必须同花色才能连接'\n      };\n      return descriptions[this.matchMode] || '未知难度';\n    },\n    \n    /**\n     * 渲染文本视图 - 显示当前游戏状态\n     * 用于终端交互式游戏\n     */\n    renderTextView() {\n      console.log('\\n╔════════════════════════════════════════════════╗');\n      console.log('║                排序游戏 (Sort)                ║');\n      console.log('╚════════════════════════════════════════════════╝');\n      console.log(`\\n难度: ${this.getMatchModeDescription()}`);\n      console.log(`完成度: ${this.n} / ${(this.number + 1) * 4} 张\\n`);\n      console.log('\\n图例: [-n] = 无卡牌可放入  [?X] = 有卡牌可放入  * = 可移动  → = 推荐移动');\n      \n      // 显示下一步提示\n      if (this.next && this.next[0] >= 0) {\n        const targetCard = getCardPlaceholderText(this.next[0]);\n        const targetSlotCard = this.cards1[this.next[1]];\n        const targetSlot = targetSlotCard < 0 ? ['[-1]', '[-2]', '[-3]', '[-4]'][Math.abs(targetSlotCard) - 1] : `[${this.next[1]}]`;\n        console.log(`\\n💡 建议移动: ${targetCard} → ${targetSlot}`);\n      }\n      \n      // 表格格式显示所有列\n      const colWidth = this.number + 1;\n      \n      // 创建表头（带行号列）\n      let header = '┌────┬';\n      let headerRow = '│    │';\n      let separator = '├────┼';\n      let footer = '└────┴';\n      \n      for (let col = 0; col < 4; col++) {\n        header += '───────┬';\n        headerRow += `  列${col + 1}  │`;\n        separator += '───────┼';\n        footer += '───────┴';\n      }\n      \n      header = header.slice(0, -1) + '┐';\n      headerRow = headerRow.slice(0, -1) + '│';\n      separator = separator.slice(0, -1) + '┤';\n      footer = footer.slice(0, -1) + '┘';\n      \n      console.log(header);\n      console.log(headerRow);\n      console.log(separator);\n      \n      // 按行显示卡片（从上到下）\n      for (let row = 0; row < colWidth; row++) {\n        let rowStr = `│行${(row + 1).toString().padStart(2)}│`;\n        \n        for (let col = 0; col < 4; col++) {\n          const idx = col * colWidth + row;\n          const card = this.cards1[idx];\n          \n          let cellContent = '';\n          let highlight = '';\n          \n          if (card < 0) {\n            // 空位 - 检查是否有卡牌可以放入\n            const emptySlotIndex = Math.abs(card) - 1; // 0, 1, 2, 3\n            const prevCardIndex = idx - 1;\n            const prevCard = this.cards1[prevCardIndex];\n            // 没有可放入的卡牌，显示负数ID\n            const emptyLabel = ['[-1]', '[-2]', '[-3]', '[-4]'][emptySlotIndex];\n            cellContent = emptyLabel;\n            \n            if (prevCard >= 4) { // 前面有有效卡牌\n              const candidates = this.findAllCardsByRankOffset(prevCard, -1);\n              if (candidates && candidates.length > 0) {\n                // 有可放入的卡牌，显示问号格式\n                const firstCandidate = candidates[0];\n                const candidateText = getCardPlaceholderText(firstCandidate.card);\n                cellContent = `[?${candidateText.slice(1)}]`; // 替换第一个字符为问号\n              }\n            }\n          } else {\n            // 有效卡片\n            const cardText = getCardPlaceholderText(card);\n            const canMove = this.canMoveCard(card);\n            const isTarget = this.next && this.next[0] === card;\n            \n            if (isTarget) {\n              highlight = '→'; // 下一步建议\n              cellContent = `${highlight}${cardText}`;\n            } else if (canMove) {\n              highlight = '*'; // 可移动\n              cellContent = `${highlight}${cardText}`;\n            } else {\n              cellContent = cardText;\n            }\n          }\n          \n          // 居中对齐\n          const padding = Math.max(0, 7 - cellContent.length);\n          const leftPad = Math.floor(padding / 2);\n          const rightPad = padding - leftPad;\n          \n          rowStr += ' '.repeat(leftPad) + cellContent + ' '.repeat(rightPad) + '│';\n        }\n        \n        console.log(rowStr);\n      }\n      \n      console.log(footer);\n      \n      return '渲染完成';\n    },\n\n    sendCustomButtons() {\n      const nextMode = this.matchMode === 1 ? 2 : this.matchMode === 2 ? 4 : 1;\n      this.customButtons.push({\n        action: 'difficulty',\n        label: 'MODE',\n        method: 'setMatchMode',\n        args: [nextMode],\n        description: 'SWITCH DIFFICULTY MODE (EASY → NORMAL → HARD)'\n      });\n    },\n  },\n  \n  // 以下方法由工厂函数GameComponentPresets.puzzleGame添加：\n  // wait(): Promise<void> - 等待指定时间，用于游戏步骤延迟\n  // undo(): void - 撤销上一步操作\n  // pass(): void - 跳过当前步骤\n  // goon(): void - 继续游戏\n  // goBack(): void - 返回上一状态\n  // step(fn: Function): Promise<void> - 执行游戏步骤\n  // executeMethodWithRenderToString(method: string, ...args: any[]): Promise<void> - 执行方法并渲染\n  \n  /**\n   * 组件挂载时注册自定义按钮\n   */\n  created() {\n    this.sendCustomButtons();\n  },\n  \n  /**\n   * 当matchMode变化时，更新自定义按钮\n   */\n  watch: {\n    matchMode() {\n      this.sendCustomButtons();\n    },\n    \n    // 保留原有的cards1监听\n    cards1: {\n      handler() {\n        this.$nextTick(() => {\n          this.updateAllCandidateCycling();\n        });\n      },\n      deep: true\n    }\n  },\n  \n\n};\n\n// 使用工厂函数创建增强的Sort组件并导出\nexport default GameComponentPresets.puzzleGame(Sort, 500);\n\n/**\n * 工厂函数GameComponentPresets.puzzleGame为Sort组件添加的功能：\n * \n * 基础增强功能（来自createEnhancedGameComponent）：\n * - gameManager属性：提供游戏状态管理、自动模式控制和步骤执行\n * - customButtons属性：存储自定义按钮配置\n * - displayButtons计算属性：决定显示哪些游戏控制按钮\n * - gameControlsConfig计算属性：游戏控制配置\n * - wait()、undo()、pass()、goon()等方法：游戏控制方法\n * - created和beforeUnmount生命周期钩子：管理游戏状态和事件监听\n * \n * puzzleGame特有功能：\n * - 提供拼图游戏相关的自动操作和状态管理\n * - 支持自动步骤延迟配置（此处设置为500ms）\n */\n","import { render } from \"./Sort.vue?vue&type=template&id=13db5f3b&scoped=true\"\nimport script from \"./Sort.vue?vue&type=script&lang=js\"\nexport * from \"./Sort.vue?vue&type=script&lang=js\"\n\nimport \"./Sort.vue?vue&type=style&index=0&id=13db5f3b&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-13db5f3b\"]])\n\nexport default __exports__","<template>\n  <GameLayout\n    v-bind=\"gameLayoutProps\"\n    @goon=\"goon\"\n    @step=\"stepFn\"\n    @auto=\"pass\"\n  >\n    <template #game-content>\n      <div class=\"row\">\n        <span>TIME: {{ time }}</span>\n        <br />\n        <span>STEP: {{ step }}</span>\n      </div>\n      <div class=\"row\">\n        <div>\n          <ul\n            class=\"cardsul flex-row center\"\n            style=\"padding-left: 0; margin: 0\"\n          >\n            <CardImage\n              v-for=\"(item, i) in cardPositions\"\n              :key=\"i\"\n              class=\"card m-0 radius\"\n              style=\"max-width: 25%\"\n              :card-id=\"selectedCard == item || secondSelectedCard == item || matchedCards[item] ? item : 'bg'\"\n              @click=\"(selectedCard != item && secondSelectedCard != item && !matchedCards[item]) && canOperate && clickCard(i)\"\n            />\n          </ul>\n        </div>\n      </div>\n    </template>\n\n    <template #win-content>\n      <h1 class=\"small\">TIME: {{ time }}</h1>\n      <h1 class=\"small\">STEP: {{ step }}</h1>\n    </template>\n  </GameLayout>\n</template>\n\n<script>\nimport PairsComponent from \"./Pairs.js\";\n\nconst component = PairsComponent;\n\nexport default component;\n</script>\n\n<style scoped>\n@import url(\"./sum.css\");\n</style>\n","import { shuffleCards } from \"../utils/help.js\";\nimport { GameComponentPresets } from \"../utils/gameComponentFactory.js\";\nimport { getCardPlaceholderText } from \"../utils/cardUtils.js\";\n\n/**\n * Pairs对象定义了记忆配对游戏的基础组件，将传递给GameComponentPresets.pairGame工厂函数\n * 工厂函数会为该组件添加游戏管理、按钮控制、自动操作等功能\n */\n\nconst Pairs = {\n  name: \"Pairs\",\n  data() {\n    return {\n      title: \"Pairs\",\n      // 存储牌的位置映射\n      cardPositions: [],\n      // 标记牌是否已配对\n      matchedCards: [],\n      // 标记牌是否已被查看过\n      seenCards: [],\n      // 当前选中的第一张牌索引\n      selectedCard: -1,\n      // 当前选中的第二张牌索引\n      secondSelectedCard: -2,\n      // 游戏时间（秒）\n      time: 0,\n      // 计时器引用\n      _timer: 0,\n      // 牌的总数\n      totalCards: 48,\n      // 未使用的变量\n      n: 0,\n      \n      // 以下属性由工厂函数GameComponentPresets.pairGame添加：\n      // gameManager: 游戏管理器实例，提供游戏状态控制和自动操作功能\n      // customButtons: 自定义按钮数组，用于存储游戏控制按钮配置\n      // seed: 随机种子，用于确保游戏结果可重现\n      // hitflag: 标记是否可以执行命中操作\n    };\n  },\n  created() {\n    this.sendCustomButtons();\n  },\n  methods: {\n    /**\n     * 初始化游戏状态\n     */\n    init() {\n      // 重置游戏计时器\n      this.time = 0;\n      clearInterval(this._timer);\n      this._timer = 0;\n      \n      // 重置选中状态\n      this.selectedCard = -1;\n      this.secondSelectedCard = -1;\n      \n      // 清空数组\n      this.cardPositions.splice(0);\n      this.seenCards.splice(0);\n      this.matchedCards.splice(0);\n      \n      // 创建牌并打乱顺序\n      const cardPositions = this.cardPositions;\n      for (let i = 0; i < this.totalCards; i++) {\n        cardPositions.push(i);\n        this.matchedCards.push(false);\n      }\n      \n      shuffleCards(cardPositions, this.totalCards);\n    },\n    /**\n     * 处理卡片点击事件\n     * @param {number} [rowOrPositionIndex] - 行号(当第二个参数存在时)或位置索引\n     * @param {number} [col] - 列号(可选)\n     */\n    async clickCard(rowOrPositionIndex, col) {\n      let positionIndex;\n      let cardId;\n      \n      // 处理不同参数情况\n      if (rowOrPositionIndex === undefined) {\n        // 不传参数时，选择一张未查看过的牌\n        let found = false;\n        \n        // 遍历所有位置查找未查看过的牌\n        for (positionIndex = 0; positionIndex < this.totalCards; positionIndex++) {\n          cardId = this.cardPositions[positionIndex];\n          if (!this.seenCards[cardId] && !this.matchedCards[cardId]) {\n            found = true;\n            break;\n          }\n        }\n        \n        // 如果所有牌都被看过，重置seen数组\n        if (!found) {\n          // 清空seen数组\n          this.seenCards.splice(0);\n          // 再次查找第一张未配对的牌\n          for (positionIndex = 0; positionIndex < this.totalCards; positionIndex++) {\n            cardId = this.cardPositions[positionIndex];\n            if (!this.matchedCards[cardId]) {\n              break;\n            }\n          }\n        }\n      } else if (col !== undefined) {\n        // 传入两个参数时，视为行号和列号\n        // 假设6行8列的布局\n        const gridColumns = 8;\n        positionIndex = rowOrPositionIndex * gridColumns + col;\n        cardId = this.cardPositions[positionIndex];\n      } else {\n        // 传入一个参数时，视为位置索引\n        positionIndex = rowOrPositionIndex;\n        cardId = this.cardPositions[positionIndex];\n      }\n      \n      // 启动游戏计时器（首次点击时）\n      if (!this._timer) {\n        this._timer = setInterval(() => {\n          this.time++;\n        }, 1000);\n      }\n      \n      // 忽略已经选中的牌或已经配对的牌\n      if (this.selectedCard === cardId || this.matchedCards[cardId]) {\n        return;\n      }\n      \n      // 标记牌为已查看\n      this.seenCards[cardId] = true;\n      \n      // 记录操作\n      this.gameManager.recordOperation();\n      \n      // 如果还没有选中第一张牌，将当前牌设为第一张\n      if (this.selectedCard < 0) {\n        this.selectedCard = cardId;\n        return;\n      }\n      \n      // 检查两张牌是否匹配（使用位运算判断是否属于同一组）\n      const isMatched = (this.selectedCard >> 2) === (cardId >> 2);\n      \n      if (isMatched) {\n        // 匹配成功，标记两张牌为已配对\n        this.matchedCards.splice(cardId, 1, true);\n        this.matchedCards.splice(this.selectedCard, 1, true);\n        this.selectedCard = -1;\n      }\n      \n      // 记录第二张选中的牌\n      this.gameManager.hitflag = false;\n      this.secondSelectedCard = cardId;\n      \n      // 等待一段时间让用户看到第二张牌\n      await this.wait();\n      \n      // 重置选中状态\n      this.selectedCard = -1;\n      this.secondSelectedCard = -1;\n      this.gameManager.hitflag = true;\n\n      // 检查游戏是否结束\n      const isGameOver = this.checkGameCompletion();\n\n      if (isGameOver) {\n        this.gameManager.setWin();\n        clearInterval(this._timer);\n        this._timer = 0;\n      }\n    },\n    \n    /**\n     * 检查游戏是否完成\n     * @returns {boolean} - 如果所有牌都已配对，返回true\n     */\n    checkGameCompletion() {\n      for (let i = 0; i < this.totalCards; i++) {\n        if (!this.matchedCards[i]) {\n          return false;\n        }\n      }\n      return true;\n    },\n    /**\n     * 自动执行游戏步骤（AI模式）\n     */\n    async stepFn() {\n      // 如果已经选中了第一张牌，尝试找出匹配的牌\n      if (this.selectedCard >= 0) {\n        // 查找同一组中的其他牌\n        const groupStartIndex = this.selectedCard - (this.selectedCard % 4);\n        for (let i = 0; i < 4; i++) {\n          const targetCardId = groupStartIndex + i;\n          // 跳过当前已选中的牌，选择已查看但未配对的牌\n          if (targetCardId !== this.selectedCard && \n              this.seenCards[targetCardId] && \n              !this.matchedCards[targetCardId]) {\n            // 找到对应牌ID的位置索引\n            const positionIndex = this.cardPositions.indexOf(targetCardId);\n            if (positionIndex !== -1) {\n              return await this.clickCard(positionIndex);\n            }\n          }\n        }\n      } else {\n        // 没有选中牌时，尝试找出已查看过的多张相同组的牌\n        let seenInGroupCount;\n        for (let i = 0; i < this.totalCards; i++) {\n          // 每组牌开始时重置计数器\n          if (i % 4 === 0) {\n            seenInGroupCount = 0;\n          }\n          \n          if (this.seenCards[i] && !this.matchedCards[i]) {\n            seenInGroupCount++;\n          }\n          \n          // 如果在同一组中看到多张未配对的牌，选择当前牌\n          if (seenInGroupCount > 1) {\n            // 找到对应牌ID的位置索引\n            const positionIndex = this.cardPositions.indexOf(i);\n            if (positionIndex !== -1) {\n              return await this.clickCard(positionIndex);\n            }\n          }\n        }\n      }\n      \n      // 如果没有明确的匹配策略，调用不带参数的clickCard函数\n      // 它会自动选择未查看过的牌，或在所有牌都看过时重置seen数组\n      return await this.clickCard();\n    },\n    \n    /**\n     * 渲染文本视图 - 显示当前游戏状态\n     * 用于终端交互式游戏\n     */\n    renderTextView() {\n      // 打印游戏标题\n      console.log('\\n╔════════════════════════════════════════════════╗');\n      console.log('║              配对游戏 (Pairs)                 ║');\n      console.log('╚════════════════════════════════════════════════╝');\n      \n      // 显示统计信息\n      const matchedCount = this.matchedCards.filter(m => m).length;\n      console.log(`\\n时间: ${this.time}秒 | 已配对: ${matchedCount}/${this.totalCards} 张\\n`);\n      \n      // 显示图例\n      console.log('\\n图例:');\n      console.log('  [?] = 未翻开  [✓] = 已看过  > = 第一张  * = 第二张');\n      \n      // 显示当前选中的牌\n      if (this.selectedCard >= 0) {\n        console.log(`\\n当前选中: ${getCardPlaceholderText(this.selectedCard)} (需要配对)`);\n      } else {\n        console.log('\\n');\n      }\n      \n      // 按6x8网格显示 - 与Vue模板保持一致\n      const gridColumns = 8;\n      const gridRows = 6;\n      \n      for (let row = 0; row < gridRows; row++) {\n        let line = '  ';\n        for (let col = 0; col < gridColumns; col++) {\n          const gridPosition = row * gridColumns + col;\n          const cardId = this.cardPositions[gridPosition]; // 获取该位置的牌ID\n          \n          // 检查这张牌是否被翻开或选中\n          const isFlipped = this.matchedCards[cardId] || \n                           cardId === this.selectedCard || \n                           cardId === this.secondSelectedCard;\n          const isSeen = this.seenCards[cardId];\n          \n          if (isFlipped) {\n            // 已翻开或当前选中\n            const cardText = getCardPlaceholderText(cardId);\n            const prefix = cardId === this.selectedCard ? '>' : \n                          (cardId === this.secondSelectedCard ? '*' : '');\n            line += `${(prefix + cardText).padEnd(3)} `;\n          } else if (isSeen) {\n            line += '[✓] ';\n          } else {\n            // 未翻开\n            line += '[?] ';\n          }\n        }\n        console.log(line);\n      }\n      \n      return '渲染完成';\n    },\n    \n    sendCustomButtons() {\n      // 添加Spider游戏特有的发牌按钮（如果牌堆有牌）\n      this.customButtons.push({\n        action: 'clickCard',\n        label: 'CLICK',\n        method: 'clickCard',\n        args: [],\n        description: 'CLICK ONE CARD'\n      });\n    },\n    // 注意：以下方法可能由工厂函数添加：\n    // - wait(): 延迟函数\n    // - getActions(): 获取可用操作列表\n    // - 其他游戏通用方法\n  },\n  \n  // 以下方法由工厂函数GameComponentPresets.pairGame添加：\n  // wait(): Promise<void> - 等待指定时间，用于游戏步骤延迟\n  // undo(): void - 撤销上一步操作\n  // pass(): void - 跳过当前步骤\n  // goon(): void - 继续游戏\n  // goBack(): void - 返回上一状态\n  // step(fn: Function): Promise<void> - 执行游戏步骤\n  // executeMethodWithRenderToString(method: string, ...args: any[]): Promise<void> - 执行方法并渲染\n  // getActions(): Array<Object> - 获取当前可用的操作列表\n  // setSeed(seed: number): void - 设置随机种子\n  // getAvailableActions(): Array<Object> - 获取可用操作（终端交互用）\n  // setWin(): void - 设置游戏胜利状态\n  // setLose(): void - 设置游戏失败状态\n  // setDraw(): void - 设置游戏平局状态\n  // sendCustomButtons(): void - 发送自定义按钮配置（组件已实现）\n};\n\n// 使用工厂函数创建增强的Pairs组件并导出\nexport default GameComponentPresets.pairGame(Pairs, 500);\n\n/**\n * 工厂函数GameComponentPresets.pairGame为Pairs组件添加的功能：\n * \n * 基础增强功能（来自createEnhancedGameComponent）：\n * - gameManager属性：提供游戏状态管理、自动模式控制和步骤执行\n * - customButtons属性：存储自定义按钮配置\n * - displayButtons计算属性：决定显示哪些游戏控制按钮\n * - gameControlsConfig计算属性：游戏控制配置\n * - wait()、undo()、pass()、goon()等方法：游戏控制方法\n * - created和beforeUnmount生命周期钩子：管理游戏状态和事件监听\n * - setWin()、setLose()、setDraw()方法：设置游戏结果状态\n * - setSeed()方法：设置随机种子\n * - getAvailableActions()方法：获取可用操作（终端交互用）\n * \n * pairGame特有功能：\n * - seed属性：随机种子，确保游戏可重现\n * - hitflag属性：标记是否可以执行命中操作（组件中已使用）\n * - getActions()方法：获取当前可用的操作列表\n * - 提供配对游戏相关的自动操作和状态管理\n * - 支持自动步骤延迟配置（此处设置为500ms）\n * \n * 注意事项：\n * - 组件实现了自己的sendCustomButtons()方法\n * - 游戏使用了自定义的计时器和游戏结束检查逻辑\n */\n","import { render } from \"./Pairs.vue?vue&type=template&id=0f05094e&scoped=true\"\nimport script from \"./Pairs.vue?vue&type=script&lang=js\"\nexport * from \"./Pairs.vue?vue&type=script&lang=js\"\n\nimport \"./Pairs.vue?vue&type=style&index=0&id=0f05094e&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-0f05094e\"]])\n\nexport default __exports__","<template>\n  <GameLayout\n    v-bind=\"gameLayoutProps\"\n    @undo=\"undo\"\n    @goon=\"goon\"\n    @step=\"stepFn\"\n    @auto=\"pass\"\n  >\n    <template #game-content>\n      <div class=\"row\">\n        <div calss=\"center\">\n          <ul\n            ref=\"container\"\n            class=\"cardsul rela center\"\n            style=\"padding-left: 0; max-width: 31.25rem; margin: auto\"\n            :style=\"{ height: height / 16 + 'rem' }\"\n          >\n            <CardImage\n              card-id=\"bg\"\n              :hide=\"cards[0].length === 0\"\n              class=\"m-0 static card m-0 abso\"\n              style=\"\n                max-width: 6.25rem;\n                width: 25%;\n                height: 9.375rem;\n                z-index: 0;\n                left: 0;\n                top: 0;\n              \"\n              @click=\"canOperate && clickCard(0)\"\n            />\n            <li\n              class=\"cards m-0 static\"\n              style=\"width: 50%; height: 9.375rem\"\n              :style=\"{ zIndex: dragItem == 1 ? 10 : 0 }\"\n              :class=\"{ drag: dragItem == 1 }\"\n            >\n              <CardImage\n                v-for=\"i in cards[1].length >= (turn > 3 ? 1 : 4 - turn)\n                  ? turn > 3\n                    ? 1\n                    : 4 - turn\n                  : cards[1].length\"\n                :key=\"cards[1][i - 1] + (fresh[1] * 3 + 1) * number\"\n                class=\"m-0 card abso\"\n                style=\"width: 25%; top: 0\"\n                :style=\"{ left: (3 - i) * 12.5 + 25 + '%', zIndex: 3 - i }\"\n                v-move=\"{ start, end, move }\"\n                :class=\"{\n                  drag: dragItem == 1,\n                  opa0: dragCard == cards[1][i - 1] && enterItem >= 0,\n                  shanshuo: sign == cards[1][i - 1],\n                }\"\n                :card-id=\"cards[1][i - 1]\"\n              />\n            </li>\n            <li\n              class=\"m-0 center\"\n              style=\"width: 25%; max-width: 6.25rem; height: 9.375rem\"\n            >\n              <span\n                class=\"m-0\"\n                :style=\"{ color: turn > 3 ? 'red' : 'inherit' }\"\n                >{{ turn }}</span\n              ><span class=\"m-0\">/3</span>\n            </li>\n            <li style=\"height: 1.875rem; width: 100%\"></li>\n            <li\n              v-for=\"i in 4\"\n              :key=\"i\"\n              class=\"cards m-0 static center\"\n              style=\"width: 25%; height: 9.375rem\"\n              :class=\"{ drag: dragItem == i + 1 }\"\n              ref=\"middleBox\"\n              :style=\"{ zIndex: dragItem == i + 1 ? 10 : 1 }\"\n              @mouseenter=\"enter(i + 1)\"\n              @touchenter=\"enter(i + 1)\"\n              @mouseleave=\"leave(i + 1)\"\n              @touchleave=\"leave(i + 1)\"\n            >\n              <div\n                class=\"card m-0 abso\"\n                style=\"top: 11.25rem; width: 25%\"\n                @click=\"canOperate && clickCard(i + 1)\"\n                :style=\"{\n                  zIndex: dragItem == i + 1 ? 10 : 1,\n                  left: (i - 1) * 25 + '%',\n                }\"\n              >\n                <span class=\"m-0\">{{ types[i - 1] + \"A\" }}</span>\n              </div>\n              <CardImage\n                v-for=\"item in cards[i + 1]\"\n                :key=\"item + (fresh[i + 1] * 3 + 2) * number\"\n                class=\"card m-0 abso\"\n                style=\"top: 11.25rem; width: 25%\"\n                :style=\"{ left: (i - 1) * 25 + '%' }\"\n                v-move=\"{ start, end, move }\"\n                :class=\"{\n                  drag: dragItem == i + 1,\n                  shanshuo: sign == item,\n                  opa0: dragCard == item && enterItem >= 0,\n                }\"\n                :card-id=\"item\"\n              />\n              <CardImage\n                :card-id=\"dragCard\"\n                :style=\"{ left: (i - 1) * 25 + '%' }\"\n                class=\"card m-0 abso\"\n                v-show=\"dragCard >= 0 && enterItem == i + 1\"\n                style=\"width: 25%; height: 9.375rem; top: 11.25rem\"\n              />\n            </li>\n            <li style=\"height: 1.875rem; width: 100%\"></li>\n            <li\n              v-for=\"i in 4\"\n              :key=\"i + 4\"\n              class=\"cards m-0 static\"\n              style=\"width: 25%\"\n              :class=\"{ drag: dragItem == i + 5 }\"\n              :style=\"{\n                height: (cards[i + 5].length * 30 + 120) / 16 + 'rem',\n                zIndex: dragItem == i + 5 ? 10 : 1,\n              }\"\n              ref=\"downBox\"\n              @mouseenter=\"enter(i + 5)\"\n              @touchenter=\"enter(i + 5)\"\n              @mouseleave=\"leave(i + 5)\"\n              @touchleave=\"leave(i + 5)\"\n            >\n              <CardImage\n                v-for=\"(item, j) in cards[i + 5]\"\n                :key=\"item + (fresh[i + 5] * 3 + 3) * number\"\n                class=\"m-0 card abso\"\n                style=\"width: 25%; height: 9.375rem\"\n                :style=\"{\n                  top: (j * 30 + 360) / 16 + 'rem',\n                  left: (i - 1) * 25 + '%',\n                }\"\n                :class=\"{\n                  drag: dragItem == i + 5,\n                  opa0: dragItem == i + 5 && dragCard >= item && enterItem >= 0,\n                  shanshuo: sign == item,\n                }\"\n                v-move=\"{ start, end, move }\"\n                ref=\"down\"\n                :card-id=\"item\"\n              />\n              <CardImage\n                v-for=\"(item, j) in cards[dragItem]\"\n                :key=\"j + 8\"\n                :card-id=\"item\"\n                :style=\"{\n                  top:\n                    (cards[i + 5].length * 30 +\n                      (j - cards[dragItem].indexOf(dragCard)) * 30 +\n                      360) /\n                      16 +\n                    'rem',\n                  left: (i - 1) * 25 + '%',\n                }\"\n                class=\"card m-0 abso\"\n                v-show=\"\n                  enterItem == i + 5 &&\n                  ((dragItem >= 6 && dragCard >= item) || dragCard == item)\n                \"\n                style=\"width: 25%; height: 9.375rem\"\n              />\n            </li>\n          </ul>\n        </div>\n      </div>\n    </template>\n  </GameLayout>\n</template>\n\n<script>\nimport SpiderComponent from \"./Spider.js\";\n\nconst component = SpiderComponent;\n\nexport default component;\n</script>\n\n<style scoped>\n@import url(\"./sum.css\");\n.card,\n.cards {\n  z-index: 1;\n}\n.drag {\n  pointer-events: none;\n  z-index: 0;\n}\n.opa0 {\n  opacity: 0;\n}\n</style>\n","var move = {};\nvar getPosition = function (e, isTouch) {\n  if (isTouch) {\n    e = e.touches[0];\n  }\n  return [e.clientX, e.clientY];\n};\nvar updateMoveData = function (el, e, isTouch) {\n  const data = el._moveData;\n  data.position = getPosition(e, isTouch);\n  data.offsetX = data.position[0] - data.startPosition[0];\n  data.offsetY = data.position[1] - data.startPosition[1];\n};\nvar prevent = function (e, bubbles) {\n  e.cancelable && e.preventDefault();\n  !bubbles && e.stopPropagation();\n  return false;\n};\nvar emit = (el, name, detail, bubbles, cancelable) => {\n  el.dispatchEvent(\n    new CustomEvent(name, {\n      detail,\n      bubbles,\n      cancelable,\n    }),\n  );\n};\nmove.emit = emit;\nvar listenEvents = (el, events, handles = {}) => {\n  for (const name of events) {\n    typeof handles[name] === \"function\" &&\n      el.addEventListener(name, handles[name]);\n  }\n};\nmove.listenEvents = listenEvents;\nmove.mounted = function (el, binding, vnode) {\n  if (el._isInitMove) {\n    return;\n  }\n  el._isInitMove = true;\n  var { page = window } = binding.value || {};\n  var { bubbles } = binding.modifiers;\n  listenEvents(el, [\"start\", \"move\", \"end\"], binding.value);\n  var isMove = false;\n  var isTouch;\n\n  function cancel() {\n    isMove = false;\n    el.removeEventListener(\"cancel\", cancel);\n    if (isTouch) {\n      page.removeEventListener(\"touchend\", _end);\n      page.removeEventListener(\"touchmove\", _move);\n      page.removeEventListener(\"touchcancel\", _end);\n    } else {\n      page.removeEventListener(\"mouseup\", _end);\n      page.removeEventListener(\"mousemove\", _move);\n    }\n  }\n\n  function _start(e) {\n    isTouch = e.type === \"touchstart\";\n    el.addEventListener(\"cancel\", cancel);\n    if (isTouch) {\n      page.addEventListener(\"touchend\", _end, { passive: false });\n      page.addEventListener(\"touchmove\", _move, { passive: false });\n      page.addEventListener(\"touchcancel\", _end, { passive: false });\n    } else {\n      page.addEventListener(\"mouseup\", _end, { passive: false });\n      page.addEventListener(\"mousemove\", _move, { passive: false });\n    }\n    if (!el._moveData) {\n      el._moveData = { isTouch };\n    }\n    el._moveData.startPosition = getPosition(e, isTouch);\n    // updateMoveData(el, e, isTouch)\n    emit(el, \"start\", {\n      el,\n      binding,\n      vnode,\n    });\n    return prevent(e, bubbles);\n  }\n\n  function _move(e) {\n    updateMoveData(el, e, isTouch);\n    emit(el, \"move\", {\n      el,\n      binding,\n      vnode,\n    });\n    isMove = true;\n    return prevent(e, bubbles);\n  }\n\n  function _end(e) {\n    if (!isMove) {\n      const data = el._moveData;\n      data.offsetX = 0;\n      data.offsetY = 0;\n      emit(el, \"notmove\");\n    }\n    emit(el, \"end\", {\n      el,\n      binding,\n      vnode,\n    });\n    emit(el, \"cancel\");\n    return prevent(e, bubbles);\n  }\n  el.addEventListener(\"touchstart\", _start);\n  el.addEventListener(\"mousedown\", _start);\n};\nmove.bind = move.mounted;\nmove.install = function (Vue) {\n  Vue.directive(\"move\", move);\n};\nexport default move;\n","import { shuffleCards, checkDeadForeach } from \"../utils/help.js\";\nimport move from \"../directives/move.js\";\nimport { GameComponentPresets } from \"../utils/gameComponentFactory.js\";\nimport { getCardPlaceholderText } from \"../utils/cardUtils.js\";\n\n/**\n * Spider对象定义了蜘蛛纸牌游戏的基础组件，将传递给GameComponentPresets.cardGame工厂函数\n * 工厂函数会为该组件添加游戏管理、按钮控制、自动操作等功能\n */\nconst Spider = {\n  name: \"Spider\",\n  data() {\n    return {\n      title: \"Spider\",\n      cards: [[], [], [], [], [], [], [], [], [], []],\n      fresh: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      sign: -99,\n      index: -99,\n      dragCard: -99,\n      dragItem: -99,\n      enterItem: -99,\n      turn: 1,\n      number: 52,\n      \n      // 以下属性由工厂函数GameComponentPresets.cardGame添加：\n      // gameManager: 游戏管理器实例，提供游戏状态控制和自动操作功能\n      // customButtons: 自定义按钮数组，用于存储游戏控制按钮配置\n      // record: 操作记录数组，用于撤销功能\n    };\n  },\n  directives: { move },\n  created: function () {\n    this.sendCustomButtons();\n    this.setupGameStateListeners();\n  },\n  mounted() {\n    let enter = (i) => () => this.moveEnter(i);\n    if (!this.$refs.middleBox || !this.$refs.downBox) return;\n    this.middleEnters = [];\n    this.downEnters = [];\n    for (let i = 0; i < 4; i++) {\n      let middle = this.$refs.middleBox[i];\n      let down = this.$refs.downBox[i];\n      this.middleEnters[i] = enter(i + 2);\n      this.downEnters[i] = enter(i + 6);\n      middle.addEventListener(\"mousemove\", this.middleEnters[i]);\n      middle.addEventListener(\"touchmove\", this.middleEnters[i]);\n      down.addEventListener(\"mousemove\", this.downEnters[i]);\n      down.addEventListener(\"touchmove\", this.downEnters[i]);\n    }\n  },\n  beforeUnmount() {\n    this.gameManager.off(\"stateChange\");\n    if (!this.$refs.middleBox || !this.$refs.downBox || !this.middleEnters || !this.downEnters) return;\n    for (let i = 0; i < 4; i++) {\n      let middle = this.$refs.middleBox[i];\n      let down = this.$refs.downBox[i];\n      middle.removeEventListener(\"mousemove\", this.middleEnters[i]);\n      middle.addEventListener(\"touchmove\", this.middleEnters[i]);\n      down.addEventListener(\"mousemove\", this.downEnters[i]);\n      down.addEventListener(\"touchmove\", this.downEnters[i]);\n    }\n  },\n  // 初始化\n  methods: {\n    setupGameStateListeners() {\n      // 监听游戏状态变化\n      this.gameManager.on(\"stateChange\", () => {\n        this.$forceUpdate(); // 强制更新视图\n      });\n    },\n    init() {\n      this.gameManager.init();\n      for (let i = 0; i < 10; i++) {\n        this.cards[i].splice(0);\n      }\n      this.fresh = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      this.turn = 1;\n      this.sign = -99;\n      this.dragItem = -99;\n      this.dragCard = -99;\n      this.enterItem = -99;\n      let cards = this.cards[0];\n      for (let i = 0; i < this.number; i++) {\n        cards.push(i);\n      }\n      shuffleCards(cards, this.number);\n      for (let i = 6; i < 10; i++) {\n        this.cards[i].push(this.cards[0].splice(-1)[0]);\n      }\n    },\n    findPos(card) {\n      for (let i = 2; i < 10; i++) {\n        if (this.cards[i].indexOf(card) >= 0) {\n          return i;\n        }\n      }\n      return -99;\n    },\n    addAndCheck(card, type) {\n      let res = checkDeadForeach(this.record, [card, type]);\n      if (!res) return false;\n      this.record.unshift([card, type]);\n      return true;\n    },\n    checkDown(card) {\n      if (!this.addAndCheck(card, 1)) return;\n      let type = card % 2;\n      let level = card >> 2;\n      if (level == 12) {\n        return false;\n      }\n      let up1 = ((level + 1) % 13) * 4 + !type;\n      let up2 = up1 + 2;\n      let pos1 = this.findPos(up1);\n      let pos2 = this.findPos(up2);\n      if (pos1 < 0 && pos2 < 0) {\n        return false;\n      } else if (pos1 >= 6 && pos2 >= 6) {\n        let pos = this.findPos(card);\n        let top1 = this.cards[pos1][this.cards[pos1].length - 1];\n        let top2 = this.cards[pos2][this.cards[pos2].length - 1];\n        if (top1 != up1 && top2 != up2) {\n          return false;\n        }\n        if (pos == (top1 == up1 ? pos1 : pos2)) {\n          return false;\n        }\n        return [pos, top1 == up1 ? pos1 : pos2];\n      }\n      if (pos1 >= 6 || pos2 >= 6) {\n        let cards = pos1 >= 6 ? this.cards[pos1] : this.cards[pos2];\n        let up = pos1 >= 6 ? up1 : up2;\n        let index = cards.indexOf(up);\n        if (index == cards.length - 1) {\n          let pos = this.findPos(card);\n          if (pos != (pos1 >= 6 ? pos1 : pos2)) {\n            return [pos, pos1 >= 6 ? pos1 : pos2];\n          }\n        } else {\n          let res = this.checkUp(cards[index + 1]);\n          if (res) {\n            return res;\n          }\n        }\n        if (pos1 < 0 || pos2 < 0) {\n          return false;\n        }\n      }\n      let first;\n      if (pos1 - 2 == up1 % 4) {\n        let i = 0;\n        let top = this.cards[pos1][this.cards[pos1].length - 1];\n        while (top - 4 * i >= up1) {\n          let res = this.checkDown(top - 4 * i);\n          if (!res) {\n            break;\n          }\n          if (!first) {\n            first = res;\n          }\n          i++;\n        }\n        if (top - 4 * i < up1) {\n          return first;\n        }\n      }\n      if (pos2 - 2 == up2 % 4) {\n        let i = 0;\n        let top = this.cards[pos2][this.cards[pos2].length - 1];\n        while (top - 4 * i >= up2) {\n          let res = this.checkDown(top - 4 * i);\n          if (!res) {\n            break;\n          }\n          if (!first) {\n            first = res;\n          }\n          i++;\n        }\n        if (top - 4 * i < up2) {\n          return first;\n        }\n      }\n      return false;\n    },\n    checkUp(card) {\n      if (!this.addAndCheck(card, 2)) return;\n      let type = card % 4;\n      let level = card >> 2;\n      let result = [];\n      for (let i = 0; i <= level; i++) {\n        let temp = i * 4 + type;\n        let pos = this.findPos(temp);\n        if (pos < 0) {\n          if (i == level) {\n            result.push([pos, type + 2]);\n            break;\n          }\n          return false;\n        }\n        if (pos == type + 2) {\n          continue;\n        }\n        let index = this.cards[pos].indexOf(temp);\n        if (index == this.cards[pos].length - 1) {\n          result.push([pos, type + 2]);\n          continue;\n        }\n        let res = this.checkMove(this.cards[pos][index + 1]);\n        if (!res) {\n          return false;\n        }\n        result.push(res);\n      }\n      return result[0];\n    },\n    checkMove(card) {\n      if (!this.addAndCheck(card, 0)) return;\n      return this.checkDown(card) || this.checkUp(card);\n    },\n    async stepFn() {\n      await this.gameManager.step(async () => {\n        let next = false;\n        for (let i = 6; i < 10; i++) {\n          this.record = [];\n          next = this.checkMove(this.cards[i][0]);\n          if (next) {\n            if (\n              !this.skipCheck &&\n              !checkDeadForeach(this.gameManager.history, [next[1], next[0]])\n            )\n              continue;\n            break;\n          }\n        }\n        this.record = [];\n        !next &&\n          this.cards[1].length > 0 &&\n          (next = this.checkMove(this.cards[1][0]));\n        if (\n          !next ||\n          (!this.skipCheck &&\n            !checkDeadForeach(this.gameManager.history, [next[1], next[0]]))\n        ) {\n          return this.clickCard(0);\n        }\n        this.skipCheck = false;\n        this.sign = -99;\n        await this.clickCard(next[0] < 0 ? 1 : next[0]);\n        await this.wait();\n        await this.clickCard(next[1]);\n      });\n    },\n    async addCard() {\n      for (let i = 6; i < 10; i++) {\n        if (this.cards[i].length <= 0) {\n          if (this.cards[1].length > 0) {\n            this.gameManager.recordOperation([i, 1, 0, 1], true);\n            this.cards[i].push(this.cards[1].splice(0, 1)[0]);\n          } else if (this.cards[0].length > 0) {\n            this.gameManager.recordOperation(\n              [i, 0, this.cards[0].length - 1, 1],\n              true,\n            );\n            this.cards[i].push(this.cards[0].splice(-1)[0]);\n          }\n        }\n      }\n      if (this.cards[0].length <= 0 && this.cards[1].length <= 0) {\n        if (this.lock) {\n          return false;\n        }\n        this.dragCard = -99;\n        this.dragItem = -99;\n        this.enterItem = -99;\n        this.lock = true;\n        for (let i = 0; i < this.number; i++) {\n          let type = i % 4;\n          while (this.cards[type + 2].length <= i >> 2) {\n            this.record = [];\n            let next = this.checkUp(i);\n            if (\n              !next ||\n              (!this.skipCheck &&\n                !checkDeadForeach(this.gameManager.history, [next[1], next[0]]))\n            ) {\n              for (let j = 6; j < 10; j++) {\n                if (this.cards[j].length <= 0 || this.cards[j][0] >> 2 >= 12) {\n                  continue;\n                }\n                this.record = [];\n                next = this.checkMove(this.cards[j][0]);\n                if (next) {\n                  if (\n                    !this.skipCheck &&\n                    !checkDeadForeach(this.gameManager.history, [\n                      next[1],\n                      next[0],\n                    ])\n                  ) {\n                    next = false;\n                    continue;\n                  }\n                  break;\n                }\n              }\n            }\n            if (!next) {\n              this.skipCheck = true;\n              continue;\n            }\n            this.skipCheck = false;\n            this.sign = -99;\n            await this.clickCard(next[0]);\n            await this.wait();\n            await this.clickCard(next[1]);\n            for (let k = 6; k < 10; k++) {\n              if (this.cards[k].length <= 0) {\n                let pos = this.findPos(i);\n                if (this.cards[pos][this.cards[pos].length - 1] != i) {\n                  let index = this.cards[pos].indexOf(i);\n                  let next = [\n                    k,\n                    pos,\n                    index + 1,\n                    this.cards[pos].length - index - 1,\n                    i,\n                  ];\n                  this.cards[k].push(...this.cards[pos].splice(index + 1));\n                  this.gameManager.recordOperation(next, true);\n                  continue;\n                }\n                let l;\n                for (l = 48; l < 52; l++) {\n                  let pos = this.findPos(l);\n                  if (pos < 6) {\n                    continue;\n                  }\n                  let index = this.cards[pos].indexOf(l);\n                  if (l <= 0) {\n                    continue;\n                  }\n                  let next = [k, pos, index, this.cards[pos].length - index, l];\n                  if (!checkDeadForeach(this.gameManager.history, next)) {\n                    continue;\n                  }\n                  this.cards[k].push(...this.cards[pos].splice(index));\n                  this.gameManager.recordOperation(next, true);\n                  break;\n                }\n                if (l < 52) {\n                  continue;\n                }\n                for (l = 6; l < 10; l++) {\n                  if (this.cards[l].length > 1) {\n                    let next = [k, l, this.cards[l].length - 1, 1];\n                    if (!checkDeadForeach(this.gameManager.history, next)) {\n                      continue;\n                    }\n                    this.cards[k].push(this.cards[l].splice(-1)[0]);\n                    this.gameManager.recordOperation(next, true);\n                    break;\n                  }\n                }\n              }\n            }\n          }\n        }\n        this.sign = -99;\n        this.gameManager.setWin();\n        this.lock = false;\n      }\n    },\n    async clickCard(index) {\n      let len = this.cards[index].length;\n      if (index == 0) {\n        if (this.cards[0].length > 0) {\n          this.gameManager.recordOperation(\n            [1, 0, this.turn > 3 ? 1 : 4 - this.turn],\n            true,\n          );\n          this.cards[1].unshift(\n            ...this.cards[0].splice(this.turn > 3 ? -1 : this.turn - 4),\n          );\n        } else {\n          for (let i = 0; i < this.gameManager.history.length; i++) {\n            let step = this.gameManager.history[i];\n            if (step[0] == 0 && step[1] == 1) {\n              this.skipCheck = true;\n            } else if (step[0] != 1 || step[1] != 0) {\n              break;\n            }\n          }\n          this.gameManager.recordOperation([0, 1, this.cards[1].length], true);\n          this.cards[0].unshift(...this.cards[1].splice(0));\n          this.turn++;\n        }\n        this.sign = -99;\n      } else if (index == 1) {\n        if (len > 0) {\n          this.sign = this.cards[index][0];\n          this.index = index;\n        }\n      } else if (index < 6) {\n        if (this.sign == index - 2 + len * 4) {\n          this.gameManager.recordOperation(\n            [index, this.index, this.cards[this.index].indexOf(this.sign), 1],\n            true,\n          );\n          this.cards[index].push(\n            this.cards[this.index].splice(\n              this.cards[this.index].indexOf(this.sign),\n              1,\n            )[0],\n          );\n          this.sign = -99;\n        } else {\n          if (len > 0) {\n            this.sign = this.cards[index][len - 1];\n            this.index = index;\n          }\n        }\n      } else {\n        let top = this.cards[index][len - 1],\n          i;\n        if (\n          this.sign >= 0 &&\n          this.index >= 6 &&\n          (i = this.cards[this.index].findIndex((card) => {\n            return (\n              card >> 2 < 13 &&\n              card % 2 != top % 2 &&\n              ((card >> 2) + 1) % 13 == top >> 2\n            );\n          })) >= 0\n        ) {\n          this.gameManager.recordOperation(\n            [index, this.index, i, this.cards[this.index].length - i, top],\n            true,\n          );\n          this.cards[index].push(...this.cards[this.index].splice(i));\n          this.sign = -99;\n        } else if (\n          this.sign >= 0 &&\n          this.index < 6 &&\n          this.sign >> 2 < 13 &&\n          this.sign % 2 != top % 2 &&\n          ((this.sign >> 2) + 1) % 13 == top >> 2\n        ) {\n          this.gameManager.recordOperation(\n            [\n              index,\n              this.index,\n              this.cards[this.index].indexOf(this.sign),\n              1,\n              top,\n            ],\n            true,\n          );\n          this.cards[index].push(\n            this.cards[this.index].splice(\n              this.cards[this.index].indexOf(this.sign),\n              1,\n            )[0],\n          );\n          this.sign = -99;\n        } else if (len > 0) {\n          this.sign = top;\n          this.index = index;\n        }\n      }\n      if (this.sign < 0) {\n        await this.addCard();\n      }\n    },\n    undo() {\n      this.sign = -99;\n      if (this.step <= 0) {\n        return;\n      }\n      let temp = this.gameManager.history.shift(),\n        add = false;\n      if (temp[1] == 0) {\n        if (temp[0] == 1)\n          return this.cards[0].push(...this.cards[1].splice(0, temp[2]));\n        else {\n          add = true;\n          this.cards[0].push(this.cards[temp[0]].splice(0, 1)[0]);\n        }\n      } else if (temp[1] == 1) {\n        if (temp[0] != 0) {\n          this.cards[1].unshift(this.cards[temp[0]].splice(-1)[0]);\n          add = true;\n          if (temp[0] < 6 || this.cards[temp[0]].length > 0) {\n            return;\n          }\n        } else {\n          this.cards[1].unshift(...this.cards[0].splice(0));\n          this.turn--;\n          return;\n        }\n      }\n      if (add) {\n        temp = this.gameManager.history.shift();\n      }\n      this.cards[temp[1]].splice(\n        temp[2],\n        0,\n        ...this.cards[temp[0]].splice(-temp[3]),\n      );\n    },\n    start(e) {\n      // 方法1：尝试从绑定的组件实例获取数据\n      let item = -1;\n      \n      // 检查e.detail.binding.value，这可能包含组件的props数据\n      if (e.detail.binding && e.detail.binding.value && e.detail.binding.value.cardId !== undefined) {\n        item = parseInt(e.detail.binding.value.cardId);\n      }\n      \n      // 方法2：尝试从vnode上下文获取数据\n      if (item < 0 && e.detail.vnode && e.detail.vnode.componentInstance) {\n        const vm = e.detail.vnode.componentInstance;\n        if (vm.cardId !== undefined) {\n          item = parseInt(vm.cardId);\n        }\n      }\n      \n      // 方法3：使用Vue的数据属性机制\n      if (item < 0 && e.detail.el.dataset.cardId) {\n        item = parseInt(e.detail.el.dataset.cardId);\n      }\n      \n      // 如果仍然无法获取有效ID，返回\n      if (!this.canOperate || item < 0) {\n        return false;\n      }\n      \n      let drag = this.findPos(item);\n      if (drag < 0 && item != this.cards[1][0]) {\n        return;\n      }\n      let data = e.detail.el._moveData;\n      data.offsetLeft = e.detail.el.offsetLeft;\n      data.offsetTop = e.detail.el.offsetTop;\n      this.dragItem = drag;\n      if (this.dragItem < 0) {\n        this.dragItem = 1;\n      }\n      this.dragCard = item;\n      this.enterItem = -99;\n    },\n    async end(e) {\n      let drag = this.dragItem;\n      if (!this.canOperate) {\n        return;\n      }\n      if (drag == 1 && this.dragCard != this.cards[1][0]) {\n        return;\n      }\n      let data = e.detail.el._moveData;\n      let left = data.offsetX + data.offsetLeft;\n      let top = data.offsetY + data.offsetTop;\n      let index = Math.floor((left + 50) / this.cardWidth);\n      if (index >= 0 && index < 4 && top >= 115 && top <= this.height - 75) {\n        index += top <= 330 ? 2 : 6;\n        await this.clickCard(drag).catch(console.log);\n        if (this.sign >= 0 && index != drag && index >= 0) {\n          await this.clickCard(index).catch(console.log);\n        }\n      }\n      this.fresh[drag]++;\n      this.enterItem = -99;\n      this.dragItem = -99;\n      this.dragCard = -99;\n    },\n    enter(item) {\n      console.log(\"enter\", item);\n      // this.enterItem = item\n    },\n    leave(item) {\n      console.log(\"leave\", item);\n      // if (this.enterItem == item) {\n      //   this.enterItem = -99\n      // }\n    },\n    moveEnter(item) {\n      console.log(\"moveEnter\", item, this.dragItem);\n      // if (item == this.dragItem) {\n      //   return\n      // }\n      // this.enterItem = item\n      // this.moveflag = false\n    },\n    move(e) {\n      if (!this.canOperate) {\n        return false;\n      }\n      if (this.dragItem == 1 && this.dragCard != this.cards[1][0]) {\n        return;\n      }\n      let data = e.detail.el._moveData;\n      let left = data.offsetX + data.offsetLeft;\n      let top = data.offsetY + data.offsetTop;\n      let index = Math.floor((left + 50) / this.cardWidth);\n      if (index >= 0 && index < 4 && top >= 115 && top <= this.height - 75) {\n        index += top <= 330 ? 2 : 6;\n        if (this.dragItem != index) this.enterItem = index;\n      } else {\n        this.enterItem = -99;\n      }\n      e.detail.el.style.left = left / 16 + \"rem\";\n      e.detail.el.style.top = top / 16 + \"rem\";\n      if (this.dragItem >= 6) {\n        let index = this.cards[this.dragItem].indexOf(this.dragCard);\n        let j = 0;\n        for (let down of this.$refs.down) {\n          let res = down.$el._cardImageRoot.className.match(\"drag\");\n          if (!res || ++j <= index) {\n            continue;\n          }\n          down.$el._cardImageRoot.style.left = (data.offsetX + data.offsetLeft) / 16 + \"rem\";\n          down.$el._cardImageRoot.style.top =\n            (data.offsetY + data.offsetTop + (j - index - 1) * 30) / 16 + \"rem\";\n        }\n      }\n    },\n    \n    /**\n     * 渲染文本视图 - 显示当前游戏状态\n     * 用于终端交互式游戏\n     */\n    renderTextView() {\n      console.log('\\n╔════════════════════════════════════════════════╗');\n      console.log('║            蜘蛛纸牌 (Spider)                  ║');\n      console.log('╚════════════════════════════════════════════════╝');\n      \n      // 统计信息\n      const totalCards = this.cards.slice(1).reduce((sum, col) => sum + col.length, 0);\n      const deckCards = this.cards[0].length;\n      console.log(`\\n步数: ${this.step} | 牌堆剩余: ${deckCards} 张 | 场上: ${totalCards} 张\\n`);\n      console.log('提示: ← 表示选中的牌');\n      \n      // 创建表格显示\n      console.log('┌──────────────┬──────────────┬──────────────┬──────────────┐');\n      \n      // 第一行：牌堆 + 第1列最后3张牌\n      const col1 = this.cards[1];\n      const deckDisplay = deckCards > 0 ? `🂠 ${deckCards}张` : '(空)';\n      const col1Last3 = col1.slice(0, 3).map((card) => {\n        const cardText = getCardPlaceholderText(card);\n        // const actualIdx = col1.length - 3 + idx;\n        const isSelected = this.sign === card;\n        return `${cardText}${isSelected ? ' ←' : ''}`;\n      });\n      \n      console.log(`│ 牌堆: ${deckDisplay.padEnd(5)} │ ${(col1Last3[0] || \"\").padEnd(12)} │ ${(col1Last3[1] || \"\").padEnd(12)} │ ${(col1Last3[2] || \"\").padEnd(12)} │`);\n      console.log('├──────────────┼──────────────┼──────────────┼──────────────┤');\n      \n      // 第二行：第2-5列（每列显示剩余张数+最后一张牌）\n      const row2Data = [];\n      for (let i = 2; i <= 5; i++) {\n        const col = this.cards[i];\n        if (col.length === 0) {\n          row2Data.push(\"-:\" + this.types[i - 2] + '?');\n        } else {\n          const lastCard = col[col.length - 1];\n          const cardText = getCardPlaceholderText(lastCard);\n          const isSelected = this.sign === lastCard;\n          row2Data.push(`${col.length - 1}:${cardText}${isSelected ? ' ←' : ''}`);\n        }\n      }\n      \n      console.log(`│ ${row2Data[0].padEnd(12)} │ ${row2Data[1].padEnd(12)} │ ${row2Data[2].padEnd(12)} │ ${row2Data[3].padEnd(12)} │`);\n      console.log('├──────────────┼──────────────┼──────────────┼──────────────┤');\n      \n      // 第三行：第6-9列（每列显示总张数+纵向最多5张牌）\n      const row3Data = [];\n      for (let i = 6; i <= 9; i++) {\n        const col = this.cards[i];\n        if (col.length === 0) {\n          row3Data.push(\"\");\n        } else {\n          const cardsDisplay = [];\n          \n          for (let j = 0; j < col.length; j++) {\n            const card = col[j];\n            const cardText = getCardPlaceholderText(card);\n            const isSelected = this.sign === card;\n            cardsDisplay.push(`${j}:${cardText}${isSelected ? ' ←' : ''}`);\n          }\n          \n          row3Data.push(`${cardsDisplay.join('\\n')}`);\n        }\n      }\n      \n      // 处理多行显示，确保对齐\n      const maxLines = Math.max(...row3Data.map(data => data.split('\\n').length));\n      const paddedData = row3Data.map(data => {\n        const lines = data.split('\\n');\n        while (lines.length < maxLines) {\n          lines.push('');\n        }\n        return lines;\n      });\n      \n      for (let lineIdx = 0; lineIdx < maxLines; lineIdx++) {\n        const lineContent = paddedData.map(data => data[lineIdx].padEnd(12));\n        console.log(`│ ${lineContent.join(' │ ')} │`);\n      }\n      \n      console.log('└──────────────┴──────────────┴──────────────┴──────────────┘');\n      \n      return '渲染完成';\n    },\n    \n    sendCustomButtons() {\n      // 添加Spider游戏特有的发牌按钮（如果牌堆有牌）\n      this.customButtons.push({\n        action: 'deal',\n        label: 'DEAL',\n        method: 'clickCard',\n        args: [0],\n        description: 'DEAL FROM THE DECK'\n      });\n    },\n  },\n    \n    /**\n     * 监听cards变化，更新自定义按钮\n     */\n  watch: {\n    cards: {\n      handler() {\n        this.sendCustomButtons();\n      },\n      deep: true\n    },\n  },\n  \n  // 以下方法由工厂函数GameComponentPresets.cardGame添加：\n  // wait(): Promise<void> - 等待指定时间，用于游戏步骤延迟\n  // undo(): void - 撤销上一步操作\n  // pass(): void - 跳过当前步骤\n  // goon(): void - 继续游戏\n  // goBack(): void - 返回上一状态\n  // step(fn: Function): Promise<void> - 执行游戏步骤\n  // executeMethodWithRenderToString(method: string, ...args: any[]): Promise<void> - 执行方法并渲染\n  \n  computed: {\n    // 保留Spider特有的计算属性\n    height() {\n      return (\n        Math.max(...this.cards.slice(-4).map((cards) => cards.length)) * 30 +\n        480\n      );\n    },\n    cardWidth() {\n      return this.$refs.container ? this.$refs.container.offsetWidth >> 2 : 500;\n    },\n  },\n};\n\n// 使用工厂函数创建增强的Spider组件并导出\nexport default GameComponentPresets.cardGame(Spider, 500);\n\n/**\n * 工厂函数GameComponentPresets.cardGame为Spider组件添加的功能：\n * \n * 基础增强功能（来自createEnhancedGameComponent）：\n * - gameManager属性：提供游戏状态管理、自动模式控制和步骤执行\n * - customButtons属性：存储自定义按钮配置\n * - displayButtons计算属性：决定显示哪些游戏控制按钮\n * - gameControlsConfig计算属性：游戏控制配置\n * - wait()、undo()、pass()、goon()等方法：游戏控制方法\n * - created和beforeUnmount生命周期钩子：管理游戏状态和事件监听\n * \n * cardGame特有功能：\n * - record属性：存储操作记录，支持撤销功能\n * - 提供纸牌游戏相关的自动操作和状态管理\n * - 支持自动步骤延迟配置（此处设置为500ms）\n */\n","import { render } from \"./Spider.vue?vue&type=template&id=f91447be&scoped=true\"\nimport script from \"./Spider.vue?vue&type=script&lang=js\"\nexport * from \"./Spider.vue?vue&type=script&lang=js\"\n\nimport \"./Spider.vue?vue&type=style&index=0&id=f91447be&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-f91447be\"]])\n\nexport default __exports__","<template>\n  <GameLayout\n    v-bind=\"gameLayoutProps\"\n    :container-style=\"{ width: '100%' }\"\n    @undo=\"undo\"\n    @goon=\"goon\"\n    @step=\"stepTwiceFn\"\n    @auto=\"pass\"\n  >\n    <template #game-content>\n      <div class=\"row center\">\n        <div>\n          <div\n            class=\"cardsul center\"\n            style=\"\n              padding-left: 0;\n              margin: 0;\n              width: 100%;\n              max-width: 37.5rem;\n              background-color: #719192;\n              padding: 0.3125rem 0;\n            \"\n          >\n            <div\n              v-for=\"(item, i) in cards1\"\n              :key=\"i\"\n              class=\"m-0 center\"\n              style=\"width: 16%; border-radius: 50%; overflow: hidden\"\n              @click=\"canOperate && clickCard(i)\"\n            >\n              <div\n                class=\"center\"\n                style=\"width: 100%; position: relative\"\n                :style=\"{\n                  backgroundColor:\n                    item < 0\n                      ? 'transparent'\n                      : !cards2[item]\n                        ? '#fff'\n                        : item == sign\n                          ? '#FFB800'\n                          : grades[item] == grade\n                            ? '#01AAED'\n                            : '#5FB878',\n                }\"\n              >\n                <div\n                  class=\"shanshuo abso\"\n                  v-show=\"validBoxes.indexOf(i) >= 0\"\n                  style=\"\n                    width: 100%;\n                    height: 100%;\n                    background-color: #ff5722;\n                    top: 0;\n                    left: 0;\n                  \"\n                ></div>\n                <img\n                  :style=\"{\n                    transform:\n                      cards2[item] && grades[item] != grade\n                        ? 'rotate(180deg)'\n                        : 'rotate(0)',\n                    opacity: item < 0 ? 0 : 100,\n                  }\"\n                  :src=\"\n                    !cards2[item]\n                      ? './static/avatar/logo.webp'\n                      : './static/avatar/' + item + '.webp'\n                  \"\n                  style=\"width: 100%\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">\n        <span class=\"m-0 scrore\">{{ lowCount + \" : \" + highCount }}</span>\n      </div>\n    </template>\n  </GameLayout>\n</template>\n\n<script>\nimport GridBattleComponent from \"./Chess.js\";\nexport default GridBattleComponent;\n</script>\n\n<style scoped>\n@import url(\"./sum.css\");\n</style>\n","import { shuffleCards, seededRandom } from \"../utils/help.js\";\nimport { GameComponentPresets } from \"../utils/gameComponentFactory.js\";\n\n/**\n * GridBattle对象定义了棋盘对战游戏的基础组件，将传递给GameComponentPresets.strategyGame工厂函数\n * 工厂函数会为该组件添加游戏管理、按钮控制、自动操作等功能\n */\n\nlet _modes = [\n  [1, 0],\n  [1, 1],\n  [2, 1],\n  [2, 2],\n  [3, 1],\n  [3, 2],\n  [3, 3],\n];\n\nconst GridBattle = {\n  name: \"GridBattle\",\n  data() {\n    return {\n      title: \"GridBattle\",\n      cards1: [],\n      cards2: [],\n      // 移除arr数组，因为现在由GameStateManager管理历史记录\n      // arr: [],\n      sign: -1,\n      number: 36,\n      grade: -1,\n      modes: [\n        0, 1, 3, 6, 10, 15, 2, 5, 7, 13, 18, 21, 4, 8, 14, 17, 24, 27, 9, 12,\n        20, 25, 26, 31, 11, 19, 23, 29, 30, 35, 16, 22, 28, 32, 34, 33,\n      ],\n      grades: [\n        1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1,\n        1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1,\n      ],\n      \n      // 以下属性由工厂函数GameComponentPresets.strategyGame添加：\n      // gameManager: 游戏管理器实例，提供游戏状态控制和自动操作功能\n      // customButtons: 自定义按钮数组，用于存储游戏控制按钮配置\n      // step: 当前游戏步骤计数\n      // difficulty: 游戏难度级别（默认为\"normal\"）\n      // seed: 随机种子，用于确保游戏结果可重现\n    };\n  },\n  computed: {\n    validBoxes() {\n      return this.getValidBoxes(this.sign);\n    },\n    lowCount() {\n      return this.cards1.filter((item) => this.grades[item] === 0).length;\n    },\n    highCount() {\n      return this.cards1.filter((item) => this.grades[item] === 1).length;\n    },\n  },\n  // 初始化\n  methods: {\n    init() {\n      this.sign = -1;\n      this.grade = -1;\n      this.cards1.splice(0);\n      this.cards2.splice(0);\n      let cards = this.cards1;\n      // return cards.splice(0, 0, ...this.modes)\n      for (let i = 0; i < this.number; i++) {\n        cards.push(i);\n        this.cards2.push(false); // 初始化cards2为36个false\n      }\n      shuffleCards(cards, this.number);\n    },\n    // 记录移动操作\n    recordMove(from, to, card, sign, signIndex) {\n      this.gameManager.recordOperation({\n        type: \"move\",\n        from: from,\n        to: to,\n        card: card,\n        sign: sign,\n        signIndex: signIndex,\n        timestamp: Date.now(),\n      });\n    },\n\n    // 记录翻转操作\n    recordFlip(card) {\n      this.gameManager.recordOperation({\n        type: \"flip\",\n        card: card,\n        timestamp: Date.now(),\n      });\n    },\n\n    // 处理撤销操作\n    handleUndo(operation) {\n      // 根据操作类型执行相应的撤销逻辑\n      switch (operation.type) {\n        case \"move\":\n          // 撤销移动操作\n          this.cards1.splice(operation.signIndex, 1, operation.sign);\n          this.cards1.splice(\n            operation.to,\n            1,\n            operation.card >= 0 ? operation.card : -1,\n          );\n          break;\n        case \"flip\":\n          // 撤销翻转操作\n          this.cards2[operation.card] = false; // 直接赋值而不是splice\n          break;\n      }\n    },\n\n    // 重写undo方法\n    undo() {\n      // 原代码中每执行一次undo会弹出两个操作，这里也保持一致\n      this.gameManager.undo();\n      this.gameManager.undo();\n    },\n\n    // 重写clickCard方法，使用GameStateManager记录操作\n    async clickCard(i, isAuto) {\n      let card = this.cards1[i];\n      if (this.grade < 0) {\n        this.grade = this.grades[card];\n      }\n      if (card >= 0 && !this.cards2[card]) {\n        this.cards2[card] = true; // 直接赋值而不是splice\n        this.recordFlip(card); // 使用GameStateManager记录操作\n        this.sign = -1;\n        if (!isAuto) {\n          this.gameManager.step(async () => {\n            await this.wait();\n            await this.stepFn();\n          });\n        }\n        return;\n      }\n      let grade = this.step % 2 == 0 ? this.grade : !this.grade;\n      if (this.sign >= 0 && this.grades[this.sign] != grade) {\n        this.sign =\n          card != this.sign && card >= 0 && this.grades[card] != grade\n            ? card\n            : -1;\n        return;\n      }\n      if (this.sign >= 0 && this.grades[this.sign] == grade) {\n        if (card >= 0 && this.grades[card] == grade) {\n          this.sign = this.sign == card ? -1 : card;\n          return;\n        }\n        if (this.validBoxes.indexOf(i) >= 0) {\n          let signIndex = this.cards1.indexOf(this.sign);\n          this.cards1.splice(signIndex, 1, -1);\n          this.cards1.splice(i, 1, this.sign);\n          this.recordMove(signIndex, i, card, this.sign, signIndex); // 使用GameStateManager记录操作\n          this.sign = -1;\n          if (card >= 0) {\n            if (this.lowCount <= 0) {\n              if (this.grade == 1) {\n                this.gameManager.setWin();\n              } else {\n                this.gameManager.setLose();\n              }\n            }\n            if (this.highCount <= 0) {\n              if (this.grade == 0) {\n                this.gameManager.setWin();\n              } else {\n                this.gameManager.setLose();\n              }\n            }\n            if (this.lowCount == 1 && this.highCount == 1) {\n              this.gameManager.setDraw();\n            }\n          }\n          if (!isAuto) {\n            this.gameManager.step(async () => {\n              await this.wait();\n              await this.stepFn();\n            });\n          }\n          return;\n        }\n      }\n      this.sign = card;\n    },\n\n    // 重写stepTwiceFn方法\n    async stepTwiceFn() {\n      await this.gameManager.step(async () => {\n        await this.stepFn();\n        await this.wait();\n        await this.stepFn();\n      });\n    },\n    getValidBoxes(item) {\n      let arr = [];\n      // let item = this.cards1[index];\n      let index = this.cards1.indexOf(item);\n      if (item < 0 || index < 0) {\n        return arr;\n      }\n      let mode = this.modes.indexOf(item);\n      let h = _modes[Math.floor(mode / 6)],\n        v = _modes[mode % 6];\n      if (index + v[0] * 6 < 36 && (index % 6) + v[1] < 6)\n        arr.push(index + v[0] * 6 + v[1]);\n      if (index - v[0] * 6 >= 0 && (index % 6) + v[1] < 6)\n        arr.push(index - v[0] * 6 + v[1]);\n      if (index + v[0] * 6 < 36 && (index % 6) - v[1] >= 0)\n        arr.push(index + v[0] * 6 - v[1]);\n      if (index - v[0] * 6 >= 0 && (index % 6) - v[1] >= 0)\n        arr.push(index - v[0] * 6 - v[1]);\n      if (index + h[1] * 6 < 36 && (index % 6) + h[0] < 6)\n        arr.push(index + h[1] * 6 + h[0]);\n      if (index - h[1] * 6 >= 0 && (index % 6) + h[0] < 6)\n        arr.push(index - h[1] * 6 + h[0]);\n      if (index + h[1] * 6 < 36 && (index % 6) - h[0] >= 0)\n        arr.push(index + h[1] * 6 - h[0]);\n      if (index - h[1] * 6 >= 0 && (index % 6) - h[0] >= 0)\n        arr.push(index - h[1] * 6 - h[0]);\n      return arr;\n    },\n    async stepFn() {\n      // 1.挪2.送3.翻4.翻吃5.坏翻6.中翻7.友8.躲9.敌10.吃\n      let temp = [];\n      let hide = [],\n        friends = [];\n      let grade = this.step % 2 == 0 ? this.grade : !this.grade;\n      let _this = this;\n      let moveFn = async function (from, to) {\n        _this.sign = -1;\n        await _this.clickCard(from, true);\n        await _this.wait();\n        await _this.clickCard(to, true);\n      };\n      for (let i = 0; i < this.cards1.length; i++) {\n        let item = this.cards1[i];\n        if (item < 0) {\n          temp[i] = temp[i] || 1;\n          continue;\n        }\n        if (!this.cards2[item]) {\n          temp[i] = temp[i] || 3;\n          hide.push(i);\n          continue;\n        }\n        if (this.grades[item] == grade) {\n          temp[i] = 7;\n          friends.push(i);\n          let boxes = this.getValidBoxes(item);\n          for (let b of boxes) {\n            let c = this.cards1[b];\n            if (c < 0) {\n              continue;\n            }\n            if (!this.cards2[c]) {\n              temp[b] = temp[b] == 5 || temp[b] == 6 ? 6 : 4;\n              continue;\n            }\n            if (this.grades[c] != grade) {\n              return await moveFn(i, b);\n            }\n          }\n          continue;\n        }\n        temp[i] = 9;\n        let boxes = this.getValidBoxes(item);\n        for (let b of boxes) {\n          let c = this.cards1[b];\n          if (c < 0) {\n            temp[b] = 2;\n            continue;\n          }\n          if (!this.cards2[c]) {\n            temp[b] = temp[b] == 4 || temp[b] == 6 ? 6 : 5;\n            continue;\n          }\n          if (this.grades[c] == grade) {\n            temp[b] = 8;\n          }\n        }\n      }\n      // 1.吃2.躲3.翻吃4.中翻5.翻6.挪7.坏翻8.送\n      for (let f of friends) {\n        let t = temp[f];\n        if (t == 8) {\n          let c = this.cards1[f];\n          let boxes = this.getValidBoxes(c);\n          for (let box of boxes) {\n            if (temp[box] == 1) {\n              return await moveFn(f, box);\n            }\n          }\n        }\n      }\n      let best = -1;\n      let worst = -1;\n      for (let i = 0; i < hide.length; i++) {\n        let h = hide[i];\n        let t = temp[h];\n        if (t == 4) {\n          return await this.clickCard(h, true);\n        }\n        if (t == 5) {\n          worst = h;\n          hide.splice(i, 1);\n          i--;\n        }\n        if (t == 6) {\n          best = h;\n        }\n      }\n      if (best >= 0) {\n        return await this.clickCard(best, true);\n      }\n      if (hide.length > 0) {\n        let random = Math.floor(seededRandom() * hide.length);\n        return await this.clickCard(hide[random], true);\n      }\n      let suicide = false;\n      let road = [];\n      let protectedRoad = [];\n      // 预先收集所有友方棋子可以到达的空位\n      let friendsReach = {};\n      for (let f of friends) {\n        let c = this.cards1[f];\n        let boxes = this.getValidBoxes(c);\n        for (let box of boxes) {\n          if (temp[box] == 1) {\n            friendsReach[box] = (friendsReach[box] || 0) + 1;\n          }\n        }\n      }\n      // 收集路径，区分受保护和普通路径\n      for (let f of friends) {\n        let c = this.cards1[f];\n        let boxes = this.getValidBoxes(c);\n        for (let box of boxes) {\n          if (temp[box] == 1) {\n            if (friendsReach[box] >= 2) {\n              protectedRoad.push([f, box]);\n            } else {\n              road.push([f, box]);\n            }\n          }\n          if (temp[box] == 2) {\n            suicide = [f, box];\n          }\n        }\n      }\n      // 优先移动到受保护的位置\n      if (protectedRoad.length > 0) {\n        let random = Math.floor(seededRandom() * protectedRoad.length);\n        return await moveFn(protectedRoad[random][0], protectedRoad[random][1]);\n      }\n      // 其次移动到普通空位\n      if (road.length > 0) {\n        let random = Math.floor(seededRandom() * road.length);\n        return await moveFn(road[random][0], road[random][1]);\n      }\n      if (worst >= 0) {\n        return await this.clickCard(worst, true);\n      }\n      if (suicide) {\n        return await moveFn(suicide[0], suicide[1]);\n      } else {\n        throw new Error(\"unkown error\");\n      }\n    },\n    \n    /**\n     * 渲染文本视图 - 显示当前游戏状态\n     * 用于终端交互式游戏\n     */\n    renderTextView() {\n      console.log('\\n╔════════════════════════════════════════════════╗');\n      console.log('║           国际象棋 (GridBattle)               ║');\n      console.log('╚════════════════════════════════════════════════╝');\n      console.log(`\\n步数: ${this.step}`);\n      console.log(`高子: ${this.highCount} | 低子: ${this.lowCount}\\n`);\n      \n      console.log('\\n图例:');\n      console.log('  ? = 未翻开  - = 空位置  H = 高子  L = 低子  [H/L] = 已选中');\n      \n      if (this.sign >= 0) {\n        const row = Math.floor(this.sign / 6);\n        const col = this.sign % 6;\n        console.log(`\\n当前选中: (${row},${col})`);\n        \n        const validMoves = this.validBoxes;\n        if (validMoves && validMoves.length > 0) {\n          const moves = validMoves.map(idx => {\n            const r = Math.floor(idx / 6);\n            const c = idx % 6;\n            return `(${r},${c})`;\n          }).join(', ');\n          console.log(`可移动到: ${moves}`);\n        }\n      }\n      \n      // 显示6x6棋盘\n      console.log('    0   1   2   3   4   5');\n      console.log('  ┌───┬───┬───┬───┬───┬───┐');\n      \n      for (let row = 0; row < 6; row++) {\n        let line = `${row} │`;\n        for (let col = 0; col < 6; col++) {\n          const idx = row * 6 + col;\n          const card = this.cards1[idx];\n          \n          if (this.cards2[card]) {\n            // 已翻开\n            const grade = this.grades[card];\n            const symbol = grade === 1 ? ' H ' : ' L '; // H=高子，L=低子\n            const isSelected = idx === this.sign;\n            line += isSelected ? `[${symbol.trim()}]` : symbol;\n          } else if (this.cards1[idx] >= 0) {\n            // 未翻开\n            line += ' ? ';\n          } else {\n            // 空位置\n            line += ' - ';\n          }\n          line += '│';\n        }\n        console.log(line);\n        \n        if (row < 5) {\n          console.log('  ├───┼───┼───┼───┼───┼───┤');\n        }\n      }\n      console.log('  └───┴───┴───┴───┴───┴───┘');\n      \n      return '渲染完成';\n    },\n    \n    /**\n     * 获取当前可用的操作列表\n     * 用于终端交互式游戏\n     * 使用工厂函数中统一实现的方法\n     */\n    \n    // 注意：以下方法由工厂函数添加并可在当前组件中访问：\n    // - wait(delay): 延迟函数\n    // - pass(): 自动模式方法（组件中未重写）\n    // - goon(): 重新开始方法（组件中未重写）\n    // - getAvailableActions(): 获取可用操作列表\n    // - setSeed(seed): 设置随机数种子\n    // - setDifficulty(level): 设置游戏难度（由strategyGame预设添加）\n    // - loadDelaySettings(): 加载延迟设置\n    // - handleSettingsChanged(settings): 处理设置变化事件\n    // - getCardPlaceholderText(): 获取卡片占位符文本\n    // - 注意：组件中重写了undo()方法\n  },\n  \n  // 以下方法由工厂函数GameComponentPresets.strategyGame添加：\n  // wait(): Promise<void> - 等待指定时间，用于游戏步骤延迟\n  // undo(): void - 撤销上一步操作（组件重写了此方法，一次撤销两个操作）\n  // pass(): void - 跳过当前步骤\n  // goon(): void - 继续游戏\n  // goBack(): void - 返回上一状态\n  // step(fn: Function): Promise<void> - 执行游戏步骤\n  // setDifficulty(level: string): void - 设置游戏难度\n  // executeMethodWithRenderToString(method: string, ...args: any[]): Promise<void> - 执行方法并渲染\n  // getActions(): Array<Object> - 获取当前可用的操作列表\n  // setSeed(seed: number): void - 设置随机种子\n  // getAvailableActions(): Array<Object> - 获取可用操作（终端交互用）\n  // setWin(): void - 设置游戏胜利状态\n  // setLose(): void - 设置游戏失败状态\n  // setDraw(): void - 设置游戏平局状态\n};\n\n// 使用工厂函数创建增强的GridBattle组件并导出\nexport default GameComponentPresets.strategyGame(GridBattle, 1200);\n\n/**\n * 工厂函数GameComponentPresets.strategyGame为GridBattle组件添加的功能：\n * \n * 基础增强功能（来自createEnhancedGameComponent）：\n * - gameManager属性：提供游戏状态管理、自动模式控制和步骤执行\n * - customButtons属性：存储自定义按钮配置\n * - displayButtons计算属性：决定显示哪些游戏控制按钮\n * - gameControlsConfig计算属性：游戏控制配置\n * - wait()、undo()、pass()、goon()等方法：游戏控制方法\n * - created和beforeUnmount生命周期钩子：管理游戏状态和事件监听\n * - setWin()、setLose()、setDraw()方法：设置游戏结果状态\n * - setSeed()方法：设置随机种子\n * - getAvailableActions()方法：获取可用操作（终端交互用）\n * \n * strategyGame特有功能：\n * - step属性：游戏步骤计数器（组件中已使用）\n * - difficulty属性：游戏难度配置（默认为\"normal\"）\n * - seed属性：随机种子，确保游戏可重现\n * - getActions()方法：获取当前可用的操作列表\n * - setDifficulty()方法：设置游戏难度\n * - 提供策略游戏相关的自动操作和状态管理\n * - 支持自动步骤延迟配置（此处设置为1200ms）\n * \n * 注意事项：\n * - 组件重写了undo()方法，每调用一次会撤销两个操作\n * - 组件使用了gameManager来记录操作和管理历史记录\n */\n","import { render } from \"./Chess.vue?vue&type=template&id=f1b2a642&scoped=true\"\nimport script from \"./Chess.vue?vue&type=script&lang=js\"\nexport * from \"./Chess.vue?vue&type=script&lang=js\"\n\nimport \"./Chess.vue?vue&type=style&index=0&id=f1b2a642&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-f1b2a642\"]])\n\nexport default __exports__","import { createRouter, createWebHashHistory } from \"vue-router\";\nimport Sum from \"@/components/sum.vue\";\nimport Fish from \"@/components/fish.vue\";\nimport point24 from \"@/components/point24.vue\";\nimport Month from \"@/components/month.vue\";\nimport Tortoise from \"@/components/Tortoise.vue\";\nimport Sort from \"@/components/Sort.vue\";\nimport Pairs from \"@/components/Pairs.vue\";\nimport Spider from \"@/components/Spider.vue\";\nimport GridBattle from \"@/components/Chess.vue\";\n\nconst routes = [\n  {\n    path: \"/\",\n    redirect: \"/month\",\n  },\n  {\n    path: \"/month\",\n    component: Month,\n  },\n  {\n    path: \"/fish\",\n    component: Fish,\n  },\n  {\n    path: \"/point24\",\n    component: point24,\n  },\n  {\n    path: \"/blackjack\",\n    component: Sum,\n  },\n  {\n    path: \"/Tortoise\",\n    component: Tortoise,\n  },\n  {\n    path: \"/Sort\",\n    component: Sort,\n  },\n  {\n    path: \"/Pairs\",\n    component: Pairs,\n  },\n  {\n    path: \"/Spider\",\n    component: Spider,\n  },\n  {\n    path: \"/GridBattle\",\n    component: GridBattle,\n  },\n];\n\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes,\n});\n\nexport default router;\n","import { createStore } from \"vuex\";\n\nexport default createStore({\n  state: {},\n  mutations: {},\n  actions: {},\n  modules: {},\n});\n","import { createApp } from \"vue\";\nimport App from \"./App.vue\";\nimport router from \"./router\";\nimport store from \"./store\";\n// import { preload } from \"./utils/help.js\";\n\n// preload();\n\nconst app = createApp(App);\napp.use(router);\napp.use(store);\napp.mount(\"#app\");\n","/**\n * 卡片工具函数\n * 提供卡片相关的常量和工具函数\n */\n\n// 卡片花色\nexport const CARD_TYPES = [\"♥\", \"♠\", \"♦\", \"♣\"];\n\n// 卡片点数\nexport const CARD_POINTS = [\"A\", 2, 3, 4, 5, 6, 7, 8, 9, 10, \"J\", \"Q\", \"K\", \"JOKER\"];\n\n/**\n * 计算卡片占位符文本\n * @param {number|string} cardId - 卡片ID\n * @param {string[]} types - 卡片花色数组\n * @param {Array<string|number>} points - 卡片点数数组\n * @returns {string} 卡片占位符文本\n */\nexport function getCardPlaceholderText(cardId, types = CARD_TYPES, points = CARD_POINTS) {\n  if (typeof cardId === 'number') {\n    const suit = cardId < 52 ? types[cardId % 4] : \"\";\n    const point = points[cardId >> 2];\n    return `${suit}${point}`;\n  }\n  return '';\n}\n\n/**\n * 获取卡片图像URL\n * @param {number|string} cardId - 卡片ID\n * @returns {string} 卡片图像URL\n */\nexport function getCardImageSrc(cardId) {\n  return `./static/${cardId}.webp`;\n}\n\n/**\n * 导出默认对象，方便一次性导入\n */\nexport default {\n  CARD_TYPES,\n  CARD_POINTS,\n  getCardPlaceholderText,\n  getCardImageSrc\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"js/\" + chunkId + \".\" + {\"82\":\"d355a5cf\",\"279\":\"807a068c\",\"366\":\"bf8d4734\",\"526\":\"f4a73ab4\",\"638\":\"34ff1485\",\"957\":\"903a59fc\"}[chunkId] + \".js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"css/\" + chunkId + \".\" + {\"82\":\"0ec60025\",\"279\":\"94d13aed\",\"366\":\"e1b96006\",\"526\":\"b5aab8a0\",\"638\":\"c478ccc4\",\"957\":\"e4b378c9\"}[chunkId] + \".css\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var inProgress = {};\nvar dataWebpackPrefix = \"tsubaki-game-library:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = function(url, done, key, chunkId) {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = function(prev, event) {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach(function(fn) { return fn(event); });\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"\";","if (typeof document === \"undefined\") return;\nvar createStylesheet = function(chunkId, fullhref, oldTag, resolve, reject) {\n\tvar linkTag = document.createElement(\"link\");\n\n\tlinkTag.rel = \"stylesheet\";\n\tlinkTag.type = \"text/css\";\n\tif (__webpack_require__.nc) {\n\t\tlinkTag.nonce = __webpack_require__.nc;\n\t}\n\tvar onLinkComplete = function(event) {\n\t\t// avoid mem leaks.\n\t\tlinkTag.onerror = linkTag.onload = null;\n\t\tif (event.type === 'load') {\n\t\t\tresolve();\n\t\t} else {\n\t\t\tvar errorType = event && event.type;\n\t\t\tvar realHref = event && event.target && event.target.href || fullhref;\n\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + errorType + \": \" + realHref + \")\");\n\t\t\terr.name = \"ChunkLoadError\";\n\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n\t\t\terr.type = errorType;\n\t\t\terr.request = realHref;\n\t\t\tif (linkTag.parentNode) linkTag.parentNode.removeChild(linkTag)\n\t\t\treject(err);\n\t\t}\n\t}\n\tlinkTag.onerror = linkTag.onload = onLinkComplete;\n\tlinkTag.href = fullhref;\n\n\n\tif (oldTag) {\n\t\toldTag.parentNode.insertBefore(linkTag, oldTag.nextSibling);\n\t} else {\n\t\tdocument.head.appendChild(linkTag);\n\t}\n\treturn linkTag;\n};\nvar findStylesheet = function(href, fullhref) {\n\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n\tfor(var i = 0; i < existingLinkTags.length; i++) {\n\t\tvar tag = existingLinkTags[i];\n\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return tag;\n\t}\n\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n\tfor(var i = 0; i < existingStyleTags.length; i++) {\n\t\tvar tag = existingStyleTags[i];\n\t\tvar dataHref = tag.getAttribute(\"data-href\");\n\t\tif(dataHref === href || dataHref === fullhref) return tag;\n\t}\n};\nvar loadStylesheet = function(chunkId) {\n\treturn new Promise(function(resolve, reject) {\n\t\tvar href = __webpack_require__.miniCssF(chunkId);\n\t\tvar fullhref = __webpack_require__.p + href;\n\t\tif(findStylesheet(href, fullhref)) return resolve();\n\t\tcreateStylesheet(chunkId, fullhref, null, resolve, reject);\n\t});\n}\n// object to store loaded CSS chunks\nvar installedCssChunks = {\n\t524: 0\n};\n\n__webpack_require__.f.miniCss = function(chunkId, promises) {\n\tvar cssChunks = {\"82\":1,\"279\":1,\"366\":1,\"526\":1,\"638\":1,\"957\":1};\n\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n\t\tpromises.push(installedCssChunks[chunkId] = loadStylesheet(chunkId).then(function() {\n\t\t\tinstalledCssChunks[chunkId] = 0;\n\t\t}, function(e) {\n\t\t\tdelete installedCssChunks[chunkId];\n\t\t\tthrow e;\n\t\t}));\n\t}\n};\n\n// no hmr\n\n// no prefetching\n\n// no preloaded","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n__webpack_require__.f.j = function(chunkId, promises) {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise(function(resolve, reject) { installedChunkData = installedChunks[chunkId] = [resolve, reject]; });\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = function(event) {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktsubaki_game_library\"] = self[\"webpackChunktsubaki_game_library\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(5173); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["GameSettingsManager","constructor","this","listeners","getDelay","gameName","gameDelay","localStorage","getItem","parseInt","globalDelay","saveDelay","delay","applyToAll","setItem","toString","keys","Object","forEach","key","startsWith","removeItem","notifyListeners","reset","clear","addListener","callback","push","removeListener","index","indexOf","splice","error","console","id","_createElementBlock","_hoisted_1","_createVNode","_component_router_view","script","__exports__","render","class","style","_createBlock","_component_GameLayout","_mergeProps","_ctx","gameLayoutProps","text","action","goon","backgroundColor","onGoon","_withCtx","_createElementVNode","src","_hoisted_2","_toDisplayString","score1","_hoisted_3","_hoisted_4","_Fragment","_renderList","arr1","item","_component_CardImage","_hoisted_5","_hoisted_6","arr2","_hoisted_7","_hoisted_8","score2","_component_GameControls","buttons","stepDisabled","autoDisabled","onHitBtn","handleHitBtn","onPassBtn","pass","GameStateManager","options","hitflag","winflag","loseflag","drawflag","history","isAutoRunning","autoInterval","autoStepDelay","maxSteps","_listeners","init","stopAuto","emit","recordOperation","operation","backword","unshift","undo","length","pop","getStepCount","canUndo","startAuto","stepCallback","log","stepCount","wait","clearInterval","setAutoStepDelay","getAutoStepDelay","actualDelay","Promise","resolve","setTimeout","step","setWin","setLose","setDraw","resetCallback","on","event","listener","off","data","getState","setState","state","assign","getDefaultComputedProperties","manager","gameManager","undoDisabled","restartDisabled","canOperate","gameState","shuffleCards","cards","num","rand","tmp","last","i","Math","floor","seededRandom","equalArray","checkDeadForeach","array","newest","j","count","join","values","s","setSeed","seed","GameComponentPresets","cardGame","baseComponent","createEnhancedGameComponent","hasUndo","hasRestart","simpleGame","customInit","title","includes","stepFn","async","hit","arr","cards2","pairGame","methods","customCleanup","_timer","puzzleGame","showHint","strategyGame","difficulty","setDifficulty","level","actionGame","score","combo","addScore","points","resetCombo","customGame","config","features","customLogic","feature","gameTime","_gameTimer","startTimer","setInterval","stopTimer","highScore","updateScore","delays","easy","normal","hard","call","gameRules","month","fish","point24","Tortoise","Sort","Pairs","Spider","GridBattle","blackjack","GameResultModal","GameControls","GameLayout","CardImage","computed","components","baseData","types","CARD_TYPES","point","CARD_POINTS","customButtons","created","Date","now","loadDelaySettings","_settingsChangeHandler","handleSettingsChanged","bind","gameSettingsManager","handleUndo","renderTextView","handleHistoryUpdate","autoCalc","beforeUnmount","displayButtons","gameControlsConfig","defaultButtons","label","disabled","currentGame","$route","path","substring","gameRule","collectedGameButtons","filter","button","getCardPlaceholderText","seen","WeakMap","pathStack","replacer","value","has","currentPath","set","beforeState","JSON","stringify","$data","afterState","warn","settings","getAvailableActions","actions","actionToMethodMap","methodName","method","toUpperCase","args","a","window","name","template","props","defineAsyncComponent","Sum","cardsChg","number","component","refillCards","currentCard","shift","getScore","player","flag","remainingCards","playerScore","playerCards","map","c","dealerScore","dealerCards","SumComponent","onStep","onAuto","_component_message","show1","_cache","_normalizeStyle","opacity","diff1","diff2","diff3","score3","diff4","_hoisted_9","score4","_hoisted_10","_hoisted_11","_normalizeClass","ssArr","flyin1","flyin2","flyout1","flyout2","message","Fish","cards1","cards3","cards4","time","handle","findIndex","cardCounts","padStart","cardTexts","watch","val","old","FishComponent","style1","onUndo","_component_point24card","card","choose","sign","onClick","$event","clickSign","signs","calc","toFixed","clickCard","point24card","opts","process","nums","len","aim","numij","k","abs","fns","b","Number","isFinite","num1","num2","first","Point24","type","timestamp","combined","left","right","Error","temp","index1","index2","result","f","temp00","temp02","l","r","formulaToString","formula","Array","isArray","operator","operatorSymbol","leftStr","rightStr","String","undefined","formulaStr","h","idx","Point24Component","class1","visibleCards","cardId","Month","months","count13","MonthComponent","originalItem","shanshuo","check","done","next","top","up","next_i","max","fn","m","d","nextCards","signIndex","signCard","CANVAS_ROWS","CANVAS_COLS","canvas","fill","CARD_ROWS","CARD_COLS","LAYOUT_WIDTH","LAYOUT_HEIGHT","activeCards","posIdx","mapInfo","canClick","isSelected","parseFloat","zIndex","cardText","sort","startCol","round","startRow","safeStartRow","min","safeStartCol","row","col","canvasRow","canvasCol","char","borderedCanvas","repeat","TortoiseComponent","n","height","canMoveCard","hide","getCurrentCandidateCard","createCandidate","targetCard","slotIndex","context","candidatePriority","t","currentTargetIdx","ruleBasedScore","currentCandidate","_getters","slotPriority","excludeReason","_feature2","matchNextCard","adjacentEmptyCount","columnEmptyCount","_deep","deep","_winProbability","simulatedCards","slotId","estimateWinProbability","_diff","_feature0","_feature1","_feature3","_feature4","_feature5","countEmptyInColumn","_feature6","countEmptyAbove","_feature7","countEmptyBelow","_feature8","_feature9","_feature10","_feature11","countCardsAbove","_feature12","countCorrectBelow","_feature13","countSameRankCandidates","_feature14","countPossibleMoves","_feature15","calculateEmptyEntropy","_feature16","countRestoredCards","_feature17","matchMode","_feature18","_feature19","_feature20","isBetterCandidate","candidateA","candidateB","valueA","valueB","gameEvaluationMethods","calculateRuleBasedPriority","slotInfo","candidateCard","candidateIdx","slotPrevCard","colSize","slotRow","candidateCol","candidateRow","slotPrevRank","candidateRank","candidateSuit","candidateGroup","candidateScore","prevPosInCandidateCol","prevCardInCandidateCol","prevRankInCandidateCol","prevSuitInCandidateCol","prevGroupInCandidateCol","matchNextCardScore","nextPosInCandidateCol","nextCardInCandidateCol","nextRankInCandidateCol","nextSuitInCandidateCol","nextGroupInCandidateCol","colStart","compareRuleBasedPriority","scoreA","scoreB","colIdx","colEnd","pos","slotIdx","cRank","cSuit","expectedRank","slot","prevCard","prevRank","targetRank","cardGroup","suit","emptyPerCol","totalEmpty","entropy","p","log2","cards1Array","card_group","cardIdx","restoredCount","rank","targetGroup","expectedPosition","allBelowCorrect","checkRank","checkPos","cardAtPos","cardAtPosRank","cardAtPosSuit","cardAtPosGroup","totalCols","totalScore","maxScore","rowScore","evaluateRowScore","blockPenalty","calculateBlockPenalty","baseScore","finalScore","emptySlotsAbove","countEmptySlotsAbove","cardRank","cardSuit","expectedGroup","checkRowBelowCorrect","checkRow","penalty","upperCard","upperRank","possibleMoves","sign_index","candidateIntervals","currentCandidates","$nextTick","updateAllCandidateCycling","beforeDestroy","stopCandidateCycling","startCandidateCycling","getCandidateCardsForSlot","candidates","findAllCardsByRankOffset","currentIndex","calculateStateHash","isStateHashRepeated","hash","find","record","stateHash","recordMove","from","to","executeMove","cardToMove","targetEmptyIndex","cardToMoveIndex","emptySlot","findNextCard","updateN","errorState","findPrevCard","document","scrollTop","wrapper","querySelector","documentElement","body","evaluateCandidateScore","candidate","selectBestCandidate","bestScore","bestIdx","findCardByRankOffset","offset","condition","returnAll","target_rank","target_card","nextIdx","over","prior","slotsToResetPriority","priority","_in","able","bestCard","dead","candidatePriorities","Map","prevFn","prev_c","accumulatedPriority","maxPriority","next_idx","subPriority","get","nextFn","next_c","emptySlotId","card_at_n","prevCandidates","prevCandidate","candidatesWithPriority","tempCards","simulatedHash","allCandidates","ind","road","bestCandidate","candidateInfo","allPrioritiesZero","validSlotCount","setMatchMode","mode","getMatchModeDescription","descriptions","targetSlotCard","targetSlot","colWidth","header","headerRow","separator","footer","slice","rowStr","cellContent","highlight","emptySlotIndex","prevCardIndex","emptyLabel","firstCandidate","candidateText","canMove","isTarget","padding","leftPad","rightPad","sendCustomButtons","nextMode","description","handler","SortComponent","cardPositions","selectedCard","secondSelectedCard","matchedCards","seenCards","totalCards","rowOrPositionIndex","positionIndex","found","gridColumns","isMatched","isGameOver","checkGameCompletion","groupStartIndex","targetCardId","seenInGroupCount","matchedCount","gridRows","line","gridPosition","isFlipped","isSeen","prefix","padEnd","PairsComponent","calss","ref","drag","dragItem","turn","fresh","dragCard","enterItem","start","end","move","color","onMouseenter","enter","onTouchenter","onMouseleave","leave","onTouchleave","getPosition","e","isTouch","touches","clientX","clientY","updateMoveData","el","_moveData","position","offsetX","startPosition","offsetY","prevent","bubbles","cancelable","preventDefault","stopPropagation","detail","dispatchEvent","CustomEvent","listenEvents","events","handles","addEventListener","mounted","binding","vnode","_isInitMove","page","modifiers","isMove","_start","cancel","removeEventListener","_end","_move","passive","install","Vue","directive","directives","setupGameStateListeners","moveEnter","$refs","middleBox","downBox","middleEnters","downEnters","middle","down","$forceUpdate","findPos","addAndCheck","res","checkDown","up1","up2","pos1","pos2","top1","top2","checkUp","checkMove","skipCheck","addCard","lock","add","componentInstance","vm","dataset","offsetLeft","offsetTop","cardWidth","catch","$el","_cardImageRoot","className","match","reduce","sum","deckCards","col1","deckDisplay","col1Last3","row2Data","lastCard","row3Data","cardsDisplay","maxLines","split","paddedData","lines","lineIdx","lineContent","container","offsetWidth","SpiderComponent","width","stepTwiceFn","grades","grade","validBoxes","lowCount","highCount","_modes","modes","getValidBoxes","recordFlip","isAuto","v","friends","_this","moveFn","boxes","box","best","worst","random","suicide","protectedRoad","friendsReach","validMoves","moves","symbol","trim","routes","redirect","router","createRouter","createWebHashHistory","createStore","mutations","modules","app","createApp","App","use","store","mount","getCardImageSrc","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","deferred","O","chunkIds","notFulfilled","Infinity","fulfilled","every","getter","__esModule","definition","o","defineProperty","enumerable","chunkId","all","promises","u","miniCssF","g","globalThis","Function","obj","prop","prototype","hasOwnProperty","inProgress","dataWebpackPrefix","url","needAttach","scripts","getElementsByTagName","getAttribute","createElement","charset","nc","setAttribute","onScriptComplete","prev","onerror","onload","clearTimeout","timeout","doneFns","parentNode","removeChild","target","head","appendChild","Symbol","toStringTag","createStylesheet","fullhref","oldTag","reject","linkTag","rel","nonce","onLinkComplete","errorType","realHref","href","err","code","request","insertBefore","nextSibling","findStylesheet","existingLinkTags","tag","dataHref","existingStyleTags","loadStylesheet","installedCssChunks","miniCss","cssChunks","then","installedChunks","installedChunkData","promise","loadingEnded","realSrc","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","__webpack_exports__"],"sourceRoot":""}