{"version":3,"file":"js/app.dc7535d2.js","mappings":"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","sources":["webpack://tsubaki-game-library/./src/utils/gameSettingsManager.js","webpack://tsubaki-game-library/./src/App.vue","webpack://tsubaki-game-library/./src/App.vue?7ccd","webpack://tsubaki-game-library/./src/components/sum.vue","webpack://tsubaki-game-library/./src/utils/gameStateManager.js","webpack://tsubaki-game-library/./src/utils/help.js","webpack://tsubaki-game-library/./src/utils/gameComponentPresets.js","webpack://tsubaki-game-library/./src/utils/gameComponentFactory.js","webpack://tsubaki-game-library/./src/components/sum.js","webpack://tsubaki-game-library/./src/components/sum.vue?4113","webpack://tsubaki-game-library/./src/components/fish.vue","webpack://tsubaki-game-library/./src/components/fish.js","webpack://tsubaki-game-library/./src/components/fish.vue?23f9","webpack://tsubaki-game-library/./src/components/point24.vue","webpack://tsubaki-game-library/./src/components/point24.js","webpack://tsubaki-game-library/./src/components/point24.vue?2f47","webpack://tsubaki-game-library/./src/components/month.vue","webpack://tsubaki-game-library/./src/components/month.js","webpack://tsubaki-game-library/./src/components/month.vue?5f25","webpack://tsubaki-game-library/./src/components/Tortoise.vue","webpack://tsubaki-game-library/./src/components/Tortoise.js","webpack://tsubaki-game-library/./src/components/Tortoise.vue?68f0","webpack://tsubaki-game-library/./src/components/Sort.vue","webpack://tsubaki-game-library/./src/components/candidateUtils.js","webpack://tsubaki-game-library/./src/components/Sort.js","webpack://tsubaki-game-library/./src/components/Sort.vue?7b36","webpack://tsubaki-game-library/./src/components/Pairs.vue","webpack://tsubaki-game-library/./src/components/Pairs.js","webpack://tsubaki-game-library/./src/components/Pairs.vue?b359","webpack://tsubaki-game-library/./src/components/Spider.vue","webpack://tsubaki-game-library/./src/directives/move.js","webpack://tsubaki-game-library/./src/components/Spider.js","webpack://tsubaki-game-library/./src/components/Spider.vue?2441","webpack://tsubaki-game-library/./src/components/Chess.vue","webpack://tsubaki-game-library/./src/components/Chess.js","webpack://tsubaki-game-library/./src/components/Chess.vue?6fd7","webpack://tsubaki-game-library/./src/components/TowerHanoi.vue","webpack://tsubaki-game-library/./src/components/TowerHanoi.js","webpack://tsubaki-game-library/./src/components/TowerHanoi.vue?14d7","webpack://tsubaki-game-library/./src/components/NumberMaze.vue","webpack://tsubaki-game-library/./src/components/NumberMaze.js","webpack://tsubaki-game-library/./src/components/NumberMaze.vue?b13d","webpack://tsubaki-game-library/./src/components/NumberPuzzle.vue","webpack://tsubaki-game-library/./src/components/NumberPuzzle.js","webpack://tsubaki-game-library/./src/components/NumberPuzzle.vue?9bb0","webpack://tsubaki-game-library/./src/components/NumberSequence.vue","webpack://tsubaki-game-library/./src/components/NumberSequence.js","webpack://tsubaki-game-library/./src/components/NumberSequence.vue?432e","webpack://tsubaki-game-library/./src/components/Junqi.vue","webpack://tsubaki-game-library/./src/components/Junqi.js","webpack://tsubaki-game-library/./src/components/Junqi.vue?ca31","webpack://tsubaki-game-library/./src/router/index.js","webpack://tsubaki-game-library/./src/store/index.js","webpack://tsubaki-game-library/./src/main.js","webpack://tsubaki-game-library/./src/utils/cardUtils.js","webpack://tsubaki-game-library/webpack/bootstrap","webpack://tsubaki-game-library/webpack/runtime/chunk loaded","webpack://tsubaki-game-library/webpack/runtime/compat get default export","webpack://tsubaki-game-library/webpack/runtime/define property getters","webpack://tsubaki-game-library/webpack/runtime/ensure chunk","webpack://tsubaki-game-library/webpack/runtime/get javascript chunk filename","webpack://tsubaki-game-library/webpack/runtime/get mini-css chunk filename","webpack://tsubaki-game-library/webpack/runtime/global","webpack://tsubaki-game-library/webpack/runtime/hasOwnProperty shorthand","webpack://tsubaki-game-library/webpack/runtime/load script","webpack://tsubaki-game-library/webpack/runtime/make namespace object","webpack://tsubaki-game-library/webpack/runtime/publicPath","webpack://tsubaki-game-library/webpack/runtime/css loading","webpack://tsubaki-game-library/webpack/runtime/jsonp chunk loading","webpack://tsubaki-game-library/webpack/startup"],"sourcesContent":["/**\n * 游戏设置管理器\n * 统一管理游戏延迟设置的存储和读取\n */\n\nclass GameSettingsManager {\n  constructor() {\n    this.listeners = [];\n  }\n\n  /**\n   * 获取指定游戏的延迟设置\n   * @param {string} gameName - 游戏名称\n   * @returns {number} 延迟时间（毫秒）\n   */\n  getDelay(gameName) {\n    // 优先查找游戏特定设置\n    const gameDelay = localStorage.getItem(`game-delay-${gameName}`);\n    if (gameDelay) {\n      return parseInt(gameDelay);\n    }\n\n    // 其次查找全局设置\n    const globalDelay = localStorage.getItem('game-global-delay');\n    if (globalDelay) {\n      return parseInt(globalDelay);\n    }\n\n    // 返回默认值\n    return 500;\n  }\n\n  /**\n   * 保存延迟设置\n   * @param {string} gameName - 游戏名称（如果为空则为全局设置）\n   * @param {number} delay - 延迟时间（毫秒）\n   * @param {boolean} applyToAll - 是否应用到所有游戏\n   */\n  saveDelay(gameName, delay, applyToAll = false) {\n    if (applyToAll) {\n      // 应用到全部游戏\n      localStorage.setItem('game-global-delay', delay.toString());\n      // 清除所有游戏特定的设置\n      const keys = Object.keys(localStorage);\n      keys.forEach(key => {\n        if (key.startsWith('game-delay-') && key !== 'game-global-delay') {\n          localStorage.removeItem(key);\n        }\n      });\n    } else {\n      // 仅应用到当前游戏\n      if (gameName) {\n        localStorage.setItem(`game-delay-${gameName}`, delay.toString());\n      }\n    }\n\n    // 通知所有监听器\n    this.notifyListeners(delay, applyToAll, gameName);\n  }\n\n  reset() {\n    localStorage.clear();\n  }\n\n  /**\n   * 添加设置变化监听器\n   * @param {Function} callback - 回调函数\n   */\n  addListener(callback) {\n    this.listeners.push(callback);\n  }\n\n  /**\n   * 移除设置变化监听器\n   * @param {Function} callback - 回调函数\n   */\n  removeListener(callback) {\n    const index = this.listeners.indexOf(callback);\n    if (index > -1) {\n      this.listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * 通知所有监听器\n   * @param {number} delay - 延迟时间\n   * @param {boolean} applyToAll - 是否应用到所有游戏\n   * @param {string} gameName - 游戏名称\n   */\n  notifyListeners(delay, applyToAll, gameName) {\n    this.listeners.forEach(callback => {\n      try {\n        callback({ delay, applyToAll, gameName });\n      } catch (error) {\n        console.error('Error in settings listener:', error);\n      }\n    });\n  }\n}\n\n// 导出单例\nexport default new GameSettingsManager();\n","<template>\n  <div id=\"app\">\n    <router-view />\n  </div>\n</template>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #dfcdc3;\n  width: 100%;\n  height: 100vh;\n  margin: 0;\n  padding: 0;\n  overflow: hidden;\n}\n</style>\n","import { render } from \"./App.vue?vue&type=template&id=517c11fd\"\nconst script = {}\n\nimport \"./App.vue?vue&type=style&index=0&id=517c11fd&lang=css\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <GameLayout\n    v-bind=\"gameLayoutProps\"\n    :win-buttons=\"[{ label: 'GO ON', action: 'goon', callback: goon }]\"\n    :win-modal-style=\"{ backgroundColor: 'rgba(0, 0, 0, 0.7)' }\"\n    :win-custom-class=\"'lose'\"\n    :lose-buttons=\"[{ label: 'AGAIN', action: 'goon', callback: goon }]\"\n    :lose-modal-style=\"{ backgroundColor: 'rgba(0, 0, 0, 0.7)' }\"\n    :lose-custom-class=\"'lose'\"\n    :draw-buttons=\"[{ label: 'GO ON', action: 'goon', callback: goon }]\"\n    :draw-modal-style=\"{ backgroundColor: 'rgba(0, 0, 0, 0.7)' }\"\n    :draw-custom-class=\"'draw lose'\"\n    @goon=\"goon\"\n  >\n    <template #game-content>\n      <div class=\"row center\">\n        <img class=\"avatar\" :src=\"'./static/avatar/17.webp'\" />\n        <span class=\"scrore\">{{ score1 }}</span>\n      </div>\n      <div class=\"row\">\n        <div>\n          <ul class=\"cardsul\">\n            <CardImage\n              v-for=\"item in arr1\"\n              :key=\"item.id\"\n              class=\"card\"\n              :card-id=\"item.id\"\n            />\n          </ul>\n        </div>\n      </div>\n      <div class=\"row\" style=\"margin-top: 0.625rem\">\n        <div>\n          <ul class=\"cardsul reverse\">\n            <CardImage\n              v-for=\"item in arr2\"\n              :key=\"item.id\"\n              class=\"card\"\n              :card-id=\"item.id\"\n            />\n          </ul>\n        </div>\n      </div>\n      <div class=\"row center\">\n        <img class=\"avatar\" :src=\"'./static/avatar/32.webp'\" />\n        <span class=\"scrore\">{{ score2 }}</span>\n      </div>\n    </template>\n    <template #bottom-controls>\n      <GameControls\n        :buttons=\"[\n          {\n            label: 'HIT',\n            action: 'hitBtn',\n            disabled: stepDisabled,\n          },\n          {\n            label: 'PASS',\n            action: 'passBtn',\n            disabled: autoDisabled,\n          },\n        ]\"\n        @hitBtn=\"handleHitBtn\"\n        @passBtn=\"pass\"\n      />\n    </template>\n  </GameLayout>\n</template>\n\n<script>\nimport SumComponent from \"./sum.js\";\n\nconst component = SumComponent;\n\nexport default component;\n</script>\n\n<style scoped>\n@import url(\"./sum.css\");\n</style>\n","/**\n * 游戏状态管理类\n * 统一管理游戏状态、历史记录、撤销重做等功能\n */\nexport default class GameStateManager {\n  constructor(options = {}) {\n    // 游戏状态标志\n    this.hitflag = true; // 是否可以操作\n    this.winflag = false; // 胜利标志\n    this.loseflag = false; // 失败标志\n    this.drawflag = false; // 平局标志\n\n    // 历史记录\n    this.history = [];\n\n    // 自动模式相关\n    this.isAutoRunning = false;\n    this.autoInterval = null;\n    this.autoStepDelay = options.autoStepDelay / 10 || 500; // 默认单步延迟500ms，测试时除以10以缩短测试时间\n    this.maxSteps = options.maxSteps || 400; // 防止无限循环的最大步数，默认为400\n\n    // 事件监听器\n    this._listeners = {};\n  }\n\n  /**\n   * 初始化游戏状态\n   */\n  init() {\n    this.hitflag = true;\n    this.winflag = false;\n    this.loseflag = false;\n    this.drawflag = false;\n    this.history = [];\n    this.stopAuto();\n    this.emit(\"init\");\n  }\n\n  /**\n   * 记录游戏操作到历史记录\n   * @param {Object} operation - 操作对象\n   */\n  recordOperation(operation, backword = false) {\n    backword ? this.history.unshift(operation) : this.history.push(operation);\n    this.emit(\"historyUpdate\", this.history);\n  }\n\n  /**\n   * 撤销上一步操作\n   * @returns {Object|null} 撤销的操作对象，如果没有历史记录则返回null\n   */\n  undo() {\n    if (this.history.length === 0) {\n      return null;\n    }\n\n    const operation = this.history.pop();\n    this.emit(\"undo\", operation);\n    this.emit(\"historyUpdate\", this.history);\n\n    // 撤销后重置游戏状态标志\n    this.winflag = false;\n    this.loseflag = false;\n    this.drawflag = false;\n\n    return operation;\n  }\n\n  /**\n   * 获取历史记录长度\n   * @returns {number} 历史记录长度\n   */\n  getStepCount() {\n    return this.history.length;\n  }\n\n  /**\n   * 判断是否可以撤销\n   * @returns {boolean} 是否可以撤销\n   */\n  canUndo() {\n    return this.history.length > 0 && this.hitflag && !this.isAutoRunning;\n  }\n\n  /**\n   * 启动自动模式\n   * @param {Function} stepCallback - 每一步的回调函数\n   */\n  async startAuto(stepCallback) {\n    if (this.isAutoRunning || this.winflag || this.loseflag || this.drawflag) {\n      console.log(\n        `startAuto被跳过: isAutoRunning=${this.isAutoRunning}, win=${this.winflag}, lose=${this.loseflag}, draw=${this.drawflag}`,\n      );\n      return;\n    }\n\n    console.log(\"开始自动模式...\");\n    this.isAutoRunning = true;\n    this.emit(\"autoStart\");\n\n    let stepCount = 0;\n\n    try {\n      while (\n        this.isAutoRunning &&\n        !this.winflag &&\n        !this.loseflag &&\n        !this.drawflag &&\n        stepCount < this.maxSteps\n      ) {\n        await stepCallback();\n        stepCount++;\n\n        await this.wait();\n      }\n\n      if (stepCount >= this.maxSteps) {\n        console.log(`达到最大步数${this.maxSteps}`);\n        this.stopAuto();\n      }\n    } catch (error) {\n      console.error(\"Auto mode error:\", error);\n    } finally {\n      console.log(`自动模式结束，总共执行了${stepCount}步`);\n      this.stopAuto();\n    }\n  }\n\n  /**\n   * 停止自动模式\n   */\n  stopAuto() {\n    if (!this.isAutoRunning) {\n      return;\n    }\n\n    this.isAutoRunning = false;\n    if (this.autoInterval) {\n      clearInterval(this.autoInterval);\n      this.autoInterval = null;\n    }\n\n    this.emit(\"autoStop\");\n  }\n\n  /**\n   * 设置自动模式的延迟时间\n   * @param {number} delay - 延迟时间（毫秒）\n   */\n  setAutoStepDelay(delay) {\n    this.autoStepDelay = delay;\n    this.emit(\"delayChanged\", delay);\n  }\n\n  /**\n   * 获取当前的延迟时间\n   * @returns {number} 当前延迟时间（毫秒）\n   */\n  getAutoStepDelay() {\n    return this.autoStepDelay;\n  }\n\n  /**\n   * 等待指定时间，并在等待前触发事件\n   * @param {number} delay - 延迟时间（毫秒），如果为null则使用autoStepDelay\n   * @returns {Promise} 等待完成的Promise\n   */\n  async wait(delay = null) {\n    const actualDelay = delay !== null ? delay : this.autoStepDelay;\n    \n    // 触发等待前事件\n    this.emit(\"beforeWait\", actualDelay);\n    \n    // 执行实际的等待\n    return new Promise(resolve => setTimeout(resolve, actualDelay));\n  }\n\n  /**\n   * 执行单步操作\n   * @param {Function} stepCallback - 单步操作的回调函数\n   */\n  async step(stepCallback) {\n    if (!this.hitflag || this.winflag || this.loseflag || this.drawflag) {\n      return;\n    }\n\n    this.hitflag = false;\n    try {\n      await stepCallback();\n    } catch (error) {\n      console.error(\"Step error:\", error);\n    } finally {\n      this.hitflag = true;\n    }\n  }\n\n  /**\n   * 设置游戏胜利\n   */\n  setWin() {\n    this.winflag = true;\n    this.stopAuto();\n    this.emit(\"win\");\n  }\n\n  /**\n   * 设置游戏失败\n   */\n  setLose() {\n    this.loseflag = true;\n    this.stopAuto();\n    this.emit(\"lose\");\n  }\n\n  /**\n   * 设置游戏平局\n   */\n  setDraw() {\n    this.drawflag = true;\n    this.stopAuto();\n    this.emit(\"draw\");\n  }\n\n  /**\n   * 重置游戏\n   * @param {Function} resetCallback - 重置游戏的回调函数\n   */\n  reset(resetCallback) {\n    this.stopAuto();\n    this.init();\n    if (resetCallback) {\n      resetCallback();\n    }\n    this.emit(\"reset\");\n  }\n\n  /**\n   * 添加事件监听器\n   * @param {string} event - 事件名称\n   * @param {Function} listener - 事件监听器\n   */\n  on(event, listener) {\n    if (!this._listeners[event]) {\n      this._listeners[event] = [];\n    }\n    this._listeners[event].push(listener);\n  }\n\n  /**\n   * 移除事件监听器\n   * @param {string} event - 事件名称\n   * @param {Function} listener - 要移除的事件监听器\n   */\n  off(event, listener) {\n    if (!this._listeners[event]) {\n      return;\n    }\n    const index = this._listeners[event].indexOf(listener);\n    if (index > -1) {\n      this._listeners[event].splice(index, 1);\n    }\n  }\n\n  /**\n   * 触发事件\n   * @param {string} event - 事件名称\n   * @param {*} data - 事件数据\n   */\n  emit(event, data) {\n    if (!this._listeners[event]) {\n      return;\n    }\n    this._listeners[event].forEach((listener) => {\n      try {\n        listener(data);\n      } catch (error) {\n        console.error(`Error in event listener for ${event}:`, error);\n      }\n    });\n  }\n\n  /**\n   * 获取当前游戏状态\n   * @returns {Object} 游戏状态对象\n   */\n  getState() {\n    return {\n      hitflag: this.hitflag,\n      winflag: this.winflag,\n      loseflag: this.loseflag,\n      drawflag: this.drawflag,\n      step: this.getStepCount(),\n      isAutoRunning: this.isAutoRunning,\n    };\n  }\n\n  /**\n   * 设置游戏状态\n   * @param {Object} state - 要设置的游戏状态\n   */\n  setState(state) {\n    Object.assign(this, state);\n    this.emit(\"stateChange\", this.getState());\n  }\n\n  /**\n   * 获取默认计算属性对象\n   * 供Vue组件使用扩展运算符导入\n   * @returns {Object} 默认计算属性对象\n   */\n  static getDefaultComputedProperties() {\n    return {\n      // 基础状态标志\n      hitflag() {\n        const manager = this.gameManager;\n        return manager ? manager.hitflag : true;\n      },\n\n      overflag() {\n        const manager = this.gameManager;\n        return manager ? manager.winflag || manager.loseflag || manager.drawflag : false;\n      },\n\n      winflag() {\n        const manager = this.gameManager;\n        return manager ? manager.winflag : false;\n      },\n\n      loseflag() {\n        const manager = this.gameManager;\n        return manager ? manager.loseflag : false;\n      },\n\n      drawflag() {\n        const manager = this.gameManager;\n        return manager ? manager.drawflag : false;\n      },\n\n      // 步数计算属性\n      step() {\n        const manager = this.gameManager;\n        return manager ? manager.getStepCount() : 0;\n      },\n\n      // 按钮禁用状态计算属性\n      undoDisabled() {\n        const manager = this.gameManager;\n        return !manager || !manager.canUndo();\n      },\n\n      restartDisabled() {\n        const manager = this.gameManager;\n        return !manager || !manager.hitflag || manager.isAutoRunning;\n      },\n\n      stepDisabled() {\n        const manager = this.gameManager;\n        return (\n          !manager ||\n          !manager.hitflag ||\n          manager.isAutoRunning ||\n          this.overflag\n        );\n      },\n\n      autoDisabled() {\n        const manager = this.gameManager;\n        return (\n          !manager ||\n          !manager.hitflag ||\n          this.overflag\n        );\n      },\n\n      // 用于模板的便捷计算属性\n      canOperate() {\n        const manager = this.gameManager;\n        return manager && manager.hitflag && !manager.isAutoRunning;\n      },\n\n      // 游戏状态\n      gameState() {\n        const manager = this.gameManager;\n        return manager ? manager.getState() : {};\n      },\n    };\n  }\n}\n","export function shuffleCards(cards, num) {\n  let rand, tmp;\n  let last = num - 1;\n  for (let i = 0; i < 1000; i++) {\n    rand = Math.floor(seededRandom() * last);\n    tmp = cards[last];\n    cards[last] = cards[rand];\n    cards[rand] = tmp;\n  }\n  return cards;\n}\n\nexport function preload(cb) {\n  let arr = [];\n  for (let i = 0; i < 54; i++) {\n    arr.push(\n      new Promise((resolve) => {\n        let img = new Image();\n        img.src = \"./static/\" + i + \".webp\";\n        img.onload = () => {\n          cb && cb(img, i);\n          resolve(img);\n        };\n      }),\n    );\n  }\n  return Promise.all(arr);\n}\n\nfunction equalArray(arr1, arr2) {\n  if (!arr2) return false;\n  for (let i = 0; i < arr2.length; i++) {\n    if (arr1[i] != arr2[i]) return false;\n  }\n  return true;\n}\n\nexport function checkDeadForeach(array, newest) {\n  for (let i = 0; i < array.length >> 1; i++) {\n    if (!equalArray(array[i], newest)) {\n      continue;\n    }\n    let j;\n    let count = {};\n    for (j = 0; j < i; j++) {\n      count[array[i].join(\".\")] = count[array[i].join(\".\")]\n        ? count[array[i].join(\".\")] + 1\n        : 1;\n      if (!equalArray(array[j], array[j + i + 1])) break;\n    }\n    if (j >= i) {\n      if (i > 40) {\n        console.log(\"dead foreach\", array, newest, i);\n      }\n      return false;\n    }\n    let index = Object.values(count).indexOf(1);\n    if (index < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nlet s = 1234;\n\nexport function setSeed(seed) {\n  s = seed;\n}\n\nexport function seededRandom() {\n  s = (s * 9301 + 49297) % 233280;\n  return s / 233280.0;\n}\n","import { createEnhancedGameComponent } from './gameComponentFactory.js';\n\n/**\n * 快速创建游戏组件的便捷函数\n * 针对不同类型的游戏提供预设配置\n */\nexport const GameComponentPresets = {\n  // 纸牌游戏预设（支持撤销）\n  cardGame: (baseComponent, autoStepDelay = 500) =>\n    createEnhancedGameComponent(baseComponent, {\n      autoStepDelay,\n      hasUndo: true,\n      hasRestart: true,\n    }),\n\n  // 简单游戏预设（不支持撤销）\n  simpleGame: (baseComponent, autoStepDelay = 1000) =>\n    createEnhancedGameComponent(baseComponent, {\n      autoStepDelay,\n      hasUndo: false,\n      hasRestart: true,\n      customInit() {\n        // 为fish游戏添加特殊的stepFn和goon方法\n        if (this.title && this.title.includes(\"FISHING\")) {\n          this.stepFn = async () => {\n            await this.gameManager.step(async () => {\n              let cards = this[\"cards\" + ((this.step % 4) + 1)];\n              while (cards.length <= 0) {\n                this.gameManager.recordOperation();\n                cards = this[\"cards\" + ((this.step % 4) + 1)];\n              }\n              await this.hit(cards, this.arr);\n              // 检查胜利条件\n              let i;\n              for (i = 1; i <= 4; i++) {\n                if ((this.step % 4) + 1 != i && this[\"cards\" + i].length > 0) {\n                  break;\n                }\n              }\n              if (i > 4) {\n                this.gameManager.setWin();\n              } else {\n                this.gameManager.recordOperation();\n              }\n            });\n          };\n        }\n\n        // 为month游戏添加特殊的stepFn和goon方法\n        if (this.title && this.title === \"Month\") {\n          this.stepFn = async () => {\n            // 检查失败条件\n            if (this.cards2[12] >= 4) {\n              this.gameManager.setLose();\n            }\n            await this.gameManager.step(async () => {\n              await this.hit();\n            });\n          };\n        }\n      },\n    }),\n\n  // 配对游戏预设\n  pairGame: (baseComponent, autoStepDelay = 500, methods = {}) =>\n    createEnhancedGameComponent(baseComponent, {\n      autoStepDelay,\n      hasUndo: false,\n      hasRestart: true,\n      methods,\n      customCleanup() {\n        // 清理定时器\n        if (this._timer) {\n          clearInterval(this._timer);\n        }\n      },\n    }),\n\n  // 益智游戏预设\n  puzzleGame: (baseComponent, autoStepDelay = 800, methods = {}) =>\n    createEnhancedGameComponent(baseComponent, {\n      autoStepDelay,\n      hasUndo: true,\n      hasRestart: true,\n      methods,\n      customInit() {\n        // 为益智游戏添加特殊功能\n        if (\n          this.title &&\n          (this.title.includes(\"24\") || this.title.includes(\"PUZZLE\"))\n        ) {\n          // 添加提示功能\n          this.showHint = function () {\n            // 实现提示逻辑\n            console.log(\"显示提示\");\n          };\n        }\n      },\n    }),\n\n  // 策略游戏预设\n  strategyGame: (baseComponent, autoStepDelay = 1200) =>\n    createEnhancedGameComponent(baseComponent, {\n      autoStepDelay,\n      hasUndo: true,\n      hasRestart: true,\n      customInit() {\n        // 为策略游戏添加特殊功能\n        this.difficulty = \"normal\";\n        this.setDifficulty = function (level) {\n          this.difficulty = level;\n          // this.gameManager.setAutoStepDelay(\n          //   level === \"easy\" ? 1500 : level === \"hard\" ? 800 : 1200,\n          // );\n        };\n      },\n    }),\n\n  // 动作游戏预设\n  actionGame: (baseComponent, autoStepDelay = 300) =>\n    createEnhancedGameComponent(baseComponent, {\n      autoStepDelay,\n      hasUndo: false,\n      hasRestart: true,\n      customInit() {\n        // 为动作游戏添加特殊功能\n        this.score = 0;\n        this.combo = 0;\n        this.addScore = function (points) {\n          this.score += points * (this.combo + 1);\n          this.combo++;\n        };\n        this.resetCombo = function () {\n          this.combo = 0;\n        };\n      },\n    }),\n\n  // 自定义游戏预设\n  customGame: (baseComponent, config = {}) => {\n    const {\n      autoStepDelay = 500,\n      hasUndo = true,\n      hasRestart = true,\n      features = [],\n      customLogic = null,\n    } = config;\n\n    return createEnhancedGameComponent(baseComponent, {\n      autoStepDelay,\n      hasUndo,\n      hasRestart,\n      customInit() {\n        // 应用自定义功能\n        features.forEach((feature) => {\n          switch (feature) {\n            case \"timer\":\n              this.gameTime = 0;\n              this._gameTimer = null;\n              this.startTimer = function () {\n                this._gameTimer = setInterval(() => {\n                  this.gameTime++;\n                }, 1000);\n              };\n              this.stopTimer = function () {\n                if (this._gameTimer) {\n                  clearInterval(this._gameTimer);\n                  this._gameTimer = null;\n                }\n              };\n              break;\n\n            case \"score\":\n              this.score = 0;\n              this.highScore = parseInt(\n                localStorage.getItem(`${this.title}_highScore`) || \"0\",\n              );\n              this.updateScore = function (points) {\n                this.score += points;\n                if (this.score > this.highScore) {\n                  this.highScore = this.score;\n                  localStorage.setItem(\n                    `${this.title}_highScore`,\n                    this.highScore.toString(),\n                  );\n                }\n              };\n              break;\n\n            case \"difficulty\":\n              this.difficulty = \"normal\";\n              this.setDifficulty = function (level) {\n                this.difficulty = level;\n                // 根据难度调整游戏参数\n                const delays = { easy: 800, normal: 500, hard: 300 };\n                this.gameManager.setAutoStepDelay(delays[level] || 500);\n              };\n              break;\n          }\n        });\n\n        // 应用自定义逻辑\n        if (customLogic && typeof customLogic === \"function\") {\n          customLogic.call(this);\n        }\n      },\n      customCleanup() {\n        // 清理定时器\n        if (this._gameTimer) {\n          clearInterval(this._gameTimer);\n        }\n      },\n    });\n  },\n};\n\n/**\n * 模板字符串生成器\n * 生成标准的游戏组件模板\n */\nexport function generateGameTemplate(options = {}) {\n  const {\n    hasTopControls = true,\n    hasBottomControls = false,\n    hasGameInfo = false,\n    hasCustomContent = true,\n  } = options;\n\n  return `<template>\n  <div class=\"Sum\">\n    <h1>{{ title }}</h1>\n    \n    ${hasTopControls ? `\n    <GameControls\n      v-bind=\"gameControlsConfig\"\n      @undo=\"undo\"\n      @goon=\"goon\"\n      @step=\"stepFn\"\n      @auto=\"pass\"\n    />` : \"\"}\n    \n    ${hasGameInfo ? `\n    <div class=\"row\">\n      <span v-if=\"time !== undefined\">TIME: {{ time }}</span>\n      <br v-if=\"time !== undefined && step !== undefined\" />\n      <span v-if=\"step !== undefined\">STEP: {{ step }}</span>\n    </div>` : \"\"}\n    \n    <div class=\"row\">\n      ${hasCustomContent ? \"<!-- 游戏内容区域 -->\" : \"\"}\n    </div>\n    \n    ${hasBottomControls ? `\n    <GameControls\n      v-bind=\"gameControlsConfig\"\n      @undo=\"undo\"\n      @goon=\"goon\"\n      @step=\"stepFn\"\n      @auto=\"pass\"\n    />` : \"\"}\n    \n    <!-- 游戏结果模态框 -->\n    <GameResultModal\n      v-if=\"winflag\"\n      title=\"U WIN!\"\n      :buttons=\"[{ text: 'GO ON', action: 'goon', callback: goon, disabled: false }]\"\n    />\n    \n    <GameResultModal\n      v-if=\"loseflag\"\n      title=\"U LOSE\"\n      :buttons=\"[{ text: 'GO ON', action: 'goon', callback: goon, disabled: false }]\"\n    />\n  </div>\n</template>`;\n}\n\n/**\n * 使用示例：\n *\n * // 1. 简单使用\n * import { createEnhancedGameComponent } from '../utils/gameComponentFactory.js';\n * import Pairs from './Pairs.js';\n *\n * export default createEnhancedGameComponent(Pairs, {\n *   autoStepDelay: 500,\n *   hasUndo: false\n * });\n *\n * // 2. 使用预设\n * import { GameComponentPresets } from '../utils/gameComponentPresets.js';\n * import fish from './fish.js';\n *\n * export default GameComponentPresets.simpleGame(fish, 1000);\n *\n * // 3. 自定义配置\n * export default createEnhancedGameComponent(GridBattle, {\n *   autoStepDelay: 500,\n *   hasUndo: true,\n *   customInit() {\n *     // 自定义初始化逻辑\n *   }\n * });\n */","import GameStateManager from \"./gameStateManager.js\";\nimport gameSettingsManager from \"./gameSettingsManager.js\";\nimport { defineAsyncComponent } from \"vue\";\nimport { setSeed } from \"./help.js\";\nimport { CARD_TYPES, CARD_POINTS, getCardPlaceholderText } from \"./cardUtils.js\";\n\n/**\n * 游戏规则说明映射\n * 为每个游戏提供简要的规则说明\n */\nconst gameRules = {\n  // 月份游戏\n  month: \"The game has 13 positions (12 months + 1 deck). Each turn, take the top card from the current position and move it to the position corresponding to its value. If the deck reaches 4 cards, the game ends.\",\n  \n  // 钓鱼游戏\n  fish: \"A 4-player game where each player starts with cards. On your turn, draw the top card from your deck. If it matches a card in the center, collect those cards. Special cards let you take cards from other players. The player who collects all cards wins.\",\n  \n  // 24点游戏\n  point24: \"Use 4 given numbers and apply +, -, ×, ÷ operations to make the result equal to 24. Each number can be used exactly once. You can combine numbers by selecting an operator and clicking cards to perform calculations.\",\n  \n  // 龟兔赛跑（卡片配对游戏）\n  Tortoise: \"A card matching game with hierarchical dependencies. Cards have z-index priorities and connection requirements. Match cards of the same value pair (cards with same base number). Cards can only be matched when all their prerequisite cards are already matched. Complete all pairs to win.\",\n  \n  // 排序游戏\n  Sort: \"A card sorting puzzle with 3 difficulty modes: simple (by number), medium (by color), and hard (by suit). Move cards to empty slots following specific rules. Cards can only be placed in valid positions. The goal is to arrange all cards in the correct order.\",\n  \n  // 配对游戏\n  Pairs: \"A memory matching game with 48 cards. Flip cards to find pairs. Cards are paired based on their base value (4 cards share the same base value). Find all matching pairs as quickly as possible to win.\",\n  \n  // 蜘蛛纸牌\n  Spider: \"A classic Spider Solitaire game with 52 standard playing cards. Arrange cards in descending order by number. Cards can be moved in sequences to build foundations. The goal is to sort all cards by suit and rank to win.\",\n  \n  // 国际象棋（策略游戏）\n  GridBattle: \"A strategy game on a 6x6 grid with two types of pieces: high (1) and low (0) grade. Pieces move according to specific rules defined by their positions. Win by eliminating all opponent's pieces of the opposite grade, or reach a draw when only one of each remains.\",\n  \n  // 21点（BlackJack）\n  blackjack: \"A card game using a 54-card deck. The goal is to get as close to 21 as possible without exceeding it. Cards 2-10 are worth their face value, J/Q/K are worth 10, and Aces can be worth 1 or 11. If your score exceeds 21, you bust. Both player and dealer start with 2 cards.\",\n  \n  // 数字迷宫（新游戏）\n  NumberMaze: \"A 6x6 grid puzzle game with numbered blocks. Move number blocks to adjacent empty spaces to create a valid path from start (0) to end (99). The path must have strictly increasing numbers. Use strategy to rearrange blocks and find the optimal path. Win when a valid ascending path exists from start to end.\",\n  \n  // 数字接龙（全新游戏）\n  NumberSequence: \"A strategic puzzle game on a 5x5 grid with numbered blocks (1-9). Build ascending sequences by selecting adjacent numbers (minimum 3). Selected sequences are cleared and blocks fall down to fill gaps. Clear all numbers to win. Plan your moves carefully as sequences must be strictly increasing and adjacent.\"\n};\n\n/**\n * 组件定义 - 根据环境选择 Mock 或真实组件\n */\nlet GameResultModal, GameControls, GameLayout, CardImage;\n\nif (typeof window === \"undefined\") {\n  // Node.js 环境：直接使用 Mock 组件\n  GameResultModal = {\n    name: \"GameResultModal\",\n    template: \"<div>Mock GameResultModal</div>\",\n    props: [\"title\", \"subtitle\", \"buttons\", \"show\"],\n  };\n  GameControls = {\n    name: \"GameControls\",\n    template: \"<div>Mock GameControls</div>\",\n    props: [\"canUndo\", \"canGoon\", \"canRestart\", \"canAuto\", \"canStep\"],\n  };\n  GameLayout = {\n    name: \"GameLayout\",\n    template: \"<div><slot name='game-content'></slot></div>\",\n    props: [\"title\", \"winflag\", \"loseflag\", \"drawflag\"],\n  };\n  CardImage = {\n    name: \"CardImage\",\n    template: \"<div>Mock CardImage</div>\",\n    props: [\"src\", \"alt\"],\n  };\n} else {\n  // 浏览器环境：使用 Vue 3 异步组件\n  GameResultModal = defineAsyncComponent(\n    () => import(\"../components/GameResultModal.vue\"),\n  );\n  GameControls = defineAsyncComponent(\n    () => import(\"../components/GameControls.vue\"),\n  );\n  GameLayout = defineAsyncComponent(\n    () => import(\"../components/GameLayout.vue\"),\n  );\n  CardImage = defineAsyncComponent(\n    () => import(\"../components/CardImage.vue\"),\n  );\n}\n\n/**\n * 游戏组件工厂函数\n * 为现有游戏组件添加统一的GameStateManager、GameControls和GameResultModal功能\n * 这是一个保守的重构方案，最大程度保持现有代码结构不变\n */\n\n/**\n * 创建增强的游戏组件（同步版本）\n * @param {Object} baseComponent - 基础游戏组件 (.js文件导出的组件)\n * @param {Object} options - 配置选项\n * @param {number} options.autoStepDelay - 自动模式延迟时间\n * @param {boolean} options.hasUndo - 是否支持撤销\n * @param {boolean} options.hasRestart - 是否支持重新开始\n * @param {Function} options.customInit - 自定义初始化函数\n * @param {Function} options.customCleanup - 自定义清理函数\n * @returns {Object} 增强后的Vue组件配置\n */\nexport function createEnhancedGameComponent(baseComponent, options = {}) {\n  const {\n    computed = {},\n    methods = {},\n    autoStepDelay = 500,\n    hasUndo = true,\n    hasRestart = true,\n    customInit = null,\n    customCleanup = null,\n  } = options;\n\n  return {\n    // 继承基础组件的所有属性\n    ...baseComponent,\n\n    // 添加必要的组件\n    components: {\n      ...baseComponent.components,\n      GameResultModal,\n      GameControls,\n      GameLayout,\n      CardImage,\n    },\n\n    // 扩展data函数\n    data() {\n      const baseData = baseComponent.data ? baseComponent.data.call(this) : {};\n      \n      return {\n        types: CARD_TYPES,\n        point: CARD_POINTS,\n        ...baseData,\n        gameManager: new GameStateManager({\n          autoStepDelay,\n        }),\n        customButtons: [], // 存储自定义按钮配置\n      };\n    },\n\n    // 扩展created生命周期\n    created() {\n      this.setSeed(this.seed ? this.seed : Date.now());\n      \n      // 初始化GameStateManager\n      this.gameManager.init();\n\n      // 从 localStorage 加载延迟设置\n      this.loadDelaySettings();\n\n      // 监听设置变化\n      this._settingsChangeHandler = this.handleSettingsChanged.bind(this);\n      gameSettingsManager.addListener(this._settingsChangeHandler);\n\n      // 设置事件监听\n      this.handleUndo && this.gameManager.on(\"undo\", this.handleUndo);\n\n      // 注册beforeWait事件监听 - 在wait前调用renderTextView\n      this.gameManager.on(\"beforeWait\", () => {\n        if (this.renderTextView && typeof this.renderTextView === 'function') {\n          this.renderTextView();\n        }\n      });\n\n      // 设置historyUpdate事件监听\n      this.gameManager.on(\"historyUpdate\", () => {\n        // 先执行各页面自定义的handleHistoryUpdate方法\n        if (\n          this.handleHistoryUpdate &&\n          typeof this.handleHistoryUpdate === \"function\"\n        ) {\n          this.handleHistoryUpdate();\n        }\n\n        // 然后执行autoCalc方法（如果存在）\n        if (this.autoCalc && typeof this.autoCalc === \"function\") {\n          this.autoCalc();\n        }\n      });\n\n      // 调用自定义初始化函数\n      if (customInit) {\n        customInit.call(this);\n      }\n\n      // 调用原组件的created方法\n      if (baseComponent.created) {\n        baseComponent.created.call(this);\n      }\n\n      // 调用init方法（如果存在）\n      if (this.init) {\n        this.init();\n      }\n    },\n\n    // 扩展beforeUnmount生命周期\n    beforeUnmount() {\n      // 停止自动模式\n      this.gameManager.stopAuto();\n\n      // 清理事件监听\n      this.gameManager.off(\"undo\");\n      this.gameManager.off(\"beforeWait\");\n      this.gameManager.off(\"historyUpdate\");\n\n      // 移除设置变化监听器\n      if (this._settingsChangeHandler) {\n        gameSettingsManager.removeListener(this._settingsChangeHandler);\n      }\n\n      // 调用自定义清理函数\n      if (customCleanup) {\n        customCleanup.call(this);\n      }\n\n      // 调用原组件的beforeUnmount方法\n      if (baseComponent.beforeUnmount) {\n        baseComponent.beforeUnmount.call(this);\n      }\n    },\n\n    // 扩展computed属性\n    computed: {\n      // 使用GameStateManager的默认计算属性\n      ...GameStateManager.getDefaultComputedProperties(),\n\n      // 显示按钮计算属性\n      displayButtons() {\n        // 生成默认按钮列表\n        const defaultButtons = [];\n\n        // 根据配置添加按钮\n        if (hasUndo) {\n          defaultButtons.push({\n            label: \"◀︎\",\n            action: \"undo\",\n            disabled: this.undoDisabled,\n            id: 'undo-btn' // 添加唯一ID以确保Vue正确追踪\n          });\n        }\n\n        if (hasRestart) {\n          defaultButtons.push({\n            label: \"RESTART\",\n            action: \"goon\",\n            disabled: this.restartDisabled,\n            id: 'restart-btn' // 添加唯一ID以确保Vue正确追踪\n          });\n        }\n\n        // 默认添加AUTO按钮\n        defaultButtons.push({\n          label: this.isAutoRunning ? \"STOP\" : \"AUTO\",\n          action: \"auto\",\n          disabled: this.autoDisabled,\n          id: 'auto-btn' // 添加唯一ID以确保Vue正确追踪\n        });\n\n        // 默认添加STEP按钮\n        defaultButtons.push({\n          label: \"►\",\n          action: \"step\",\n          disabled: this.stepDisabled,\n          id: 'step-btn' // 添加唯一ID以确保Vue正确追踪\n        });\n\n        return defaultButtons;\n      },\n\n      // GameLayout通用属性配置\n      gameLayoutProps() {\n        // 获取当前游戏名称\n        const currentGame = this.$route?.path?.substring(1) || '';\n        \n        return {\n          title: this.title,\n          displayButtons: this.displayButtons,\n          winflag: this.winflag,\n          loseflag: this.loseflag,\n          drawflag: this.drawflag,\n          step: this.step,\n          gameRule: gameRules[currentGame],\n          customButtons: this.collectedGameButtons,\n        };\n      },\n      \n      // 自定义按钮配置，用于getAvailableActions\n      collectedGameButtons() {\n        return [...this.displayButtons, ...this.customButtons.filter(button => button.action)];\n      },\n\n      ...baseComponent.computed,\n      ...computed,\n    },\n\n    // 扩展methods\n    methods: {\n      getCardPlaceholderText,\n      // 设置随机数种子\n      setSeed(seed) {\n        this.seed = seed;\n        setSeed(seed);\n      },\n      \n      // 统一的等待方法 - 委托给gameManager处理\n      async wait(delay = null) {\n        return this.gameManager.wait(delay);\n      },\n      \n      // 统一的撤销方法\n      undo() {\n        this.gameManager.undo();\n      },\n\n      // 统一的自动模式方法\n      async pass() {\n        this.gameManager.isAutoRunning ? this.gameManager.stopAuto() : await this.gameManager.startAuto(async () => {\n          // 使用replacer处理循环引用和特殊对象\n          let seen = new WeakMap(); // 使用WeakMap记录路径\n          let pathStack = []; // 记录当前路径\n          \n          const replacer = function(key, value) {\n            // 跳过以_开头的属性\n            if (typeof key === 'string' && key.startsWith('_')) {\n              return undefined;\n            }\n            \n            // 处理对象循环引用\n            if (typeof value === 'object' && value !== null) {\n              if (seen.has(value)) {\n                return undefined; // 跳过循环引用\n              }\n              \n              const currentPath = pathStack.join('.') + (key ? '.' + key : '');\n              seen.set(value, currentPath);\n              pathStack.push(key);\n            }\n            \n            return value;\n          };\n          const beforeState = JSON.stringify(this.$data, replacer);\n          await this.stepFn();\n          seen = new WeakMap(); // 使用WeakMap记录路径\n          pathStack = []; // 记录当前路径\n          const afterState = JSON.stringify(this.$data, replacer);\n          \n          // 如果状态没变，说明移动无效\n          if (beforeState === afterState) {\n            console.warn('移动无效，游戏可能陷入死锁');\n            this.gameManager.stopAuto();\n          }\n        });\n      },\n\n      // 统一的重新开始方法\n      goon() {\n        this.gameManager.reset(() => {\n          if (this.init) {\n            this.init();\n          }\n        });\n      },\n\n      /**\n       * 从 localStorage 加载延迟设置\n       */\n      loadDelaySettings() {\n        const currentGame = this.$route?.path?.substring(1) || '';\n        const delay = gameSettingsManager.getDelay(currentGame);\n        this.gameManager.setAutoStepDelay(delay);\n      },\n\n      /**\n       * 处理设置变化事件\n       */\n      handleSettingsChanged(settings) {\n        const currentGame = this.$route?.path?.substring(1) || '';\n        \n        // 如果是应用到所有游戏，或者是针对当前游戏的设置，则更新\n        if (settings.applyToAll || settings.gameName === currentGame) {\n          this.gameManager.setAutoStepDelay(settings.delay);\n        }\n      },\n      \n      /**\n       * 处理GameControls组件挂载事件\n       */\n\n      \n      /**\n       * 统一的获取可用操作方法\n       * 用于终端交互式游戏\n       */\n      getAvailableActions() {\n        const actions = [];\n        const actionToMethodMap = {\n          'undo': 'undo',\n          'goon': 'goon',\n          'step': 'stepFn',\n          'auto': 'pass'\n        };\n        \n        // 使用收集的自定义按钮\n        this.collectedGameButtons.forEach((button, index) => {\n          const methodName = button.method || actionToMethodMap[button.action] || button.action;\n          if (this[methodName] && typeof this[methodName] === 'function') {\n            actions.push({\n              id: index + 1, // 使用从1开始的序号\n              label: button.label || `${button.action.toUpperCase()}`,\n              method: methodName,\n              args: button.args || [], // 默认空数组\n              disabled: button.disabled || false,\n            });\n          } else {\n            console.log(`未找到对应方法 ${methodName} 的操作按钮 ${button.action}`);\n          }\n        });\n        \n        // 过滤掉禁用的按钮\n        return actions.filter(a => !a.disabled);\n      },\n\n      ...baseComponent.methods,\n      ...methods,\n    },\n  };\n}\n\n// 从单独的模块导入预设和模板生成器，保持向后兼容性\nexport * from './gameComponentPresets.js';\n","import { GameComponentPresets } from \"../utils/gameComponentFactory.js\";\nimport { shuffleCards } from \"../utils/help.js\";\nimport { getCardPlaceholderText } from \"../utils/cardUtils.js\";\n\n/**\n * Sum对象定义了黑杰克(BlackJack)游戏的基础组件，将传递给GameComponentPresets.strategyGame工厂函数\n * 工厂函数会为该组件添加游戏管理、按钮控制、自动操作等功能\n */\nconst Sum = {\n  name: \"Sum\",\n  data() {\n    return {\n      title: \"BlackJack\",\n      cardsChg: [],\n      arr1: [],\n      arr2: [],\n      number: 54,\n      \n      // 以下属性由工厂函数GameComponentPresets.strategyGame添加：\n      // gameManager: 游戏管理器实例，提供游戏状态控制和自动操作功能\n      // customButtons: 自定义按钮数组，用于存储游戏控制按钮配置\n      // step: 当前游戏步骤计数\n      // difficulty: 游戏难度级别\n      // seed: 随机种子，用于确保游戏结果可重现\n    };\n  },\n  component: [],\n  methods: {\n    init() {\n      // 重置玩家牌组\n      this.arr1.splice(0);\n      this.arr2.splice(0);\n      \n      // 只有在牌堆为空时才重新初始化\n      if (this.cardsChg.length === 0) {\n        this.refillCards();\n      } else {\n        console.log('使用现有牌堆，剩余:', this.cardsChg.length, '张');\n      }\n      \n      // 发初始牌\n      this.hit(this.arr1);\n      this.hit(this.arr2);\n      this.hit(this.arr1);\n      this.hit(this.arr2);\n    },\n    // 摸牌\n    hit(arr) {\n      // 如果牌堆空了，重新洗牌\n      if (this.cardsChg.length === 0) {\n        console.log('牌堆已空，重新洗牌...');\n        this.refillCards();\n      }\n      \n      var currentCard = this.cardsChg.shift();\n      var value = currentCard >> 2;\n      arr.push({ id: currentCard, value: ++value > 10 ? 10 : value });\n      this.gameManager.recordOperation();\n    },\n    \n    // 重新填充牌堆\n    refillCards() {\n      // 清空已使用记录\n      this.cardsChg.splice(0);\n      for (let i = 0; i < this.number; i++) {\n        this.cardsChg.push(i);\n      }\n      \n      // 洗牌\n      shuffleCards(this.cardsChg, this.cardsChg.length);\n      console.log('重新洗牌完成，新牌堆:', this.cardsChg.length, '张');\n    },\n    // 计算点数\n    getScore(player) {\n      let score = 0;\n      let arr = this[\"arr\" + player];\n      let flag = false;\n      for (let i = 0; i < arr.length; i++) {\n        score += arr[i].value;\n        if (arr[i].value === 1) {\n          flag = true;\n        }\n      }\n      if (score <= 11 && flag === true) {\n        score += 10;\n      } else if (score > 21) {\n        score = 0;\n        player == 2 ? this.gameManager.setLose() : this.gameManager.setWin();\n      }\n      return score;\n    },\n\n    async stepFn() {\n      if (this.score1 === this.score2) {\n        this.gameManager.setDraw();\n      } else if (this.score1 < this.score2) {\n        this.hit(this.arr1);\n      } else if (this.score1 > this.score2) {\n        this.gameManager.setLose();\n      }\n    },\n    // 点击摸牌按钮\n    handleHitBtn() {\n      this.hit(this.arr2);\n    },\n    \n    /**\n     * 渲染文本视图 - 显示当前游戏状态\n     * 用于终端交互式游戏\n     */\n    renderTextView() {\n      console.log('\\n╔════════════════════════════════════════════════╗');\n      console.log('║            黑杰克 (BlackJack)                 ║');\n      console.log('╚════════════════════════════════════════════════╝');\n      console.log(`\\n步数: ${this.step}\\n`);\n      \n      // 显示游戏规则\n      console.log('规则: 点数接近21获胜，超过21爆牌');\n      \n      // 显示剩余牌堆\n      console.log('━━━ 牌堆 ━━━');\n      const remainingCards = this.cardsChg ? this.cardsChg.length : 0;\n      console.log(`  剩余: ${remainingCards} 张\\n`);\n      \n      // 显示（玩家1）\n      console.log('━━━ 庄家 ━━━');\n      const playerScore = this.getScore(1);\n      if (this.arr1 && this.arr1.length > 0) {\n        const playerCards = this.arr1.map(c => getCardPlaceholderText(c.id)).join(' ');\n        console.log(`  ${playerCards}`);\n        console.log(`  分数: ${playerScore}${playerScore > 21 ? ' 💥 爆牌!' : playerScore === 21 ? ' 🎉 BlackJack!' : ''}\\n`);\n      } else {\n        console.log('  (无牌)\\n');\n      }\n      \n      // 显示（玩家2）\n      console.log('━━━ 玩家 ━━━');\n      const dealerScore = this.getScore(2);\n      if (this.arr2 && this.arr2.length > 0) {\n        const dealerCards = this.arr2.map(c => getCardPlaceholderText(c.id)).join(' ');\n        console.log(`  ${dealerCards}`);\n        console.log(`  分数: ${dealerScore}${dealerScore > 21 ? ' 💥 爆牌!' : ''}\\n`);\n      } else {\n        console.log('  (无牌)\\n');\n      }\n      \n      return '渲染完成';\n    },\n    \n    /**\n     * 获取当前可用的操作列表\n     * 用于终端交互式游戏\n     */\n    getAvailableActions() {\n      const actions = [];\n      \n      // 重新开始按钮\n      actions.push({\n        id: 1,\n        label: '重新开始 (RESTART)',\n        method: 'goon',\n        args: []\n      });\n      \n      // 摘牌按钮（玩家1）\n      const playerScore = this.getScore(1);\n      if (playerScore < 21) {\n        actions.push({\n          id: 2,\n          label: '摘牌 (HIT)',\n          method: 'handleHitBtn',\n          args: []\n        });\n      }\n      \n      // 停牌按钮\n      actions.push({\n        id: 3,\n        label: '停牌 (PASS)',\n        method: 'pass',\n        args: []\n      });\n      \n      return actions;\n    },\n    \n    // 停牌方法（庄家摧牌）\n    // stand() {\n    //   // 庄家持续摘牌直到点数>=17\n    //   while (this.getScore(2) < 17) {\n    //     this.hit(this.cardsChg, this.arr2);\n    //   }\n      \n    //   // 判断胜负\n    //   const playerScore = this.getScore(1);\n    //   const dealerScore = this.getScore(2);\n      \n    //   if (playerScore > 21) {\n    //     this.gameManager.setLose();\n    //   } else if (dealerScore > 21) {\n    //     this.gameManager.setWin();\n    //   } else if (playerScore > dealerScore) {\n    //     this.gameManager.setWin();\n    //   } else if (playerScore < dealerScore) {\n    //     this.gameManager.setLose();\n    //   } else {\n    //     this.gameManager.setDraw();\n    //   }\n      \n    //   this.gameManager.recordOperation();\n    // },\n  },\n  \n  // 以下方法由工厂函数GameComponentPresets.strategyGame添加：\n  // wait(): Promise<void> - 等待指定时间，用于游戏步骤延迟\n  // undo(): void - 撤销上一步操作\n  // pass(): void - 跳过当前步骤（已被组件使用）\n  // goon(): void - 继续游戏（已被组件使用）\n  // goBack(): void - 返回上一状态\n  // step(fn: Function): Promise<void> - 执行游戏步骤\n  // executeMethodWithRenderToString(method: string, ...args: any[]): Promise<void> - 执行方法并渲染\n  // getActions(): Array<Object> - 获取当前可用的操作列表\n  computed: {\n    // 监听点数\n    score1: function () {\n      return this.getScore(1);\n    },\n    score2: function () {\n      return this.getScore(2);\n    },\n  },\n};\n\n// 使用工厂函数创建增强的Sum组件并导出\nexport default GameComponentPresets.strategyGame(Sum, 1000);\n\n/**\n * 工厂函数GameComponentPresets.strategyGame为Sum组件添加的功能：\n * \n * 基础增强功能（来自createEnhancedGameComponent）：\n * - gameManager属性：提供游戏状态管理、自动模式控制和步骤执行\n * - customButtons属性：存储自定义按钮配置\n * - displayButtons计算属性：决定显示哪些游戏控制按钮\n * - gameControlsConfig计算属性：游戏控制配置\n * - wait()、undo()、pass()、goon()等方法：游戏控制方法\n * - created和beforeUnmount生命周期钩子：管理游戏状态和事件监听\n * \n * strategyGame特有功能：\n * - step属性：游戏步骤计数器\n * - difficulty属性：游戏难度配置\n * - seed属性：随机种子，确保游戏可重现\n * - getActions()方法：获取当前可用的操作列表（组件提供了getAvailableActions()替代实现）\n * - 提供策略游戏相关的自动操作和状态管理\n * - 支持自动步骤延迟配置（此处设置为1000ms）\n */\n","import { render } from \"./sum.vue?vue&type=template&id=453a8438&scoped=true\"\nimport script from \"./sum.vue?vue&type=script&lang=js\"\nexport * from \"./sum.vue?vue&type=script&lang=js\"\n\nimport \"./sum.vue?vue&type=style&index=0&id=453a8438&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-453a8438\"]])\n\nexport default __exports__","<template>\n  <GameLayout\n    v-bind=\"gameLayoutProps\"\n    :win-title=\"''\"\n    @step=\"stepFn\"\n    @auto=\"pass\"\n    @goon=\"goon\"\n  >\n    <template #game-content>\n      <div\n        class=\"row flex-row\"\n        style=\"padding-top: 0.625rem; justify-content: space-around\"\n      >\n        <div class=\"flex-col center rela\" style=\"max-width: 25%\">\n          <message\n            class=\"abso\"\n            style=\"top: 4.375rem; left: 0; width: 100%\"\n            show1=\"1\"\n            >1</message\n          >\n          <img class=\"avatar\" :src=\"'./static/avatar/32.webp'\" />\n          <span class=\"diff\" :style=\"{ opacity: diff1 != 0 ? 1 : 0 }\"\n            >{{ diff1 > 0 ? \"+\" : \"\" }}{{ diff1 }}</span\n          >\n          <span class=\"scrore\">{{ score1 }}</span>\n        </div>\n        <div class=\"flex-col center rela\" style=\"max-width: 25%\">\n          <message class=\"abso\" style=\"top: 4.375rem; left: 0; width: 100%\"\n            >asfasfasdfasfdasdfasdfas</message\n          >\n          <img class=\"avatar\" :src=\"'./static/avatar/31.webp'\" />\n          <span class=\"diff\" :style=\"{ opacity: diff2 != 0 ? 1 : 0 }\"\n            >{{ diff2 > 0 ? \"+\" : \"\" }}{{ diff2 }}</span\n          >\n          <span class=\"scrore\">{{ score2 }}</span>\n        </div>\n        <div class=\"flex-col center rela\" style=\"max-width: 25%\">\n          <message class=\"abso\" style=\"top: 4.375rem; left: 0; width: 100%\"\n            >1</message\n          >\n          <img class=\"avatar\" :src=\"'./static/avatar/29.webp'\" />\n          <span class=\"diff\" :style=\"{ opacity: diff3 != 0 ? 1 : 0 }\"\n            >{{ diff3 > 0 ? \"+\" : \"\" }}{{ diff3 }}</span\n          >\n          <span class=\"scrore\">{{ score3 }}</span>\n        </div>\n        <div class=\"flex-col center rela\" style=\"max-width: 25%\">\n          <message class=\"abso\" style=\"top: 4.375rem; left: 0; width: 100%\"\n            >1</message\n          >\n          <img class=\"avatar\" :src=\"'./static/avatar/30.webp'\" />\n          <span class=\"diff\" :style=\"{ opacity: diff4 != 0 ? 1 : 0 }\"\n            >{{ diff4 > 0 ? \"+\" : \"\" }}{{ diff4 }}</span\n          >\n          <span class=\"scrore\">{{ score4 }}</span>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div>\n          <ul\n            class=\"cardsul\"\n            style=\"padding-left: 0; margin: 0; min-height: 9.375rem\"\n          >\n            <CardImage\n              v-for=\"item in arr\"\n              :key=\"item\"\n              class=\"card m-0\"\n              style=\"max-width: 25%\"\n              :class=\"{\n                shanshuo: ssArr.indexOf(item) >= 0,\n                flyin1: flyin1.indexOf(item) >= 0,\n                flyin2: flyin2.indexOf(item) >= 0,\n                flyout1: flyout1.indexOf(item) >= 0,\n                flyout2: flyout2.indexOf(item) >= 0,\n              }\"\n              :card-id=\"item\"\n            />\n          </ul>\n        </div>\n      </div>\n    </template>\n\n    <template #win-content>\n      <h1>\n        <img\n          class=\"avatar\"\n          :src=\"'./static/avatar/' + [32, 31, 29, 30][step % 4] + '.webp'\"\n        />WIN!\n      </h1>\n    </template>\n  </GameLayout>\n</template>\n\n<script>\nimport FishComponent from \"./fish.js\";\n\nconst component = FishComponent;\n\nexport default component;\n</script>\n\n<style scoped>\n@import url(\"./sum.css\");\n</style>\n","import { shuffleCards } from \"../utils/help.js\";\nimport { GameComponentPresets } from \"../utils/gameComponentFactory.js\";\nimport { getCardPlaceholderText } from \"../utils/cardUtils.js\";\nimport { defineAsyncComponent } from \"vue\";\n\n/**\n * message 组件 - 根据环境选择\n */\nconst message =\n  typeof window === \"undefined\"\n    ? { name: \"message\", template: \"<div>Mock message</div>\" }\n    : defineAsyncComponent(() => import(\"./message.vue\"));\n\n/**\n * Fish对象定义了钓鱼游戏的基础组件，将传递给GameComponentPresets.simpleGame工厂函数\n * 工厂函数会为该组件添加游戏管理、按钮控制、自动操作等功能\n */\nconst Fish = {\n  name: \"Fish\",\n  components: { message },\n  data() {\n    return {\n      title: \"FISHING CONTEST OF DOG TEAM\",\n      diff1: 0,\n      diff2: 0,\n      diff3: 0,\n      diff4: 0,\n      cards1: [],\n      cards2: [],\n      cards3: [],\n      cards4: [],\n      ssArr: [],\n      flyin1: [],\n      flyin2: [],\n      flyout1: [],\n      flyout2: [],\n      arr: [],\n      number: 54,\n      \n      // 以下属性由工厂函数GameComponentPresets.simpleGame添加：\n      // gameManager: 游戏管理器实例，提供游戏状态控制和自动操作功能\n      // customButtons: 自定义按钮数组，用于存储游戏控制按钮配置\n      // step: 当前游戏步骤计数\n    };\n  },\n  // 初始化\n  methods: {\n    init() {\n      this.cards1.splice(0);\n      this.cards2.splice(0);\n      this.cards3.splice(0);\n      this.cards4.splice(0);\n      let cards = this.cards1;\n      this.arr.splice(0);\n      for (let i = 0; i < this.number; i++) {\n        cards.push(i);\n      }\n      shuffleCards(cards, this.number);\n      this.cards2.push(...cards.splice(-14));\n      this.cards3.push(...cards.splice(-13));\n      this.cards4.push(...cards.splice(-13));\n    },\n    time(handle, time) {\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve();\n          handle();\n        }, time);\n      });\n    },\n    async push(arr, item) {\n      arr.push(item);\n      // var type = (this.step % 2) == 0 ? 'flyout1' : 'flyout2'\n      // this[type].push(item)\n      // await this.time(() => {\n      //   this[type].splice(0)\n      // }, 500)\n    },\n    // 摸牌\n    async hit(cards, arr) {\n      var currentCard = cards.shift();\n      var value = currentCard >> 2;\n      if (value == 13) {\n        this.push(arr, currentCard);\n        this.ssArr.push(currentCard);\n        return await this.time(() => {\n          this.ssArr.splice(0);\n          for (let i = 1; i <= 4; i++) {\n            i != (this.step % 4) + 1 &&\n              arr.push(\n                ...this[\"cards\" + i].splice(0, currentCard == 53 ? 5 : 3),\n              );\n          }\n          // arr.push(...((this.step % 2) == 0 ? this.cards2 : this.cards1).splice(0, currentCard == 53 ? 5 : 3))\n        }, this.gameManager.autoStepDelay);\n      }\n      var index = value == 10 ? 0 : arr.findIndex((item) => item >> 2 == value);\n      this.push(arr, currentCard);\n      if (index < 0) {\n        return;\n      }\n      this.ssArr.push(currentCard, arr[index]);\n      await this.time(() => {\n        this.ssArr.splice(0);\n        cards.push(...arr.splice(index));\n      }, this.gameManager.autoStepDelay);\n    },\n    /**\n     * 渲染文本视图 - 显示当前游戏状态\n     * 用于终端交互式游戏\n     */\n    renderTextView() {\n      console.log('\\n╔════════════════════════════════════════════════╗');\n      console.log('║              钓鱼游戏 (Fish)                  ║');\n      console.log('╚════════════════════════════════════════════════╝');\n      console.log(`\\n步数: ${this.step}\\n`);\n      \n      // 显示4个玩家的牌 - 两行表格格式\n      // console.log('┌─────────┬─────────┬─────────┬─────────┐');\n      console.log('│ 玩家1(你) │  玩家2  │  玩家3  │  玩家4  │');\n      // console.log('├─────────┼─────────┼─────────┼─────────┤');\n      \n      // 获取每个玩家的牌数\n      const cardCounts = [];\n      for (let i = 1; i <= 4; i++) {\n        const cards = this[`cards${i}`];\n        cardCounts.push(cards.length > 0 ? `${cards.length}张` : '已出完');\n      }\n      \n      console.log(`│${cardCounts[0].padStart(9, ' ')}│${cardCounts[1].padStart(9, ' ')}│${cardCounts[2].padStart(9, ' ')}│${cardCounts[3].padStart(9, ' ')}│`);\n      // console.log('└─────────┴─────────┴─────────┴─────────┘');\n      \n      // 显示中央区域\n      console.log('\\n━━━ 中央区域 ━━━');\n      if (this.arr.length > 0) {\n        const cardTexts = this.arr.map(c => getCardPlaceholderText(c)).join(' ');\n        console.log(`  ${cardTexts}`);\n      } else {\n        console.log('  (空)');\n      }\n      \n      return '渲染完成';\n    },\n  },\n  computed: {\n    // 监听点数\n    score1: function () {\n      return this.cards1.length;\n    },\n    score2: function () {\n      return this.cards2.length;\n    },\n    score3: function () {\n      return this.cards3.length;\n    },\n    score4: function () {\n      return this.cards4.length;\n    },\n  },\n  watch: {\n    score4(val, old) {\n      this.diff4 = val - old;\n      this.time(() => {\n        this.diff4 = 0;\n      }, this.gameManager.autoStepDelay);\n    },\n    score3(val, old) {\n      this.diff3 = val - old;\n      this.time(() => {\n        this.diff3 = 0;\n      }, this.gameManager.autoStepDelay);\n    },\n    score2(val, old) {\n      this.diff2 = val - old;\n      this.time(() => {\n        this.diff2 = 0;\n      }, this.gameManager.autoStepDelay);\n    },\n    score1(val, old) {\n      this.diff1 = val - old;\n      this.time(() => {\n        this.diff1 = 0;\n      }, this.gameManager.autoStepDelay);\n    },\n  },\n};\n\n// 使用工厂函数创建增强的fish组件并导出\nexport default GameComponentPresets.simpleGame(Fish, 1000);\n\n/**\n * 工厂函数GameComponentPresets.simpleGame为Fish组件添加的功能：\n * \n * 基础增强功能（来自createEnhancedGameComponent）：\n * - gameManager属性：提供游戏状态管理、自动模式控制和步骤执行\n * - customButtons属性：存储自定义按钮配置\n * - displayButtons计算属性：决定显示哪些游戏控制按钮\n * - gameControlsConfig计算属性：游戏控制配置\n * - wait()、pass()、goon()等方法：游戏控制方法\n * - created和beforeUnmount生命周期钩子：管理游戏状态和事件监听\n * \n * simpleGame特有功能：\n * - step属性：游戏步骤计数器\n * - getActions()方法：获取当前可用的操作列表\n * - 提供简单游戏相关的自动操作和状态管理\n * - 支持自动步骤延迟配置（此处设置为1000ms）\n */\n","import { render } from \"./fish.vue?vue&type=template&id=a9f40ed8&scoped=true\"\nimport script from \"./fish.vue?vue&type=script&lang=js\"\nexport * from \"./fish.vue?vue&type=script&lang=js\"\n\nimport \"./fish.vue?vue&type=style&index=0&id=a9f40ed8&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-a9f40ed8\"]])\n\nexport default __exports__","<template>\n  <GameLayout\n    v-bind=\"gameLayoutProps\"\n    :lose-subtitle=\"'NO EXP = 24'\"\n    @undo=\"undo\"\n    @goon=\"goon\"\n    @step=\"stepFn\"\n    @auto=\"pass\"\n  >\n    <template #game-content>\n      <div class=\"row center\" style1=\"overflow:scroll\">\n        <div class=\"flex-row center\">\n          <ul class=\"cardsul flex-row center\" style=\"padding-left: 0\">\n            <div class=\"flex-col center m-0\">\n              <!-- <span class=\"vertical m-0\">(</span> -->\n              <point24card :card=\"arr[0]\"></point24card>\n              <div class=\"flex-row\" v-show=\"step < 3\">\n                <span\n                  v-for=\"i in 4\"\n                  :key=\"i\"\n                  class=\"sign center\"\n                  :class=\"{ choose: sign == i }\"\n                  @click=\"canOperate && clickSign(i)\"\n                  >{{ signs[i] }}</span\n                >\n              </div>\n              <CardImage\n                v-if=\"sign != 0\"\n                card-id=\"bg\"\n                class=\"card align-center\"\n              />\n              <!-- <span class=\"vertical m-0\">)</span> -->\n              <span class=\"vertical m-0\">=</span>\n              <span class=\"m-0\">{{ calc(arr[0]).toFixed(2) }}</span>\n            </div>\n          </ul>\n          <ul\n            class=\"cardsul flex-row center\"\n            style=\"padding-left: 0; margin-left: 1.25rem\"\n          >\n            <div\n              v-for=\"(item, i) in arr\"\n              :key=\"i\"\n              class=\"align-center flex-wrap flex-row center\"\n            >\n              <div v-if=\"i != 0\" class=\"flex-row center m-0\">\n                <span\n                  class=\"sign center\"\n                  @click=\"canOperate && clickCard(item, i)\"\n                  >{{ signs[sign] }}</span\n                >\n                <point24card\n                  :card=\"item\"\n                  @click=\"canOperate && clickCard(item, i)\"\n                ></point24card>\n              </div>\n            </div>\n          </ul>\n        </div>\n      </div>\n    </template>\n  </GameLayout>\n</template>\n\n<script>\nimport Point24Component from \"./point24.js\";\n\nconst component = Point24Component;\n\nexport default component;\n</script>\n\n<style scoped>\n@import url(\"./sum.css\");\n</style>\n","import { shuffleCards } from \"../utils/help.js\";\nimport { GameComponentPresets } from \"../utils/gameComponentFactory.js\";\nimport { getCardPlaceholderText } from \"../utils/cardUtils.js\";\nimport { defineAsyncComponent } from \"vue\";\n\n/**\n * point24card 组件 - 根据环境选择\n */\nconst point24card =\n  typeof window === \"undefined\"\n    ? { name: \"point24card\", template: \"<div>Mock point24card</div>\" }\n    : defineAsyncComponent(() => import(\"./point24card.vue\"));\n// var opts    =  [ \" + \" , \" * \" , \" - \" , \" - \" , \" / \" , \" / \" ];\nvar opts = [1, 3, 2, 2, 4, 4];\n\nfunction process(nums, len, aim) {\n  for (var i = 0; i < len; i++) {\n    for (var j = i + 1; j < len; j++) {\n      var numij = [nums[i], nums[j]];\n      nums[j] = nums[len - 1];\n      for (var k = 0; k < 6; k++) {\n        // nums[i]  =   ' ( '   +  numij[k % 2 ]  +  opts[k]  +  numij[( ! (k % 2 ) * 1 )]  +   ' ) ' ;\n        nums[i] = [numij[k % 2], opts[k], numij[!(k % 2) * 1]];\n        if (process(nums, len - 1, aim)) {\n          return true;\n        }\n      }\n      nums[i] = numij[0];\n      nums[j] = numij[1];\n    }\n  }\n  // return  (len  ==   1 )  &&  (Math.abs(( new  Function( \" return \"   +  nums[ 0 ])())  -  aim)  <   0.0000001 );\n  return len == 1 && Math.abs(calc(nums[0]) - aim) < 0.0000001;\n}\n\nlet fns = [\n  () => {},\n  (a, b) => a + b,\n  (a, b) => a - b,\n  (a, b) => a * b,\n  (a, b) => a / b,\n];\n\nfunction calc(a) {\n  if (Number.isFinite(a)) {\n    return (a >> 2) + 1;\n  } else {\n    let [num1, sign, num2] = a;\n    num1 = calc(num1);\n    num2 = calc(num2);\n    return fns[sign](num1, num2);\n  }\n}\n\nfunction first(i) {\n  return Number.isFinite(i) ? i : first(i[0]);\n}\n\n/**\n * Point24对象定义了24点游戏的基础组件，将传递给GameComponentPresets.puzzleGame工厂函数\n * 工厂函数会为该组件添加游戏管理、按钮控制、自动操作等功能\n */\nconst Point24 = {\n  name: \"point24\",\n  components: { point24card },\n  data() {\n    return {\n      title: \"Point24\",\n      sign: 0,\n      cards1: [],\n      cards2: [0, 0, 0],\n      signs: [\"UP\", \"+\", \"-\", \"X\", \"/\"],\n      arr: [],\n      number: 52,\n      \n      // 以下属性由工厂函数GameComponentPresets.puzzleGame添加：\n      // gameManager: 游戏管理器实例，提供游戏状态控制和自动操作功能\n      // customButtons: 自定义按钮数组，用于存储游戏控制按钮配置\n      // step: 当前游戏步骤计数\n      // history: 计算历史记录数组\n      // result: 当前计算结果\n    };\n  },\n  // 初始化\n  methods: {\n    init() {\n      this.sign = 0;\n      this.cards1.splice(0);\n      this.arr.splice(0);\n      let cards = this.cards1;\n      for (let i = 0; i < this.number; i++) {\n        cards.push(i);\n      }\n      shuffleCards(cards, this.number);\n      this.arr.push(...cards.splice(0, 4));\n      this.autoCalc(); // 恢复autoCalc调用\n    },\n    calc,\n    first,\n    process,\n    clickSign(sign) {\n      this.sign = this.sign == sign ? 0 : sign;\n    },\n    // 记录操作\n    recordOperation(type, data) {\n      this.gameManager.recordOperation({\n        type: type,\n        ...data,\n        timestamp: Date.now(),\n      });\n    },\n\n    // 处理撤销操作\n    handleUndo(operation) {\n      // 根据操作类型执行相应的撤销逻辑\n      switch (operation.type) {\n        case \"combine\":\n          // 撤销组合操作\n          this.cards2.splice(this.step, 1);\n          this.arr.splice(\n            this.arr.findIndex(\n              (a) => this.first(a) == this.first(operation.combined),\n            ),\n            1,\n            operation.left,\n            operation.right,\n          );\n          break;\n      }\n    },\n\n    // 重写clickCard方法，使用GameStateManager记录操作\n    clickCard(card, i) {\n      if (i == 0) {\n        console.log(`索引为0，直接返回`);\n        return;\n      }\n      if (i === -1) {\n        throw new Error(`没找到该卡片`);\n      }\n      if (this.sign != 0) {\n        let left = this.arr[0];\n        let right = this.arr.splice(i, 1)[0];\n        let combined = [left, this.sign, right];\n        this.arr.splice(0, 1, combined);\n        this.sign = 0;\n        this.cards2.splice(this.step, 1, combined);\n        this.recordOperation(\"combine\", {\n          left: left,\n          right: right,\n          combined: combined,\n        });\n      } else {\n        let temp = this.arr[0];\n        this.arr.splice(0, 1, this.arr[i]);\n        this.arr.splice(i, 1, temp);\n      }\n    },\n\n    // 重写stepFn方法\n    async stepFn() {\n      await this.gameManager.step(async () => {\n        if (this.step >= 3) {\n          console.log(`步数已达到3，检查游戏结果...`);\n          // this.autoCalc(); // 调用autoCalc来检查游戏结果\n          return;\n        }\n        let temp = this.cards2[this.step];\n        this.sign = 0;\n        const index1 = this.arr.findIndex((a) => this.first(a) == this.first(temp[0]));\n        this.clickCard(temp[0], index1);\n        await this.wait();\n        this.clickSign(temp[1]);\n        await this.wait();\n        const index2 = this.arr.findIndex((a) => this.first(a) == this.first(temp[2]));\n        this.clickCard(temp[2], index2);\n      });\n    },\n    autoCalc() {\n      if (this.step >= 3) {\n        try {\n          const result = this.calc(this.arr[0]);\n          if (result == 24) {\n            console.log(\"游戏胜利！\");\n            this.gameManager.setWin();\n          } else {\n            console.log(\"游戏失败！\");\n            this.gameManager.setLose();\n          }\n        } catch (error) {\n          console.log(\"计算过程出错:\", error.message);\n          this.gameManager.stopAuto();\n        }\n        return;\n      }\n      let step = this.step;\n      let temp = [...this.arr];\n      let f = this.process(temp, temp.length, 24);\n      if (!f) {\n        this.gameManager.setLose();\n        return;\n      }\n      this.cards2.splice(2, 1, temp[0]);\n      if (step >= 2) {\n        return;\n      }\n      let temp00 = temp[0][0],\n        temp02 = temp[0][2];\n      let l = Number.isFinite(temp00);\n      let r = Number.isFinite(temp02);\n\n      this.cards2.splice(\n        1,\n        1,\n        l\n          ? temp02\n          : r\n            ? temp[0][0]\n            : first(temp00) == first(this.cards2[0])\n              ? temp02\n              : temp00,\n      );\n      if (step >= 1) {\n        return;\n      }\n\n      this.cards2.splice(\n        0,\n        1,\n        l\n          ? Number.isFinite(temp02[0])\n            ? temp02[2]\n            : temp02[0]\n          : r\n            ? Number.isFinite(temp00[0])\n              ? temp00[2]\n              : temp00[0]\n            : temp00,\n      );\n    },\n    /**\n     * 将公式结构转换为可读字符串\n     * 递归处理嵌套的公式结构，类似于point24card组件的渲染方式\n     */\n    formulaToString(formula) {\n      if (Number.isFinite(formula)) {\n        // 如果是数字，直接返回牌的文本表示\n        return getCardPlaceholderText(formula);\n      } else if (Array.isArray(formula) && formula.length === 3) {\n        // 如果是数组 [左操作数, 运算符, 右操作数]\n        const [left, operator, right] = formula;\n        const operatorSymbol = this.signs[operator] || this.signs[0];\n        const leftStr = this.formulaToString(left);\n        const rightStr = this.formulaToString(right);\n        return `(${leftStr} ${operatorSymbol} ${rightStr})`;\n      } else {\n        // 其他情况，返回字符串表示\n        return String(formula);\n      }\n    },\n\n    /**\n     * 渲染文本视图 - 显示当前游戏状态\n     * 用于终端交互式游戏\n     */\n    renderTextView() {\n      console.log('\\n╔════════════════════════════════════════════════╗');\n      console.log('║              24点游戏 (Point24)               ║');\n      console.log('╚════════════════════════════════════════════════╝');\n      console.log(`\\n步数: ${this.step}\\n`);\n      \n      // 显示4张牌（显示完整公式而不仅仅是第一张牌）\n      console.log('━━━ 当前牌面 ━━━');\n      const cards = [];\n      for (let i = 0; i < 4; i++) {\n        if (this.arr[i] !== undefined) {\n          const formulaStr = this.formulaToString(this.arr[i]);\n          cards.push(`[${i}] ${formulaStr}`);\n        }\n      }\n      console.log(`  ${cards.join('  ')}\\n`);\n      \n      // 显示运算符\n      console.log('━━━ 可用运算符 ━━━');\n      console.log('  [+] 加  [-] 减  [×] 乘  [÷] 除\\n');\n      \n      // 显示计算历史\n      if (this.history && this.history.length > 0) {\n        console.log('━━━ 计算历史 ━━━');\n        this.history.forEach((h, idx) => {\n          console.log(`  ${idx + 1}. ${h}`);\n        });\n        console.log('');\n      }\n      \n      // 显示当前结果\n      if (this.result !== undefined && this.result !== null) {\n        console.log(`当前结果: ${this.result}`);\n        if (this.result === 24) {\n          console.log('🎉 恭喜！达到24点！');\n        }\n      }\n      \n      return '渲染完成';\n    },\n    \n    /**\n     * 获取当前可用的操作列表\n     * 用于终端交互式游戏\n     * 使用工厂函数中统一实现的方法\n     */\n  },\n  \n  // 以下方法由工厂函数GameComponentPresets.puzzleGame添加：\n  // wait(): Promise<void> - 等待指定时间，用于游戏步骤延迟\n  // undo(): void - 撤销上一步操作\n  // pass(): void - 跳过当前步骤\n  // goon(): void - 继续游戏\n  // goBack(): void - 返回上一状态\n  // step(fn: Function): Promise<void> - 执行游戏步骤\n  // executeMethodWithRenderToString(method: string, ...args: any[]): Promise<void> - 执行方法并渲染\n  // getActions(): Array<Object> - 获取当前可用的操作列表\n  // formulaToString(formula): string - 将公式对象转换为字符串表示\n};\n\n// 使用工厂函数创建增强的point24组件并导出\nexport default GameComponentPresets.puzzleGame(Point24, 800);\n\n/**\n * 工厂函数GameComponentPresets.puzzleGame为Point24组件添加的功能：\n * \n * 基础增强功能（来自createEnhancedGameComponent）：\n * - gameManager属性：提供游戏状态管理、自动模式控制和步骤执行\n * - customButtons属性：存储自定义按钮配置\n * - displayButtons计算属性：决定显示哪些游戏控制按钮\n * - gameControlsConfig计算属性：游戏控制配置\n * - wait()、pass()、goon()等方法：游戏控制方法\n * - created和beforeUnmount生命周期钩子：管理游戏状态和事件监听\n * \n * puzzleGame特有功能：\n * - step属性：游戏步骤计数器\n * - history属性：计算历史记录数组\n * - result属性：当前计算结果\n * - getActions()方法：获取当前可用的操作列表\n * - formulaToString()方法：将公式对象转换为字符串表示\n * - 提供拼图/解谜游戏相关的自动操作和状态管理\n * - 支持自动步骤延迟配置（此处设置为800ms）\n */\n","import { render } from \"./point24.vue?vue&type=template&id=eaeab1bc&scoped=true\"\nimport script from \"./point24.vue?vue&type=script&lang=js\"\nexport * from \"./point24.vue?vue&type=script&lang=js\"\n\nimport \"./point24.vue?vue&type=style&index=0&id=eaeab1bc&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-eaeab1bc\"]])\n\nexport default __exports__","<template>\n  <GameLayout\n    v-bind=\"gameLayoutProps\"\n    :lose-title=\"''\"\n    :lose-subtitle=\"'YOUR LUCKY CLASSES:'\"\n    :lose-buttons=\"[\n      {\n        label: 'GO ON',\n        action: 'goon',\n        callback: goon,\n        disabled: false,\n      },\n    ]\"\n    :lose-modal-style=\"{ backgroundColor: 'rgba(0,0,0,0.8)' }\"\n    @step=\"stepFn\"\n    @auto=\"pass\"\n    @goon=\"goon\"\n  >\n    <template #game-content>\n      <div class=\"row\">\n        <div class=\"center\">\n          <ul\n            class=\"cardsul\"\n            style=\"\n              padding-left: 0;\n              max-width: 43.125rem;\n              justify-content: space-between;\n              margin-top: 11.25rem;\n            \"\n          >\n            <li\n              v-for=\"(item, i) in arr\"\n              :key=\"i\"\n              class=\"cards m-0\"\n              :class=\"'cards' + i\"\n            >\n              <CardImage\n                v-for=\"(card, j) in item\"\n                :key=\"card\"\n                class=\"m-0 card abso\"\n                :style=\"{\n                  top: ((month == i ? j : 1 + j) * 30) / 16 + 'rem',\n                  left: 0,\n                }\"\n                :card-id=\"\n                  cards2[i] > j ||\n                  (month == i && ((month == 12 && j == 3) || j == 4))\n                    ? card\n                    : 'bg'\n                \"\n              />\n              <div\n                v-show=\"i == 12 && month != i\"\n                class=\"m-0 card\"\n                style=\"background-color: #719192\"\n              ></div>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </template>\n\n    <template #lose-cards>\n      <div class1=\"row\" style=\"margin-top: 0.625rem\">\n        <div>\n          <ul class=\"cardsul\" style=\"padding-left: 0; max-width: 46.25rem\">\n            <CardImage\n              v-for=\"(item, i) in visibleCards\"\n              :key=\"i\"\n              :card-id=\"item.cardId\"\n              class=\"card\"\n            />\n          </ul>\n        </div>\n      </div>\n    </template>\n  </GameLayout>\n</template>\n\n<script>\nimport MonthComponent from \"./month.js\";\n\nconst component = {\n  ...MonthComponent,\n  computed: {\n    ...MonthComponent.computed,\n    visibleCards() {\n      return this.cards2\n        .map((item, i) => ({ originalItem: item, index: i, cardId: i * 4 + 1 }))\n        .filter(item => item.originalItem >= 4 && item.index < 12);\n    }\n  }\n};\n\nexport default component;\n</script>\n\n<style scoped>\n@import url(\"./sum.css\");\n\n.cards12 {\n  position: absolute;\n  top: -11.25rem;\n  height: 9.375rem;\n  min-width: 25rem;\n  width: 100%;\n  height: 9.375rem;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n}\n.cards12 .card {\n  position: static;\n}\n</style>\n","import { shuffleCards } from \"../utils/help.js\";\nimport { GameComponentPresets } from \"../utils/gameComponentFactory.js\";\nimport { getCardPlaceholderText } from \"../utils/cardUtils.js\";\n\n/**\n * Month对象定义了月份游戏的基础组件，将传递给GameComponentPresets.simpleGame工厂函数\n * 工厂函数会为该组件添加游戏管理、按钮控制、自动操作等功能\n */\nconst Month = {\n  name: \"Month\",\n  data() {\n    return {\n      title: \"Month\",\n      month: 12,\n      cards1: [],\n      cards2: [],\n      arr: [],\n      number: 52,\n      \n      // 以下属性由工厂函数GameComponentPresets.simpleGame添加：\n      // gameManager: 游戏管理器实例，提供游戏状态控制和自动操作功能\n      // customButtons: 自定义按钮数组，用于存储游戏控制按钮配置\n      // step: 当前游戏步骤计数\n    };\n  },\n  // 初始化\n  methods: {\n    init() {\n      this.month = 12;\n      this.cards1.splice(0);\n      this.cards2.splice(0);\n      this.arr.splice(0);\n      let cards = this.cards1;\n      for (let i = 0; i < this.number; i++) {\n        cards.push(i);\n      }\n      shuffleCards(cards, this.number);\n      for (let i = 0; i < this.number >> 2; i++) {\n        this.cards2.push(0);\n        this.arr.push(cards.splice(0, 4));\n      }\n    },\n    async push(arr, item) {\n      arr.push(item);\n    },\n    // 摸牌\n    async hit() {\n      this.gameManager.recordOperation();\n      let currentCard = this.arr[this.month].pop();\n      var value = currentCard >> 2;\n      this.arr[value].unshift(currentCard);\n      this.month = value;\n      this.cards2[value]++;\n    },\n    \n    /**\n     * 渲染文本视图 - 显示当前游戏状态\n     * 用于终端交互式游戏\n     */\n    renderTextView() {\n      console.log('\\n╔════════════════════════════════════════════════╗');\n      console.log('║              月份游戏 (Month)                 ║');\n      console.log('╚════════════════════════════════════════════════╝');\n      console.log(`\\n步数: ${this.step}\\n`);\n      \n      // 显示12个月份位置\n      const months = ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'];\n      for (let i = 0; i < 12; i++) {\n        const count = this.cards2[i];\n        console.log(`  [${months[i]}] ` + this.arr[i].map((c, i) => `${i < count || i >= 4 ? getCardPlaceholderText(c) : \"[?]\"}`).join(' ') + (count >= 4 ? ' [✓] 已完成' : ''));\n      }\n      \n      // 显示第13个位置\n      const count13 = this.cards2[12];\n      console.log(`  [牌堆] ` + this.arr[12].map((c, i) => `${i < count13 || i >= 3 ? getCardPlaceholderText(c) : \"[?]\"}`).join(' ') + (count13 >= 4 ? ' [✓] 已完成' : `剩余 ${4 - count13} 次机会`));\n      \n      return '渲染完成';\n    },\n    \n    /**\n     * 获取当前可用的操作列表\n     * 用于终端交互式游戏\n     * 使用工厂函数中统一实现的方法\n     */\n  },\n  \n  // 以下方法由工厂函数GameComponentPresets.simpleGame添加：\n  // wait(): Promise<void> - 等待指定时间，用于游戏步骤延迟\n  // undo(): void - 撤销上一步操作\n  // pass(): void - 跳过当前步骤\n  // goon(): void - 继续游戏\n  // goBack(): void - 返回上一状态\n  // step(fn: Function): Promise<void> - 执行游戏步骤\n  // executeMethodWithRenderToString(method: string, ...args: any[]): Promise<void> - 执行方法并渲染\n  // getActions(): Array<Object> - 获取当前可用的操作列表\n};\n\n// 使用工厂函数创建增强的month组件并导出\nexport default GameComponentPresets.simpleGame(Month, 1000);\n\n/**\n * 工厂函数GameComponentPresets.simpleGame为Month组件添加的功能：\n * \n * 基础增强功能（来自createEnhancedGameComponent）：\n * - gameManager属性：提供游戏状态管理、自动模式控制和步骤执行\n * - customButtons属性：存储自定义按钮配置\n * - displayButtons计算属性：决定显示哪些游戏控制按钮\n * - gameControlsConfig计算属性：游戏控制配置\n * - wait()、pass()、goon()等方法：游戏控制方法\n * - created和beforeUnmount生命周期钩子：管理游戏状态和事件监听\n * \n * simpleGame特有功能：\n * - step属性：游戏步骤计数器\n * - getActions()方法：获取当前可用的操作列表\n * - 提供简单游戏相关的自动操作和状态管理\n * - 支持自动步骤延迟配置（此处设置为1000ms）\n */\n","import { render } from \"./month.vue?vue&type=template&id=cf405a78&scoped=true\"\nimport script from \"./month.vue?vue&type=script&lang=js\"\nexport * from \"./month.vue?vue&type=script&lang=js\"\n\nimport \"./month.vue?vue&type=style&index=0&id=cf405a78&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-cf405a78\"]])\n\nexport default __exports__","<template>\n  <GameLayout\n    v-bind=\"gameLayoutProps\"\n    :lose-subtitle=\"'NO PAIR'\"\n    @undo=\"undo\"\n    @goon=\"goon\"\n    @step=\"stepFn\"\n    @auto=\"pass\"\n  >\n    <template #game-content>\n      <div class=\"row\">\n        <div>\n          <ul\n            class=\"cardsul cards\"\n            style=\"\n              padding-left: 0;\n              width: 100%;\n              height: 46.875rem;\n              max-width: 31.25rem;\n              margin: auto;\n            \"\n          >\n            <CardImage\n              v-for=\"(item, i) in cards1\"\n              :key=\"i\"\n              v-show=\"!done(item)\"\n              class=\"card abso\"\n              :style=\"map[i]\"\n              style=\"width: 20%; height: 9.375rem; margin: 0\"\n              :card-id=\"check(i) ? item : 'bg'\"\n              @click=\"canOperate && clickCard(item, i)\"\n              :class=\"{ shanshuo: sign == item }\"\n            />\n          </ul>\n        </div>\n      </div>\n    </template>\n  </GameLayout>\n</template>\n\n<script>\nimport TortoiseComponent from \"./Tortoise.js\";\n\nconst component = TortoiseComponent;\n\nexport default component;\n</script>\n\n<style scoped>\n@import url(\"./sum.css\");\n</style>\n","import { shuffleCards } from \"../utils/help.js\";\nimport { GameComponentPresets } from \"../utils/gameComponentFactory.js\";\nimport { getCardPlaceholderText } from \"../utils/cardUtils.js\";\n\n/**\n * Tortoise对象定义了乌龟棋游戏的基础组件，将传递给GameComponentPresets.cardGame工厂函数\n * 工厂函数会为该组件添加游戏管理、按钮控制、自动操作等功能\n */\nconst Tortoise = {\n  name: \"Tortoise\",\n  data() {\n    return {\n      title: \"Tortoise\",\n      sign: -1,\n      cards1: [],\n      next: [],\n      number: 54,\n      \n      // 以下属性由工厂函数GameComponentPresets.cardGame添加：\n      // gameManager: 游戏管理器实例，提供游戏状态控制和自动操作功能\n      // customButtons: 自定义按钮数组，用于存储游戏控制按钮配置\n      // record: 操作记录数组，用于撤销功能\n      // step: 当前游戏步骤计数\n      \n      map: [\n        { \"z-index\": 0, left: \"10%\", top: \"4.6875rem\", up: [16, 30] },\n        { \"z-index\": 0, left: \"30%\", top: \"4.6875rem\", up: [16, 17, 31] },\n        { \"z-index\": 0, left: \"50%\", top: \"4.6875rem\", up: [17, 18, 31] },\n        { \"z-index\": 0, left: \"70%\", top: \"4.6875rem\", up: [18, 32] },\n        { \"z-index\": 0, left: \"10%\", top: \"14.0625rem\", up: [16, 19, 37] },\n        { \"z-index\": 0, left: \"30%\", top: \"14.0625rem\", up: [16, 17, 19, 20] },\n        { \"z-index\": 0, left: \"50%\", top: \"14.0625rem\", up: [17, 18, 20, 21] },\n        { \"z-index\": 0, left: \"70%\", top: \"14.0625rem\", up: [18, 21, 33] },\n        { \"z-index\": 0, left: \"10%\", top: \"23.4375rem\", up: [19, 22, 37] },\n        { \"z-index\": 0, left: \"30%\", top: \"23.4375rem\", up: [19, 20, 22, 23] },\n        { \"z-index\": 0, left: \"50%\", top: \"23.4375rem\", up: [20, 21, 23, 24] },\n        { \"z-index\": 0, left: \"70%\", top: \"23.4375rem\", up: [21, 24, 33] },\n        { \"z-index\": 0, left: \"10%\", top: \"32.8125rem\", up: [22, 36] },\n        { \"z-index\": 0, left: \"30%\", top: \"32.8125rem\", up: [22, 23, 35] },\n        { \"z-index\": 0, left: \"50%\", top: \"32.8125rem\", up: [23, 24, 35] },\n        { \"z-index\": 0, left: \"70%\", top: \"32.8125rem\", up: [24, 34] },\n        { \"z-index\": 1, left: \"20%\", top: \"9.375rem\", up: [25] },\n        { \"z-index\": 1, left: \"40%\", top: \"9.375rem\", up: [25, 26] },\n        { \"z-index\": 1, left: \"60%\", top: \"9.375rem\", up: [26] },\n        { \"z-index\": 1, left: \"20%\", top: \"18.75rem\", up: [25, 27] },\n        { \"z-index\": 1, left: \"40%\", top: \"18.75rem\", up: [25, 26, 27, 28] },\n        { \"z-index\": 1, left: \"60%\", top: \"18.75rem\", up: [26, 28] },\n        { \"z-index\": 1, left: \"20%\", top: \"28.125rem\", up: [27] },\n        { \"z-index\": 1, left: \"40%\", top: \"28.125rem\", up: [27, 28] },\n        { \"z-index\": 1, left: \"60%\", top: \"28.125rem\", up: [28] },\n        { \"z-index\": 2, left: \"30%\", top: \"14.0625rem\", up: [29] },\n        { \"z-index\": 2, left: \"50%\", top: \"14.0625rem\", up: [29] },\n        { \"z-index\": 2, left: \"30%\", top: \"23.4375rem\", up: [29] },\n        { \"z-index\": 2, left: \"50%\", top: \"23.4375rem\", up: [29] },\n        { \"z-index\": 3, left: \"40%\", top: \"18.75rem\", up: [] },\n        { \"z-index\": 1, left: \"0\", top: \"0\", up: [38] },\n        { \"z-index\": 1, left: \"40%\", top: \"0\", up: [39] },\n        { \"z-index\": 1, left: \"80%\", top: \"0\", up: [40] },\n        { \"z-index\": 1, left: \"80%\", top: \"18.75rem\", up: [41] },\n        { \"z-index\": 1, left: \"80%\", top: \"37.5rem\", up: [42] },\n        { \"z-index\": 1, left: \"40%\", top: \"37.5rem\", up: [43] },\n        { \"z-index\": 1, left: \"0\", top: \"37.5rem\", up: [44] },\n        { \"z-index\": 1, left: \"0\", top: \"18.75rem\", up: [45] },\n        { \"z-index\": 2, left: \"0\", top: \"2.3438rem\", up: [46] },\n        { \"z-index\": 2, left: \"35%\", top: \"0\", up: [47] },\n        { \"z-index\": 2, left: \"75%\", top: \"0\", up: [48] },\n        { \"z-index\": 2, left: \"80%\", top: \"16.4063rem\", up: [49] },\n        { \"z-index\": 2, left: \"80%\", top: \"35.1563rem\", up: [50] },\n        { \"z-index\": 2, left: \"45%\", top: \"37.5rem\", up: [51] },\n        { \"z-index\": 2, left: \"5%\", top: \"37.5rem\", up: [52] },\n        { \"z-index\": 2, left: \"0\", top: \"21.0938rem\", up: [53] },\n        { \"z-index\": 3, left: \"0\", top: \"4.6875rem\", up: [] },\n        { \"z-index\": 3, left: \"30%\", top: \"0\", up: [] },\n        { \"z-index\": 3, left: \"70%\", top: \"0\", up: [] },\n        { \"z-index\": 3, left: \"80%\", top: \"14.0625rem\", up: [] },\n        { \"z-index\": 3, left: \"80%\", top: \"32.8125rem\", up: [] },\n        { \"z-index\": 3, left: \"50%\", top: \"37.5rem\", up: [] },\n        { \"z-index\": 3, left: \"10%\", top: \"37.5rem\", up: [] },\n        { \"z-index\": 3, left: \"0\", top: \"23.4375rem\", up: [] },\n      ],\n    };\n  },\n  // 初始化\n  methods: {\n    init() {\n      this.sign = -1;\n      this.cards1.splice(0);\n      let cards = this.cards1;\n      for (let i = 0; i < this.number; i++) {\n        cards.push(i);\n      }\n      shuffleCards(cards, this.number);\n      this.autoCalc();\n    },\n    async stepFn() {\n      if (this.step >= this.number) {\n        return;\n      }\n      await this.gameManager.step(async () => {\n        let next,\n          next_i,\n          max = -1;\n        let fn = (temp) => {\n          if (temp == this.sign) {\n            return;\n          }\n          if (this.done(temp)) {\n            return;\n          }\n          let index = this.cards1.indexOf(temp);\n          if (this.check(index) && this.map[index][\"z-index\"] > max) {\n            next = temp;\n            next_i = index;\n            max = this.map[index][\"z-index\"];\n          }\n        };\n        if (this.sign != -1 && this.sign << 2 != this.next[0] << 2) {\n          let card = this.sign >> 2;\n          for (let i = 0; i < 4; i++) {\n            let temp = card * 4 + i;\n            fn(temp);\n          }\n        }\n        if (max < 0) {\n          for (let temp of this.next) {\n            fn(temp);\n          }\n        }\n        this.clickCard(next, next_i);\n      });\n    },\n    check(i) {\n      return (\n        this.map[i] &&\n        this.map[i].up.findIndex((up) => !this.done(this.cards1[up])) < 0\n      );\n    },\n    done(card) {\n      return this.gameManager.history.indexOf(card) >= 0;\n    },\n    clickCard(card, i) {\n      if (!this.check(i)) {\n        return;\n      }\n      if (this.sign == card) {\n        this.sign = -1;\n      } else if (this.sign >> 2 != card >> 2) {\n        this.sign = card;\n      } else {\n        this.gameManager.recordOperation(this.sign);\n        this.gameManager.recordOperation(card);\n        this.sign = -1;\n      }\n    },\n    undo() {\n      this.sign = -1;\n      this.gameManager.undo();\n      this.gameManager.undo();\n    },\n    autoCalc() {\n      let step = this.step;\n      if (step % 2 == 1) {\n        return;\n      }\n      if (step >= this.number) {\n        this.gameManager.setWin();\n        return;\n      }\n      let temp = [],\n        i,\n        max = -1,\n        m = -1,\n        d = false;\n      for (i = this.number - 1; i >= 0; i--) {\n        if (!this.done(i)) {\n          let card = this.cards1.indexOf(i);\n          if (this.check(card)) {\n            temp.push(i);\n            if (this.map[card][\"z-index\"] > max) {\n              max = this.map[card][\"z-index\"];\n            }\n          }\n        } else {\n          d = true;\n        }\n        if (i % 4 == 0) {\n          if (temp.length > 1) {\n            if (d) {\n              this.next = temp;\n              return;\n            }\n            if (max > m) {\n              this.next = temp;\n              m = max;\n            }\n          }\n          max = -1;\n          temp = [];\n          d = false;\n        }\n      }\n      if (m < 0) {\n        this.gameManager.setLose();\n      }\n    },\n    \n    /**\n     * 渲染文本视图 - 字符画形式显示当前游戏状态\n     * 通过16格子(4x4)系统模拟浏览器渲染效果，使用细线边框\n     * 画布20x20，卡牌4x4，后渲染的自然覆盖先渲染的\n     */\n    renderTextView() {\n      console.log('\\n╔════════════════════════════════════════════════╗');\n      console.log('║              龟兔赛跑 (Tortoise)              ║');\n      console.log('╚════════════════════════════════════════════════╝');\n      console.log(`\\n步数: ${this.step} / ${this.number}`);\n      console.log(`已配对: ${this.step} 张 | 剩余: ${this.number - this.step} 张\\n`);\n      \n      // 图例\n      console.log('\\n图例:');\n      console.log('  ┌──┐ = 卡牌边框  ▄ = 选中卡牌边框 ♥5 = 可点击卡牌内容  ·· = 不可点击卡牌');\n      \n      // 显示下一步提示\n      if (this.next && this.next.length > 0) {\n        const nextCards = this.next.map(c => getCardPlaceholderText(c)).join(', ');\n        console.log(`\\n💡 提示: 可配对的卡片: ${nextCards}`);\n      }\n      \n      if (this.sign !== -1) {\n        const signIndex = this.cards1.indexOf(this.sign);\n        const signCard = getCardPlaceholderText(this.sign);\n        console.log(`🎯 当前选中: ${signCard} (位置 ${signIndex})\\n`);\n      }\n      \n      // 创建字符画布：20行 × 20列\n      const CANVAS_ROWS = 20;\n      const CANVAS_COLS = 20;\n      const canvas = Array(CANVAS_ROWS).fill(null).map(() => Array(CANVAS_COLS).fill('·'));\n      \n      // 卡牌尺寸（字符单位）\n      const CARD_ROWS = 4;  // 4行\n      const CARD_COLS = 4;  // 4列\n      \n      // 布局参数（来自CSS）\n      const LAYOUT_WIDTH = 100;  // 100%\n      const LAYOUT_HEIGHT = 46.875; // rem\n      \n      // 收集所有未完成的卡牌，按z-index排序（从低到高）\n      const activeCards = [];\n      this.cards1.forEach((cardId, posIdx) => {\n        if (!this.done(cardId)) {\n          const mapInfo = this.map[posIdx];\n          const canClick = this.check(posIdx);\n          const isSelected = cardId === this.sign;\n          \n          activeCards.push({\n            cardId,\n            posIdx,\n            left: parseFloat(mapInfo.left),\n            top: parseFloat(mapInfo.top),\n            zIndex: mapInfo[\"z-index\"],\n            canClick,\n            isSelected,\n            cardText: getCardPlaceholderText(cardId)\n          });\n        }\n      });\n      \n      // 按z-index升序排列（底层先渲染）\n      activeCards.sort((a, b) => a.zIndex - b.zIndex);\n      \n      // 逐层渲染卡牌（后渲染的自然覆盖先渲染的）\n      activeCards.forEach(card => {\n        // 计算卡牌在字符画布中的位置\n        const startCol = Math.round((card.left / LAYOUT_WIDTH) * (CANVAS_COLS - CARD_COLS));\n        const startRow = Math.round((card.top / LAYOUT_HEIGHT) * (CANVAS_ROWS - CARD_ROWS));\n        \n        // 确保位置在有效范围内\n        const safeStartRow = Math.max(0, Math.min(startRow, CANVAS_ROWS - CARD_ROWS));\n        const safeStartCol = Math.max(0, Math.min(startCol, CANVAS_COLS - CARD_COLS));\n        \n        // 渲染16格子卡牌\n        for (let row = 0; row < CARD_ROWS; row++) {\n          for (let col = 0; col < CARD_COLS; col++) {\n            const canvasRow = safeStartRow + row;\n            const canvasCol = safeStartCol + col;\n            \n            if (canvasRow < CANVAS_ROWS && canvasCol < CANVAS_COLS) {\n              let char = ' ';\n              \n              if (row === 0) {\n                // 第一行：上边框\n                if (this.sign == card.cardId) {\n                  char = \"▄\";\n                } else if (col === 0) {\n                  char = '┌'; // 左上角\n                } else if (col === CARD_COLS - 1) {\n                  char = '┐'; // 右上角\n                } else {\n                  char = '──'; // 上边框（占2个字符宽度）\n                }\n              } else if (row === CARD_ROWS - 1) {\n                // 最后一行：下边框\n                if (this.sign == card.cardId) {\n                  char = \"▀\";\n                } else if (col === 0) {\n                  char = '└'; // 左下角\n                } else if (col === CARD_COLS - 1) {\n                  char = '┘'; // 右下角\n                } else {\n                  char = '──'; // 下边框（占2个字符宽度）\n                }\n              } else if (col === 0 || col === CARD_COLS - 1) {\n                // 左右边框\n                char = this.sign == card.cardId? \"█\" : '│';\n              } else if (card.canClick) {\n                // 可点击卡牌的内部内容\n                if (row === 1 && col === 1) {\n                  char = card.cardText[0] || ' '; // 花色\n                } else if (row === 1 && col === 2) {\n                  char = card.cardText[1] || ' '; // 点数\n                } else if (row === 2 && col === 1) {\n                  char = card.cardText[1] || ' '; // 下方点数\n                } else if (row === 2 && col === 2) {\n                  char = card.cardText[0] || ' '; // 下方花色\n                }\n              } else {\n                // 不可点击卡牌的内部内容\n                if (row === 1 && (col === 1 || col === 2)) {\n                  char = '·'; // 中间点\n                } else if (row === 2 && (col === 1 || col === 2)) {\n                  char = '·'; // 下方点\n                }\n              }\n              \n              // 处理双字符边框\n              if (char === '──') {\n                canvas[canvasRow][canvasCol] = '─';\n                if (canvasCol + 1 < CANVAS_COLS) {\n                  canvas[canvasRow][canvasCol + 1] = '─';\n                }\n              } else {\n                canvas[canvasRow][canvasCol] = char;\n              }\n            }\n          }\n        }\n      });\n      \n      // 输出字符画\n      console.log('\\n━━━ 游戏布局 (字符画) ━━━');\n      console.log('画布: 20行 × 20列，每张卡牌: 4行 × 4列\\n');\n      \n      // 添加边框\n      const borderedCanvas = [];\n      borderedCanvas.push('┌' + '─'.repeat(CANVAS_COLS) + '┐');\n      \n      canvas.forEach(row => {\n        borderedCanvas.push('│' + row.join('') + '│');\n      });\n      \n      borderedCanvas.push('└' + '─'.repeat(CANVAS_COLS) + '┘');\n      \n      console.log(borderedCanvas.join('\\n'));\n      \n      return '字符画渲染完成';\n    },\n    \n    /**\n     * 获取当前可用的操作列表\n     * 用于终端交互式游戏\n     * 使用工厂函数中统一实现的方法\n     */\n  },\n  \n  // 以下方法由工厂函数GameComponentPresets.cardGame添加：\n  // wait(): Promise<void> - 等待指定时间，用于游戏步骤延迟\n  // undo(): void - 撤销上一步操作（注意：组件重写了此方法）\n  // pass(): void - 跳过当前步骤\n  // goon(): void - 继续游戏\n  // goBack(): void - 返回上一状态\n  // step(fn: Function): Promise<void> - 执行游戏步骤\n  // executeMethodWithRenderToString(method: string, ...args: any[]): Promise<void> - 执行方法并渲染\n  // getActions(): Array<Object> - 获取当前可用的操作列表\n};\n\n// 使用工厂函数创建增强的Tortoise组件并导出\nexport default GameComponentPresets.cardGame(Tortoise, 500);\n\n/**\n * 工厂函数GameComponentPresets.cardGame为Tortoise组件添加的功能：\n * \n * 基础增强功能（来自createEnhancedGameComponent）：\n * - gameManager属性：提供游戏状态管理、自动模式控制和步骤执行\n * - customButtons属性：存储自定义按钮配置\n * - displayButtons计算属性：决定显示哪些游戏控制按钮\n * - gameControlsConfig计算属性：游戏控制配置\n * - wait()、pass()、goon()等方法：游戏控制方法\n * - created和beforeUnmount生命周期钩子：管理游戏状态和事件监听\n * \n * cardGame特有功能：\n * - record属性：存储操作记录，支持撤销功能\n * - step属性：游戏步骤计数器\n * - getActions()方法：获取当前可用的操作列表\n * - 提供纸牌游戏相关的自动操作和状态管理\n * - 支持自动步骤延迟配置（此处设置为500ms）\n * \n * 注意：\n * - Tortoise组件重写了undo()方法，实现了特殊的双步撤销逻辑\n */\n","import { render } from \"./Tortoise.vue?vue&type=template&id=0ad3d044&scoped=true\"\nimport script from \"./Tortoise.vue?vue&type=script&lang=js\"\nexport * from \"./Tortoise.vue?vue&type=script&lang=js\"\n\nimport \"./Tortoise.vue?vue&type=style&index=0&id=0ad3d044&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-0ad3d044\"]])\n\nexport default __exports__","<template>\n  <GameLayout\n    v-bind=\"gameLayoutProps\"\n    :lose-subtitle=\"n + '/' + (number + 1) * 4\"\n    :lose-buttons=\"[\n      {\n        label: 'RESTART',\n        action: 'goon',\n        callback: goon,\n        disabled: false,\n      },\n      {\n        label: 'UNDO',\n        action: 'undo',\n        callback: undo,\n        disabled: undoDisabled,\n      },\n    ]\"\n    @undo=\"undo\"\n    @goon=\"goon\"\n    @step=\"stepFn\"\n    @auto=\"pass\"\n  >\n    <template #game-content>\n      <div class=\"row\">\n        <div>\n          <ul\n            class=\"cardsul flex-col\"\n            :style=\"{ height: (150 * (number + 1)) / 16 + 'rem' }\"\n            style=\"\n              padding-left: 0;\n              width: 100%;\n              max-width: 31.25rem;\n              margin: 0 auto;\n              position: static;\n            \"\n          >\n            <CardImage\n              v-for=\"(item, i) in cards1\"\n              :key=\"i\"\n              class=\"card m-0\"\n              style=\"width: 25%; height: 9.375rem\"\n              :card-id=\"item\"\n              :hide=\"item < 0\"\n              @click=\"canOperate && (item >= 0 ? clickCard(item) : cards1[i - 1] >= 4 && clickSign(i))\"\n              :class=\"{ shanshuo: item >= 0 && canMoveCard(item) }\"\n            >\n              <span v-if=\"cards1[i - 1] >= 4\" class=\"m-0\">{{ getCurrentCandidateCard(i) }}</span>\n            </CardImage>\n          </ul>\n        </div>\n      </div>\n    </template>\n  </GameLayout>\n</template>\n\n<script>\nimport SortComponent from \"./Sort.js\";\n\nconst component = SortComponent;\n\nexport default component;\n</script>\n\n<style scoped>\n@import url(\"./sum.css\");\n</style>\n","// 候选卡片评估工具函数\n\n/**\n * 创建候选对象，延迟计算特征值\n * @param {number} targetCard - 目标卡片\n * @param {number} slotIndex - 空位索引\n * @param {Object} context - 上下文对象，包含必要的方法和属性\n * @param {number} candidatePriority - 候选优先级\n * @param {Object} t - 临时对象信息\n * @param {number} currentTargetIdx - 当前目标索引\n * @param {Object} ruleBasedScore - 基于规则的评分对象（可选）\n * @returns {Object} 候选对象\n */\nexport function createCandidate(targetCard, slotIndex, context, candidatePriority, t, currentTargetIdx, ruleBasedScore = null) {\n  const currentCandidate = {\n    targetCard,\n    slotIndex,\n    ruleBasedScore: ruleBasedScore,  // 保存rule-based评分\n    // 统一使用大于比较，对需要小于比较的特征取反\n    _getters: [\n      // 【新规则第1优先级】空位优先级（rank越小越优先）\n      () => {\n        if (ruleBasedScore) {\n          return ruleBasedScore.slotPriority;\n        }\n        // 如果没有rule-based评分，使用原有的priority\n        return candidatePriority;\n      },\n      // 【新规则第2优先级】排除标记（被排除的候选排在后面）\n      () => {\n        if (ruleBasedScore && ruleBasedScore.excludeReason) {\n          return -1000000; // 大负数使其排在最后\n        }\n        return 0;\n      },\n      // 卡片在列中的位置 (d=0.057, ↓)\n      () => {\n          if (currentCandidate._feature2 === undefined) {\n          currentCandidate._feature2 = currentTargetIdx % (context.number + 1);\n          }\n          return -currentCandidate._feature2;\n      },\n      // 【新规则第3优先级】matchNextCard得分\n      () => {\n        if (ruleBasedScore) {\n          return ruleBasedScore.matchNextCard;\n        }\n        return 0;\n      },\n      // 【新规则第4优先级】候选卡所在列前后相邻的空位数\n      () => {\n        if (ruleBasedScore) {\n          return ruleBasedScore.adjacentEmptyCount;\n        }\n        return 0;\n      },\n      // 【新规则第5优先级】候选卡所在列空位总数\n      () => {\n        if (ruleBasedScore) {\n          return ruleBasedScore.columnEmptyCount;\n        }\n        return 0;\n      },\n      // 【原算法优先级】保留作为后续tiebreaker\n      () => {\n        return candidatePriority;\n      },\n      // 【原算法深度】\n      () => {\n        if (!currentCandidate._deep) {\n          currentCandidate._deep = t.deep;\n        }\n        return currentCandidate._deep;\n      },\n      // 获胜概率 (分治评估，正常比较)\n      () => {\n        if (currentCandidate._winProbability === undefined) {\n          // 使用分治算法评估移动后的获胜可达性\n          const simulatedCards = [...context.cards1];\n          const slotId = simulatedCards[t.index];\n          simulatedCards[currentTargetIdx] = slotId;\n          simulatedCards[t.index] = targetCard;\n          currentCandidate._winProbability = context.estimateWinProbability(simulatedCards);\n        }\n        return currentCandidate._winProbability;\n      },\n      // 距离 (取反，因为原逻辑是小于比较)\n      () => {\n        if (!currentCandidate._diff) {\n          currentCandidate._diff = Math.abs(\n            (targetCard >> 2) - (context.number - 1) + ((t.index % (context.number + 1)))\n          );\n        }\n        return -currentCandidate._diff; // 取反，使小于比较变为大于比较\n      },\n        // 1. 卡片等级 (d=0.064, ↑)\n        () => {\n            if (currentCandidate._feature0 === undefined) {\n            currentCandidate._feature0 = targetCard >> 2;\n            }\n            return currentCandidate._feature0;\n        },\n        // 2. 卡片花色 (d=0.052, ↑)\n        () => {\n            if (currentCandidate._feature1 === undefined) {\n            currentCandidate._feature1 = targetCard % 4;\n            }\n            return currentCandidate._feature1;\n        },\n        // 4. 空位在列中的位置 (d=0.213, ↓)\n        () => {\n            if (currentCandidate._feature3 === undefined) {\n            currentCandidate._feature3 = t.index % (context.number + 1);\n            }\n            return -currentCandidate._feature3;\n        },\n        // 5. 空位前牌等级 (d=0.064, ↑)\n        () => {\n            if (currentCandidate._feature4 === undefined) {\n            currentCandidate._feature4 = t.card >> 2;\n            }\n            return currentCandidate._feature4;\n        },\n        // 6. 卡片所在列的空位数 (d=0.003, ↑)\n        () => {\n            if (currentCandidate._feature5 === undefined) {\n            currentCandidate._feature5 = context.countEmptyInColumn(context.cards1, Math.floor(currentTargetIdx / (context.number + 1)));\n            }\n            return currentCandidate._feature5;\n        },\n        // 7. 卡片上方的空位数 (d=0.160, ↑)\n        () => {\n            if (currentCandidate._feature6 === undefined) {\n            currentCandidate._feature6 = context.countEmptyAbove(context.cards1, currentTargetIdx);\n            }\n            return currentCandidate._feature6;\n        },\n        // 8. 卡片下方的空位数 (d=0.098, ↓)\n        () => {\n            if (currentCandidate._feature7 === undefined) {\n            currentCandidate._feature7 = context.countEmptyBelow(context.cards1, currentTargetIdx);\n            }\n            return -currentCandidate._feature7;\n        },\n        // 9. 空位所在列的空位数 (d=0.138, ↓)\n        () => {\n            if (currentCandidate._feature8 === undefined) {\n            currentCandidate._feature8 = context.countEmptyInColumn(context.cards1, Math.floor(t.index / (context.number + 1)));\n            }\n            return -currentCandidate._feature8;\n        },\n        // 10. 空位上方的空位数 (d=0.043, ↑)\n        () => {\n            if (currentCandidate._feature9 === undefined) {\n            currentCandidate._feature9 = context.countEmptyAbove(context.cards1, t.index);\n            }\n            return currentCandidate._feature9;\n        },\n        // 11. 总空位数 (d=0.000, ↓)\n        () => {\n            if (currentCandidate._feature10 === undefined) {\n            currentCandidate._feature10 = context.cards1.filter(c => c < 0).length;\n            }\n            return -currentCandidate._feature10;\n        },\n        // 12. 卡片上方的牌数 (d=0.011, ↑)\n        () => {\n            if (currentCandidate._feature11 === undefined) {\n            currentCandidate._feature11 = context.countCardsAbove(context.cards1, currentTargetIdx);\n            }\n            return currentCandidate._feature11;\n        },\n        // 13. 空位下方已就位的牌数 (d=0.138, ↑)\n        () => {\n            if (currentCandidate._feature12 === undefined) {\n            currentCandidate._feature12 = context.countCorrectBelow(context.cards1, t.index);\n            }\n            return currentCandidate._feature12;\n        },\n        // 14. 同rank的其他候选数 (d=0.021, ↑)\n        () => {\n            if (currentCandidate._feature13 === undefined) {\n            currentCandidate._feature13 = context.countSameRankCandidates(context.cards1, t);\n            }\n            return currentCandidate._feature13;\n        },\n        // 15. 移动后可移动数 (d=0.215, ↑)\n        () => {\n            if (currentCandidate._feature14 === undefined) {\n            const simulatedCards = [...context.cards1];\n            const slotId = simulatedCards[t.index];\n            simulatedCards[currentTargetIdx] = slotId;\n            simulatedCards[t.index] = targetCard;\n            currentCandidate._feature14 = context.countPossibleMoves(simulatedCards);\n            }\n            return currentCandidate._feature14;\n        },\n        // 16. 空位分布熵 (d=0.096, ↓)\n        () => {\n            if (currentCandidate._feature15 === undefined) {\n            const simulatedCards = [...context.cards1];\n            const slotId = simulatedCards[t.index];\n            simulatedCards[currentTargetIdx] = slotId;\n            simulatedCards[t.index] = targetCard;\n            currentCandidate._feature15 = context.calculateEmptyEntropy(simulatedCards);\n            }\n            return -currentCandidate._feature15;\n        },\n        // 17. 移动后已就位牌数 (d=0.189, ↑)\n        () => {\n            if (currentCandidate._feature16 === undefined) {\n            const simulatedCards = [...context.cards1];\n            const slotId = simulatedCards[t.index];\n            simulatedCards[currentTargetIdx] = slotId;\n            simulatedCards[t.index] = targetCard;\n            currentCandidate._feature16 = context.countRestoredCards(simulatedCards);\n            }\n            return currentCandidate._feature16;\n        },\n        // 18. 曼哈顿距离 (d=0.074, ↑)\n        () => {\n            if (currentCandidate._feature17 === undefined) {\n            currentCandidate._feature17 = Math.abs((currentTargetIdx % (context.number + 1)) - (context.number - 1 - (targetCard >> 2))) + Math.abs(Math.floor(currentTargetIdx / (context.number + 1)) - ((targetCard % 4) % context.matchMode));\n            }\n            return currentCandidate._feature17;\n        },\n        // 19. 是否跨列 (d=0.034, ↑)\n        () => {\n            if (currentCandidate._feature18 === undefined) {\n            currentCandidate._feature18 = (Math.floor(currentTargetIdx / (context.number + 1)) !== Math.floor(t.index / (context.number + 1))) ? 1 : 0;\n            }\n            return currentCandidate._feature18;\n        },\n        // 20. slot_score版本2 (d=0.084, ↑)\n        () => {\n            if (currentCandidate._feature19 === undefined) {\n            currentCandidate._feature19 = (t.card >> 2) * 10 - (t.index % (context.number + 1));\n            }\n            return currentCandidate._feature19;\n        },\n        // 21. slot_score版本3 (d=0.310, ↓)\n        () => {\n            if (currentCandidate._feature20 === undefined) {\n            currentCandidate._feature20 = (t.card >> 2) * context.countEmptyBelow(context.cards1, t.index);\n            }\n            return -currentCandidate._feature20;\n        },\n    ],\n  };\n  return currentCandidate;\n}\n\n/**\n * 比较两个候选的优先级函数 - 使用循环和统一的大于比较\n * 优先级：priority > deep > lookahead > winProbability(分治) > diff > rank > prevRank > slotPosition > restoredCount(DP) > cardPosition\n * @param {Object} candidateA - 候选A\n * @param {Object} candidateB - 候选B\n * @returns {boolean} 是否候选A更好\n */\nexport function isBetterCandidate(candidateA, candidateB) {\n  // 使用_getters数组进行循环比较，所有特征都统一为大于比较\n  for (let i = 0; i < candidateA._getters.length; i++) {\n    const valueA = candidateA._getters[i]();\n    const valueB = candidateB._getters[i]();\n    \n    if (valueA > valueB) {\n      return true; // A比B好\n    } else if (valueA < valueB) {\n      return false; // B比A好\n    }\n    // 相等时继续比较下一个特征\n  }\n  \n  // 所有特征都相等，返回false（A不优于B）\n  return false;\n}\n\n/**\n * 游戏状态评估工具方法集合\n */\nexport const gameEvaluationMethods = {\n/**\n * 基于规则的候选卡片优先级计算\n * @param {Object} context - 游戏上下文\n * @param {number} slotId - 空位ID（-1到-4）\n * @param {Object} slotInfo - 空位信息 {index, card}\n * @param {number} candidateCard - 候选卡片\n * @param {number} candidateIdx - 候选卡片索引\n * @returns {Object} 优先级评分对象\n */\ncalculateRuleBasedPriority(context, slotId, slotInfo, candidateCard, candidateIdx) {\n  const { cards1, number, matchMode } = context;\n  const slotIndex = slotInfo.index;\n  const slotPrevCard = slotInfo.card;\n  \n  // 计算列号和行号\n  const colSize = number + 1;\n  // const slotCol = Math.floor(slotIndex / colSize);\n  const slotRow = slotIndex % colSize;\n  const candidateCol = Math.floor(candidateIdx / colSize);\n  const candidateRow = candidateIdx % colSize;\n  \n  const slotPrevRank = slotPrevCard >> 2;\n  const candidateRank = candidateCard >> 2;\n  const candidateSuit = candidateCard % 4;\n  const candidateGroup = candidateSuit % matchMode;\n  \n  // 1. 空位优先级：空位位置号-1的卡的rank（越小越优先）\n  const slotPriority = -slotPrevRank; // 取负数使rank小的优先\n  \n  // 2. 候选卡优先级评分\n  let candidateScore = {\n    slotPriority: slotPriority,\n    excludeReason: null,\n    matchNextCard: 0,\n    adjacentEmptyCount: 0,\n    columnEmptyCount: 0,\n  };\n  \n  // 2.1 排除规则1：候选卡的rank等于同匹配组位置号-1的卡的rank-1\n  // 找到候选卡所在列的位置号-1的卡\n  if (candidateRow > 0) {\n    const prevPosInCandidateCol = candidateIdx - 1;\n    const prevCardInCandidateCol = cards1[prevPosInCandidateCol];\n    if (prevCardInCandidateCol >= 0) {\n      const prevRankInCandidateCol = prevCardInCandidateCol >> 2;\n      const prevSuitInCandidateCol = prevCardInCandidateCol % 4;\n      const prevGroupInCandidateCol = prevSuitInCandidateCol % matchMode;\n      \n      // 如果是同匹配组，且候选卡rank = 该卡rank - 1，则排除\n      if (candidateGroup === prevGroupInCandidateCol && candidateRank === prevRankInCandidateCol - 1) {\n        candidateScore.excludeReason = 'rule1_same_group_rank_minus_1';\n        // return candidateScore;\n      }\n    }\n  }\n  \n  // 2.2 排除规则2：对应空位号的行号>候选卡的行号\n  if (slotRow < candidateRow) {\n    candidateScore.excludeReason = 'rule2_slot_row_greater';\n    // return candidateScore;\n  }\n  \n  // 2.3 优先选择规则：候选卡的rank等于同匹配组位置号+1的卡的rank+1\n  let matchNextCardScore = 0;\n  if (candidateRow < number) {\n    const nextPosInCandidateCol = candidateIdx + 1;\n    const nextCardInCandidateCol = cards1[nextPosInCandidateCol];\n    if (nextCardInCandidateCol >= 0) {\n      const nextRankInCandidateCol = nextCardInCandidateCol >> 2;\n      const nextSuitInCandidateCol = nextCardInCandidateCol % 4;\n      const nextGroupInCandidateCol = nextSuitInCandidateCol % matchMode;\n      \n      // 检查是否满足：同匹配组且候选卡rank = 该卡rank + 1\n      if (candidateGroup === nextGroupInCandidateCol && candidateRank === nextRankInCandidateCol + 1) {\n        // 基础分：10000（回到原来的值）\n        matchNextCardScore = 10000;\n        // 行号越小越好（靠近列顶部）\n        matchNextCardScore -= candidateRow * 100;\n        // 前一张卡的rank越小越好\n        if (candidateRow > 0) {\n          const prevPosInCandidateCol = candidateIdx - 1;\n          const prevCardInCandidateCol = cards1[prevPosInCandidateCol];\n          const prevRankInCandidateCol = prevCardInCandidateCol >> 2;\n          matchNextCardScore -= prevRankInCandidateCol;\n        }\n      }\n    }\n  }\n  candidateScore.matchNextCard = matchNextCardScore;\n  \n  // 2.4 候选卡所在列前后相邻的空位数（越多越好）\n  let adjacentEmptyCount = 0;\n  if (candidateRow > 0 && cards1[candidateIdx - 1] < 0) {\n    adjacentEmptyCount++;\n  }\n  if (candidateRow < number && cards1[candidateIdx + 1] < 0) {\n    adjacentEmptyCount++;\n  }\n  candidateScore.adjacentEmptyCount = adjacentEmptyCount;\n  \n  // 2.5 候选卡所在列空位总数（越多越好）\n  let columnEmptyCount = 0;\n  const colStart = candidateCol * colSize;\n  for (let i = colStart; i < colStart + colSize; i++) {\n    if (cards1[i] < 0) columnEmptyCount++;\n  }\n  candidateScore.columnEmptyCount = columnEmptyCount;\n  \n  return candidateScore;\n},\n\n/**\n * 比较两个候选卡片的优先级（基于新规则）\n * @param {Object} scoreA - 候选A的评分\n * @param {Object} scoreB - 候选B的评分\n * @returns {number} >0表示A更优，<0表示B更优，0表示相等\n */\ncompareRuleBasedPriority(scoreA, scoreB) {\n  // 1. 先比较空位优先级（rank越小越优先）\n  if (scoreA.slotPriority !== scoreB.slotPriority) {\n    return scoreA.slotPriority - scoreB.slotPriority;\n  }\n  \n  // 2. 排除的候选排在后面\n  if (scoreA.excludeReason && !scoreB.excludeReason) return 1;\n  if (!scoreA.excludeReason && scoreB.excludeReason) return -1;\n  if (scoreA.excludeReason && scoreB.excludeReason) return 0;\n  \n  // 3. 比较matchNextCard（越高越好）\n  if (scoreA.matchNextCard !== scoreB.matchNextCard) {\n    return scoreB.matchNextCard - scoreA.matchNextCard;\n  }\n  \n  // 4. 比较相邻空位数（越多越好）\n  if (scoreA.adjacentEmptyCount !== scoreB.adjacentEmptyCount) {\n    return scoreB.adjacentEmptyCount - scoreA.adjacentEmptyCount;\n  }\n  \n  // 5. 比较列空位总数（越多越好）\n  if (scoreA.columnEmptyCount !== scoreB.columnEmptyCount) {\n    return scoreB.columnEmptyCount - scoreA.columnEmptyCount;\n  }\n  \n  return 0;\n},\n\n\n    // === 辅助函数：特征计算 ===\n\n    // 计算列中的空位数\n    countEmptyInColumn(cards, colIdx) {\n        const colStart = colIdx * (this.number + 1);\n        const colEnd = colStart + this.number + 1;\n        let count = 0;\n        for (let i = colStart; i < colEnd; i++) {\n        if (cards[i] < 0) count++;\n        }\n        return count;\n    },\n\n    // 计算位置上方的空位数\n    countEmptyAbove(cards, pos) {\n        const col = Math.floor(pos / (this.number + 1));\n        const colEnd = (col + 1) * (this.number + 1);\n        let count = 0;\n        for (let i = pos + 1; i < colEnd; i++) {\n        if (cards[i] < 0) count++;\n        }\n        return count;\n    },\n\n    // 计算位置下方的空位数\n    countEmptyBelow(cards, pos) {\n        const col = Math.floor(pos / (this.number + 1));\n        const colStart = col * (this.number + 1);\n        let count = 0;\n        for (let i = colStart; i < pos; i++) {\n        if (cards[i] < 0) count++;\n        }\n        return count;\n    },\n\n    // 计算位置上方的牌数\n    countCardsAbove(cards, pos) {\n        const col = Math.floor(pos / (this.number + 1));\n        const colEnd = (col + 1) * (this.number + 1);\n        let count = 0;\n        for (let i = pos + 1; i < colEnd; i++) {\n        if (cards[i] >= 0) count++;\n        }\n        return count;\n    },\n\n    // 计算空位下方已就位的牌数\n    countCorrectBelow(cards, slotIdx) {\n        const col = Math.floor(slotIdx / (this.number + 1));\n        const colStart = col * (this.number + 1);\n        let count = 0;\n        \n        for (let i = colStart; i < slotIdx; i++) {\n        const c = cards[i];\n        if (c < 0) break;\n        \n        const cRank = c >> 2;\n        const cSuit = c % 4;\n        const expectedRank = this.number - 1 - (i % (this.number + 1));\n        \n        if ((cSuit % this.matchMode) === (col % this.matchMode) && cRank === expectedRank) {\n            count++;\n        } else {\n            break;\n        }\n        }\n        \n        return count;\n    },\n\n    // 计算同rank的其他候选数\n    countSameRankCandidates(cards, slot) {\n        let count = 0;\n        const prevCard = slot.card;\n        const prevRank = prevCard >> 2;\n        const targetRank = prevRank - 1;\n        \n        if (targetRank < 0) return 0;\n        \n        const cardGroup = prevCard % this.matchMode;\n        for (let suit = cardGroup; suit < 4; suit += this.matchMode) {\n        const card = targetRank * 4 + suit;\n        const idx = cards.indexOf(card);\n        if (idx >= 0 && idx + 1 < cards.length && cards[idx + 1] < 0) {\n            count++;\n        }\n        }\n        \n        return count;\n    },\n\n    // 计算空位分布熵\n    calculateEmptyEntropy(cards) {\n        const emptyPerCol = [0, 0, 0, 0];\n        let totalEmpty = 0;\n        \n        for (let i = 0; i < cards.length; i++) {\n        if (cards[i] < 0) {\n            totalEmpty++;\n            const col = Math.floor(i / (this.number + 1));\n            emptyPerCol[col]++;\n        }\n        }\n        \n        if (totalEmpty === 0) return 0;\n        \n        let entropy = 0;\n        for (let count of emptyPerCol) {\n        if (count > 0) {\n            const p = count / totalEmpty;\n            entropy -= p * Math.log2(p);\n        }\n        }\n        \n        return entropy;\n    },\n  /**\n   * 前瞻1步：计算给定状态下有多少个可能的移动\n   * @param {Array} cards1Array - 卡片数组\n   * @returns {number} 可能的移动数量\n   */\n    countPossibleMoves(cards1Array) {\n      let count = 0;\n      \n      // 遍历所有空位\n      for (let i = 0; i < cards1Array.length; i++) {\n        if (cards1Array[i] >= 0) continue;  // 不是空位\n        \n        const prevCard = i > 0 ? cards1Array[i - 1] : null;\n        if (prevCard === null || prevCard < 0) continue;  // 空位前没有有效卡片\n        \n        const prevRank = prevCard >> 2;\n        const targetRank = prevRank - 1;\n        if (targetRank < 0) continue;  // 前面是A，无法移动\n        \n        // 查找所有匹配的候选牌\n        const card_group = prevCard % this.matchMode;\n        for (let suit = card_group; suit < 4; suit += this.matchMode) {\n          const targetCard = targetRank * 4 + suit;\n          const cardIdx = cards1Array.indexOf(targetCard);\n          \n          // 检查候选牌是否存在\n          if (cardIdx >= 0) {\n            count++;\n          }\n        }\n      }\n      \n      return count;\n    },\n    \n  /**\n   * 动态规划：计算已还原到正确位置的卡片数量（从高rank开始）\n   * @param {Array} cards1Array - 卡片数组\n   * @returns {number} 已还原的卡片数量\n   */\n    countRestoredCards(cards1Array) {\n      let restoredCount = 0;\n      const colSize = this.number + 1;  // 每列的大小\n      \n      // 从最高rank开始检查（K往下到A=0）\n      for (let rank = this.number - 1; rank >= 0; rank--) {\n        // 检查每种花色\n        for (let suit = 0; suit < 4; suit++) {\n          const card = rank * 4 + suit;\n          const cardIdx = cards1Array.indexOf(card);\n          \n          if (cardIdx < 0) continue;  // 卡片不存在\n          \n          // 计算该卡片的目标列（基于matchMode）\n          const targetGroup = suit % this.matchMode;\n          \n          // 计算该卡片在目标列中应该的位置\n          // 目标列从底部开始：colStart + (number - rank)\n          const colStart = targetGroup * colSize;\n          const expectedPosition = colStart + (this.number - 1 - rank);\n          \n          // 检查卡片是否在正确位置\n          if (cardIdx === expectedPosition) {\n            // 还需要检查该位置下方的所有卡片是否都正确\n            let allBelowCorrect = true;\n            \n            // 检查该位置下方的每个位置\n            for (let checkRank = rank + 1; checkRank < this.number; checkRank++) {\n              const checkPos = colStart + (this.number - 1 - checkRank);\n              const cardAtPos = cards1Array[checkPos];\n              \n              if (cardAtPos < 0) {\n                // 下方有空位，不正确\n                allBelowCorrect = false;\n                break;\n              }\n              \n              const cardAtPosRank = cardAtPos >> 2;\n              const cardAtPosSuit = cardAtPos % 4;\n              const cardAtPosGroup = cardAtPosSuit % this.matchMode;\n              \n              // 检查下方卡片是否属于同一列且rank正确\n              if (cardAtPosGroup !== targetGroup || cardAtPosRank !== checkRank) {\n                allBelowCorrect = false;\n                break;\n              }\n            }\n            \n            if (allBelowCorrect) {\n              restoredCount++;\n            }\n          }\n        }\n      }\n      \n      return restoredCount;\n    },\n    \n  /**\n   * 分治算法：评估获胜状态可达性（0-100分，分数越高越可能获胜）\n   * @param {Array} cards1Array - 卡片数组\n   * @returns {number} 获胜概率分数（0-100）\n   */\n    estimateWinProbability(cards1Array) {\n      const colSize = this.number + 1;\n      const totalCols = 4;\n      let totalScore = 0;\n      let maxScore = 0;\n      \n      // 分治：评估每一行的完成度\n      for (let row = 0; row < colSize; row++) {\n        const rowScore = this.evaluateRowScore(cards1Array, row, colSize, totalCols);\n        totalScore += rowScore.score;\n        maxScore += rowScore.maxScore;\n      }\n      \n      // 计算全局阻塞惩罚\n      const blockPenalty = this.calculateBlockPenalty(cards1Array);\n      \n      // 归一化到0-100\n      const baseScore = maxScore > 0 ? (totalScore / maxScore) * 80 : 0;\n      const finalScore = Math.max(0, baseScore - blockPenalty);\n      \n      return finalScore;\n  },\n\n\n    \n    // 评估单行的完成度（分治子问题）\n    evaluateRowScore(cards1Array, row, colSize, totalCols) {\n      let score = 0;\n      let maxScore = 0;\n      \n      // 对于每一行，检查每一列中的对应位置\n      for (let col = 0; col < totalCols; col++) {\n        const pos = col * colSize + row;\n        const cardAtPos = cards1Array[pos];\n        \n        maxScore += 10;  // 每个位置满分10分\n        \n        if (cardAtPos < 0) {\n          // 空位：检查该rank的所有候选卡片位置\n          const emptySlotsAbove = this.countEmptySlotsAbove(cards1Array, pos);\n          score += Math.max(0, 10 - emptySlotsAbove * 2);  // 上方空位越多，分数越低\n          continue;\n        }\n        \n        const cardRank = cardAtPos >> 2;\n        const cardSuit = cardAtPos % 4;\n        const cardGroup = cardSuit % this.matchMode;\n        \n        // 计算该行应该对应的rank\n        const expectedRank = this.number - 1 - row;\n        \n        // 计算该列应该对应的group\n        const expectedGroup = col % this.matchMode;\n        \n        // 检查卡片是否属于正确的组和rank\n        if (cardGroup === expectedGroup) {\n          // 正确的组\n          if (cardRank === expectedRank) {\n            // rank完全正确\n            score += 10;\n            \n            // 额外奖励：该组下方行都已正确放置\n            if (this.checkRowBelowCorrect(cards1Array, row, col, colSize)) {\n              score += 5;\n              maxScore += 5;\n            }\n          } else if (cardRank > expectedRank) {\n            // rank太高，轻微扣分（还能移走）\n            score += 5;\n          } else {\n            // rank太低，严重扣分（阻塞）\n            score += 2;\n          }\n        } else {\n          // 错误的组，适度扣分\n          score += 3;\n          \n          // 如果rank正确，给予部分分数\n          if (cardRank === expectedRank) {\n            score += 2;\n          }\n        }\n      }\n      \n      return { score, maxScore };\n    },\n    \n    // 计算某位置上方的空位数\n    countEmptySlotsAbove(cards1Array, pos) {\n      let count = 0;\n      const col = Math.floor(pos / (this.number + 1));\n        const colStart = col * (this.number + 1);\n      const colEnd = colStart + this.number + 1;\n      \n      for (let i = pos + 1; i < colEnd; i++) {\n        if (cards1Array[i] < 0) count++;\n              }\n      \n      return count;\n    },\n    \n    // 检查某位置下方的行是否都已正确放置\n    checkRowBelowCorrect(cards1Array, row, col, colSize) {\n      for (let checkRow = row + 1; checkRow < this.number; checkRow++) {\n        const checkPos = col * colSize + checkRow;\n        const cardAtPos = cards1Array[checkPos];\n        \n        if (cardAtPos < 0) return false;\n        \n        const cardRank = cardAtPos >> 2;\n        const expectedRank = this.number - 1 - checkRow;\n        \n        if (cardRank !== expectedRank) return false;\n      }\n      \n      return true;\n    },\n    \n    // 计算全局阻塞惩罚\n    calculateBlockPenalty(cards1Array) {\n      let penalty = 0;\n      const colSize = this.number + 1;\n      \n      // 检查每列的阻塞情况\n      for (let col = 0; col < 4; col++) {\n        const colStart = col * colSize;\n        \n        // 检查是否存在\"死锁\"：高rank卡片被低rank卡片压住\n        for (let i = colStart; i < colStart + colSize - 1; i++) {\n          const card = cards1Array[i];\n          if (card < 0) continue;\n          \n          const cardRank = card >> 2;\n          \n          // 检查上方的卡片\n          for (let j = i + 1; j < colStart + colSize; j++) {\n            const upperCard = cards1Array[j];\n            if (upperCard < 0) continue;\n            \n            const upperRank = upperCard >> 2;\n            \n            // 如果上方卡片rank更低，这是一个阻塞\n            if (upperRank < cardRank) {\n              penalty += 5;\n            }\n          }\n        }\n      }\n      \n      // 检查可移动性：如果没有任何可移动的牌，增加惩罚\n      const possibleMoves = this.countPossibleMoves(cards1Array);\n      if (possibleMoves === 0) {\n        penalty += 20;\n      } else if (possibleMoves === 1) {\n        penalty += 10;\n      }\n      \n      return penalty;\n    },\n};\n\n/**\n * 候选评估工具函数集合\n */\nexport const candidateUtils = {\n  createCandidate,\n  isBetterCandidate,\n  gameEvaluationMethods\n};","import { shuffleCards, checkDeadForeach } from \"../utils/help.js\";\nimport { GameComponentPresets } from \"../utils/gameComponentFactory.js\";\nimport { createCandidate, isBetterCandidate, gameEvaluationMethods } from \"./candidateUtils.js\";\nimport { getCardPlaceholderText } from \"../utils/cardUtils.js\";\n\n/**\n * Sort对象定义了排序游戏的基础组件，将传递给GameComponentPresets.puzzleGame工厂函数\n * 工厂函数会为该组件添加游戏管理、按钮控制、自动操作等功能\n */\nconst Sort = {\n  name: \"Sort\",\n  data() {\n    return {\n      title: \"Sort\",\n      cards1: [],\n      number: 4,\n      n: 0,\n      sign_index: -1,\n      matchMode: 1,  // 1=简单(数值), 2=中等(颜色), 4=困难(花色)\n      candidateIntervals: {}, // 存储每个空位的候选卡牌循环定时器\n      currentCandidates: {}, // 存储每个空位当前显示的候选卡牌索引\n      \n      // 以下属性由工厂函数GameComponentPresets.puzzleGame添加：\n      // gameManager: 游戏管理器实例，提供游戏状态控制和自动操作功能\n      // customButtons: 自定义按钮数组，用于存储游戏控制按钮配置\n    };\n  },\n  methods: {\n    init() {\n      this.sign_index = -1;\n      this.cards1.splice(0);\n      let cards = this.cards1;\n      for (let i = 0; i < this.number * 4; i++) {\n        cards.push(i);\n      }\n      shuffleCards(cards, this.number * 4);\n      for (let i = 0; i < 4; i++) {\n        cards.splice(cards.indexOf(this.number * 4 - 1 - i), 1, -1 - i);\n      }\n      for (let i = 0; i < 4; i++) {\n        cards.splice(i * (this.number + 1), 0, this.number * 4 - 4 + i);\n      }\n      this.autoCalc();\n      \n      // 初始化候选卡牌循环\n      this.$nextTick(() => {\n        this.updateAllCandidateCycling();\n      });\n    },\n\n    // 组件销毁时清理定时器\n    beforeDestroy() {\n      Object.keys(this.candidateIntervals).forEach(slotIndex => {\n        this.stopCandidateCycling(parseInt(slotIndex));\n      });\n    },\n\n    // 更新所有空位的候选卡牌循环\n    updateAllCandidateCycling() {\n      // 停止所有现有的循环\n      Object.keys(this.candidateIntervals).forEach(slotIndex => {\n        this.stopCandidateCycling(parseInt(slotIndex));\n      });\n      \n      // 为所有有空位的位置启动新的循环\n      for (let i = 0; i < this.cards1.length; i++) {\n        if (this.cards1[i] < 0 && i > 0 && this.cards1[i - 1] >= 4) {\n          this.startCandidateCycling(i);\n        }\n      }\n    },\n\n    // 获取指定空位的候选卡牌数组\n    getCandidateCardsForSlot(slotIndex) {\n      const prevCard = this.cards1[slotIndex - 1];\n      if (prevCard < 4) return []; // 如果前一个卡片不是有效卡片，返回空数组\n      \n      const candidates = this.findAllCardsByRankOffset(prevCard, -1);\n      return candidates.map(c => c.card);\n    },\n\n    // 开始候选卡牌循环显示\n    startCandidateCycling(slotIndex) {\n      this.stopCandidateCycling(slotIndex); // 先停止现有的循环\n      \n      const candidates = this.getCandidateCardsForSlot(slotIndex);\n      if (candidates.length === 0) return;\n      \n      this.currentCandidates[slotIndex] = 0; // 从第一个候选开始\n      \n      // 设置定时器循环显示候选卡牌\n      this.candidateIntervals[slotIndex] = setInterval(() => {\n        if (candidates.length > 0) {\n          this.currentCandidates[slotIndex] = (this.currentCandidates[slotIndex] + 1) % candidates.length;\n        }\n      }, this.gameManager.autoStepDelay);\n    },\n\n    // 停止候选卡牌循环显示\n    stopCandidateCycling(slotIndex) {\n      if (this.candidateIntervals[slotIndex]) {\n        clearInterval(this.candidateIntervals[slotIndex]);\n        delete this.candidateIntervals[slotIndex];\n        delete this.currentCandidates[slotIndex];\n      }\n    },\n\n    // 获取当前显示的候选卡牌\n    getCurrentCandidateCard(slotIndex) {\n      const candidates = this.getCandidateCardsForSlot(slotIndex);\n      if (candidates.length === 0) return '';\n      \n      const currentIndex = this.currentCandidates[slotIndex] || 0;\n      return this.getCardPlaceholderText(candidates[currentIndex]);\n    },\n    \n    // 计算 cards1 的哈希值\n    calculateStateHash() {\n      return this.cards1.join(',');\n    },\n    \n    // 检查当前状态哈希是否已存在\n    isStateHashRepeated(hash) {\n      return this.gameManager.history.find((record) => record.stateHash == hash);\n    },\n    // 记录移动操作\n    recordMove(from, to, card, sign) {\n      // 计算并记录当前状态的哈希\n      const stateHash = this.calculateStateHash();\n      \n      this.gameManager.recordOperation({\n        type: \"move\",\n        from: from,\n        to: to,\n        card: card,\n        sign: sign,\n        timestamp: Date.now(),\n        stateHash: stateHash,\n      });\n    },\n\n    // 处理撤销操作\n    handleUndo(operation) {\n      // 根据操作类型执行相应的撤销逻辑\n      switch (operation.type) {\n        case \"move\":\n          // 撤销移动操作\n          this.cards1.splice(operation.to, 1, operation.sign);\n          this.cards1.splice(operation.from, 1, operation.card);\n          break;\n      }\n    },\n\n    // 提取的移动执行函数（供 clickCard 和 stepFn 复用）\n    executeMove(cardToMove, targetEmptyIndex) {\n      const cardToMoveIndex = this.cards1.indexOf(cardToMove);\n      const emptySlot = this.cards1[targetEmptyIndex];\n      \n      if (this.findNextCard(cardToMove, (idx) => idx == targetEmptyIndex - 1) < 0) {\n        return console.warn(\"❌ 无效的移动\");\n      }\n\n      this.cards1.splice(cardToMoveIndex, 1, emptySlot);\n      this.cards1.splice(targetEmptyIndex, 1, cardToMove);\n      this.recordMove(cardToMoveIndex, targetEmptyIndex, cardToMove, emptySlot);\n      \n      // autoCalc 已经在工厂函数里监听 historyUpdate 事件自动执行，无需手动调用\n    },\n    \n    // 重写clickCard方法，使用GameStateManager记录操作\n    clickCard(card) {\n      // 查找同颜色的下一张牌，要求其后必须有空位\n      let index = this.findNextCard(card, (idx) => this.sign_index >= 0 ? idx == this.sign_index - 1 : this.cards1[idx + 1] < 0);\n      \n      if (index >= 0) {\n        let targetEmptyIndex = index + 1;\n        this.executeMove(card, targetEmptyIndex);\n      } else {\n        console.error(`❌ clickCard: 移动失败 card=${card}, 找不到有效目标位置。Seed:${this.seed}`);\n      }\n      this.sign_index = -1;\n    },\n\n    updateN() {\n      this.n = 0;\n      for (let i = 0; i < this.number * 4 + 4; i++) {\n        if (\n          this.cards1[i] >> 2 ==\n          this.number - 1 - (i % (this.number + 1))\n        ) {\n          this.n++;\n        }\n      }\n    },\n\n    // 重写stepFn方法，使用clickSign/clickCard保持行为一致\n    async stepFn() {\n      // 验证 this.next 是否有效\n      if (!this.next || this.next[0] < 0) {\n        console.error('❌ stepFn: this.next 无效', this.next);\n        \n        // 保存故障状态\n        const errorState = {\n          cards1: [...this.cards1],\n          next: this.next,\n          sign_index: this.sign_index,\n          n: this.n,\n        };\n        console.error('💾 故障状态已保存:', JSON.stringify(errorState));\n        \n        // 检查游戏状态：计算已完成的牌数\n        this.updateN();\n        \n        // 如果所有牌都已完成，标记为胜利；否则标记为失败\n        if (this.n >= (this.number + 1) * 4) {\n          this.gameManager.setWin();\n        }\n        \n        this.gameManager.stopAuto();\n        return;\n      }\n      \n      // 根据用户建议：直接使用 this.executeMove(this.next[0], this.next[1])\n      // this.next[0] = 要移动的卡片\n      // this.next[1] = 目标空位位置\n      \n      await this.gameManager.step(async () => {\n        this.clickSign(this.next[1])\n        await this.wait();\n        this.executeMove(this.next[0], this.next[1]);\n      });\n    },\n    clickSign(i) {\n      let card = this.cards1[i - 1];\n      if (card < 4) {\n        return;\n      }\n      // 查找同颜色的前一张牌\n      let index = this.findPrevCard(card);\n      \n      // 滚动到目标卡片位置\n      if (index >= 0 && typeof window !== 'undefined' && window.document) {\n        const scrollTop = (index % (this.number + 1)) * 150;\n        \n        // 优先滚动 GameLayout 的 wrapper\n        const wrapper = document.querySelector('.game-content-wrapper');\n        if (wrapper) {\n          wrapper.scrollTop = scrollTop;\n        } else {\n          // 降级到传统的 document 滚动\n          document.documentElement.scrollTop = scrollTop;\n          document.body.scrollTop = scrollTop;\n        }\n      }\n      this.sign_index = i;;\n    },\n    \n    // 评估候选牌的优先级得分\n    evaluateCandidateScore(candidate) {\n      if (!candidate || candidate.idx < 0) return -999999;\n      \n      let score = 0;\n      let idx = candidate.idx;\n      \n      // 因素1: 后面是否有空位（决定性因素）\n      if (this.cards1[idx + 1] < 0) {\n        score += 100000;\n      }\n      \n      // 因素2: 位置靠前（列顶）的优先级更高\n      let row = idx % (this.number + 1);\n      score += (this.number - row) * 10;\n      \n      // 因素3: 更倾向于选择花色值小的（保持稳定性）\n      let suit = candidate.card % 4;\n      score += (4 - suit);\n      \n      return score;\n    },\n    // 从多个候选中选择最优的\n    selectBestCandidate(candidates) {\n      if (!candidates || candidates.length === 0) return -1;\n      if (candidates.length === 1) return candidates[0].idx;\n      \n      let bestScore = -999999;\n      let bestIdx = -1;\n      \n      for (let candidate of candidates) {\n        let score = this.evaluateCandidateScore(candidate);\n        \n        if (score > bestScore) {\n          bestScore = score;\n          bestIdx = candidate.idx;\n        }\n      }\n      \n      return bestIdx;\n    },\n    // 基础辅助函数：查找同颜色的相邻牌的索引\n    // offset: +1查找下一张，-1查找前一张\n    // condition: 可选的额外条件检查函数\n    // returnAll: 返回所有候选（用于多路径搜索）\n    findCardByRankOffset(card, offset, condition = null, returnAll = false) {\n      let target_rank = (card >> 2) + offset;\n      let card_group = card % this.matchMode;  // 按 matchMode 分组\n      let candidates = [];\n      \n      // 收集所有同组的候选牌\n      for (let suit = card_group; suit < 4; suit += this.matchMode) {\n        let target_card = target_rank * 4 + suit;\n        let idx = this.cards1.indexOf(target_card);\n        if (idx >= 0) {\n          // 如果提供了条件检查函数，必须满足条件\n          if (!condition || condition(idx)) {\n            candidates.push({ idx, card: target_card });\n          }\n        }\n      }\n      \n      if (returnAll) return candidates;\n      if (candidates.length === 0) return -1;\n      if (candidates.length === 1) return candidates[0].idx;\n      \n      // 有多个候选时，使用评分系统选择最优的\n      return this.selectBestCandidate(candidates);\n    },\n    // 获取所有同颜色的候选牌（用于多路径分析）\n    findAllCardsByRankOffset(card, offset, condition = null) {\n      return this.findCardByRankOffset(card, offset, condition, true);\n    },\n    // 便捷方法：查找同颜色的下一张牌（支持条件检查）\n    findNextCard(card, condition = null) {\n      return this.findCardByRankOffset(card, 1, condition);\n    },\n    // 便捷方法：查找同颜色的前一张牌\n    findPrevCard(card) {\n      return this.findCardByRankOffset(card, -1);\n    },\n    // 判断卡牌是否可移动（用于 shanshuo 闪烁提示）\n    canMoveCard(card) {\n      if (card < 0) return false;\n      // 查找同颜色的下一张牌，检查其后是否有空位\n      let nextIdx = this.findNextCard(card, (idx) => this.cards1[idx + 1] < 0);\n      return nextIdx >= 0;\n    },\n    \n    ...gameEvaluationMethods,\n    autoCalc() {\n      let over = true,\n        temp = {},\n        prior = [],\n        slotsToResetPriority = [];  // 记录需要清空 priority 的空位\n      for (let id = -4; id < 0; id++) {\n        let index = this.cards1.indexOf(id);\n        let card = this.cards1[index - 1];\n        \n        temp[id] = {\n          index,\n          card: card,\n          priority: 0,\n          _in: 0,\n          able: true,\n          bestCard: null,  // 记录深度搜索找到的最优候选牌\n        };\n      }\n      for (let id = -4; id < 0; id++) {\n        let index = temp[id].index;\n        let card = temp[id].card;\n        let dead = [];\n        let candidatePriorities = new Map();  // 存储候选牌与优先级的映射\n        let candidates = this.findAllCardsByRankOffset(card, -1);\n        for (let candidate of candidates) {\n          candidatePriorities.set(candidate.card, 0);\n        }\n        let prevFn = (prev_c, deep, accumulatedPriority = 0) => {\n          if (prev_c < 0) {\n            // 到达空位，累加 priority\n            prior.push([id, prev_c, deep]);\n            temp[prev_c].priority = Math.max(temp[prev_c].priority, ++accumulatedPriority);\n            temp[prev_c]._in++;\n            return accumulatedPriority;\n          } else {\n            if (prev_c >= 48) {\n              return 0;\n            }\n            if (!checkDeadForeach(dead, [prev_c, 0])) return 0;\n            dead.unshift([prev_c, 0]);\n            \n            // 获取所有同颜色的候选\n            let candidates = this.findAllCardsByRankOffset(prev_c, 1);\n            \n            if (candidates.length === 0) {\n              return 0;\n            }\n            \n            // 多候选深度优先搜索：递归评估每个候选的 priority\n            let maxPriority = 0;\n            \n            for (let candidate of candidates) {\n              let next_idx = candidate.idx;\n              let signCard = this.cards1[next_idx + 1];\n              \n              let subPriority = prevFn(signCard, deep, accumulatedPriority);\n              maxPriority = Math.max(maxPriority, subPriority);\n              \n              candidatePriorities.has(candidate.card) && candidatePriorities.set(candidate.card, Math.max(candidatePriorities.get(candidate.card), subPriority));\n            }\n            \n            return maxPriority;\n          }\n        };\n        let nextFn = (next_i, next_c, deep, accumulatedPriority = 0) => {\n          if (!checkDeadForeach(dead, [next_c, 1])) return 0;\n          dead.unshift([next_c, 1]);\n          if (deep > 0 && next_c >= 8) {\n            let prev_c = this.cards1[next_i + 1];\n            prevFn(prev_c, deep, accumulatedPriority);\n          }\n          next_c = this.cards1[next_i - 1];\n          if (next_c < 4) {\n            let n = next_i - 2;\n            let num = 1;\n            while (next_c < 0) {\n              next_c = this.cards1[n];\n              n--;\n              num++;\n            }\n            if (next_c >= num * 4) {\n              prior.push([id, this.cards1[next_i - 1], deep]);\n              let emptySlotId = this.cards1[next_i - 1];\n              temp[emptySlotId].priority = Math.max(temp[emptySlotId].priority, ++accumulatedPriority);\n              temp[emptySlotId]._in++;\n              \n              return accumulatedPriority;\n            }\n            next_c += 4;\n            // 检查是否形成同颜色递增序列\n            while (n % (this.number + 1) > 0) {\n              let card_at_n = this.cards1[n];\n              if (card_at_n >= 0 && \n                  (card_at_n >> 2) == (next_c >> 2) && \n                  (card_at_n % this.matchMode) == (next_c % this.matchMode)) {\n                n--;\n                next_c += 4;\n                deep++;\n              } else {\n                break;\n              }\n            }\n            if (n % (this.number + 1) == 0) {\n              return 0;\n            }\n            let prev_c = this.cards1[this.cards1.indexOf(next_c) + 1];\n            let priority = prevFn(prev_c, deep, accumulatedPriority);\n            \n            // 同步候选卡片的优先级\n            if (candidatePriorities.has(next_c)) {\n              candidatePriorities.set(next_c, Math.max(candidatePriorities.get(next_c), priority));\n            }\n            \n            return priority;\n          }\n          let prevCandidates = this.findAllCardsByRankOffset(next_c, -1);\n          let maxPriority = 0;\n          for (let prevCandidate of prevCandidates) {\n            let priority = nextFn(prevCandidate.idx, next_c, deep, accumulatedPriority);\n            maxPriority = Math.max(maxPriority, priority);\n            \n            // 同步候选卡片的优先级\n            if (candidatePriorities.has(prevCandidate.card)) {\n              candidatePriorities.set(prevCandidate.card, Math.max(candidatePriorities.get(prevCandidate.card), priority));\n            }\n          }\n          return maxPriority;\n        };\n        if (card >= 4) {\n          over = false;\n        }\n        nextFn(index, id, 0);\n        \n        // 深度搜索完成后，查找比 card 小一号的牌（规则：小的放到大的后面）\n        if (card >= 4) {\n          let candidates = this.findAllCardsByRankOffset(card, -1);\n          if (candidates.length > 0) {\n            // 存储所有候选及其优先级\n            let candidatesWithPriority = [];\n            \n            for (let candidate of candidates) {\n              // 模拟移动并检查哈希重复\n              let cardIdx = this.cards1.indexOf(card);\n              if (cardIdx < 0) continue;\n\n              // 创建临时状态来计算哈希\n              let tempCards = [...this.cards1];\n              tempCards[candidate.idx] = id;\n              tempCards[index] = candidate.card;\n              \n              let simulatedHash = tempCards.join(',');\n              \n              // 从深度搜索中获取该候选的优先级\n              let candidatePriority = candidatePriorities.get(candidate.card) || 0;\n              \n              // 计算基于新规则的优先级评分\n              const ruleBasedScore = this.calculateRuleBasedPriority(\n                this,\n                id,\n                { index: index, card: card },\n                candidate.card,\n                candidate.idx\n              );\n              \n              candidatesWithPriority.push({\n                card: candidate.card,\n                idx: candidate.idx,\n                priority: candidatePriority,\n                ruleBasedScore: ruleBasedScore,  // 新增：基于规则的评分\n                stateHash: simulatedHash  // 保存状态哈希用于后续过滤\n              });\n            }\n            \n            // 保存所有候选，留到最后统一比较\n            if (candidatesWithPriority.length > 0) {\n              temp[id].allCandidates = candidatesWithPriority;\n            } else if (candidates.length > 0) {\n              // 如果所有候选都被哈希过滤，记录这个空位以便后续清空 priority\n              slotsToResetPriority.push(id);\n            }\n          }\n        }\n      }\n      \n      // 四次深度搜索结束后，统一清空被哈希过滤的空位的 priority\n      for (let slotId of slotsToResetPriority) {\n        if (temp[slotId]) {\n          temp[slotId].priority = 0;\n        }\n      }\n      \n      if (over) {\n        this.updateN();\n        if (this.n >= (this.number + 1) * 4) {\n          this.gameManager.setWin();\n        } else {\n          this.gameManager.setLose();\n        }\n        return;\n      }\n      let signs = [-1, -2, -3, -4];\n      while (signs.length > 0) {\n        let ind;\n        for (ind = 0; ind < signs.length; ind++) {\n          if (temp[signs[ind]]._in <= 0) {\n            break;\n          }\n        }\n        if (ind < signs.length) {\n          let s = signs.splice(ind, 1)[0];\n          let j = 0;\n          while (j < prior.length) {\n            if (prior[j][0] == s) {\n              temp[prior[j][1]]._in--;\n              temp[prior[j][1]].deep = prior[j][2];\n              prior.splice(j, 1);\n              temp[s].able = false;\n            } else {\n              j++;\n            }\n          }\n        } else {\n          let road = [signs[0]];\n          while (prior.length > 0) {\n            let p = prior.findIndex((t) => t[1] == road[0]);\n            let index = road.indexOf(prior[p][0]);\n            if (index >= 0) {\n              temp[prior[p][1]]._in--;\n              prior.splice(p, 1);\n              for (let i = 0; i < index; i++) {\n                for (let j = 0; j < prior.length; j++) {\n                  if (prior[j][0] == road[i] && prior[j][1] == road[i + 1]) {\n                    temp[prior[j][1]]._in--;\n                    prior.splice(j, 1);\n                    break;\n                  }\n                }\n              }\n              break;\n            }\n            road.unshift(prior[p][0]);\n          }\n        }\n      }\n      this.next = [-1, -1];\n      let bestCandidate = null;\n      \n      // 遍历所有空位的所有候选，选择最优的\"空位+候选\"组合\n      for (let i = -4; i < 0; i++) {\n        let t = temp[i];\n        \n        // 跳过前面不是有效卡片的空位\n        if (t.card < 4) {\n          continue;\n        }\n        \n        // 获取该空位的所有候选\n        let allCandidates = t.allCandidates;\n        if (!allCandidates || allCandidates.length === 0) {\n          continue;\n        }\n        \n        // 验证：t.index 位置是否是空位\n        if (this.cards1[t.index] >= 0) {\n          continue;\n        }\n        \n        // 遍历该空位的所有候选\n        for (let candidateInfo of allCandidates) {\n          let targetCard = candidateInfo.card;\n          let candidatePriority = candidateInfo.priority;\n          let ruleBasedScore = candidateInfo.ruleBasedScore; // 获取基于规则的评分\n          \n          // 验证：targetCard 是否存在\n          let currentTargetIdx = this.cards1.indexOf(targetCard);\n          if (currentTargetIdx < 0) {\n            continue;\n          }\n          \n          // 检查状态哈希是否重复，如果重复则跳过\n          if (this.isStateHashRepeated(candidateInfo.stateHash)) {\n            allCandidates.splice(allCandidates.indexOf(candidateInfo), 1);\n            continue;\n          }\n\n          // 排除规则1：候选卡的rank等于同匹配组位置号-1的卡的rank-1\n          // 找到候选卡所在列的位置号-1的卡\n          const prevPosInCandidateCol = currentTargetIdx - 1;\n          const prevCardInCandidateCol = this.cards1[prevPosInCandidateCol];\n          if (prevCardInCandidateCol >= 0) {\n            const prevRankInCandidateCol = prevCardInCandidateCol >> 2;\n            const prevSuitInCandidateCol = prevCardInCandidateCol % 4;\n            const prevGroupInCandidateCol = prevSuitInCandidateCol % this.matchMode;\n            \n            // 如果是同匹配组，且候选卡rank = 该卡rank - 1，则排除\n            if (targetCard % this.matchMode === prevGroupInCandidateCol && (targetCard >> 2) === prevRankInCandidateCol - 1) {\n              continue;\n            }\n          }\n          \n          // 使用导入的工具函数创建候选对象，传入rule-based评分\n          const currentCandidate = createCandidate(targetCard, t.index, this, candidatePriority, t, currentTargetIdx, ruleBasedScore);\n          \n          // 判断是否替换最佳候选\n          if (!bestCandidate || isBetterCandidate(currentCandidate, bestCandidate)) {\n            bestCandidate = currentCandidate;\n            // 更新最佳移动\n            this.next = [currentCandidate.targetCard, currentCandidate.slotIndex];\n          }\n        }\n      }\n      \n      // isBetterCandidate函数已从candidateUtils.js导入，此处不再重复定义\n      \n      \n      // 如果没有找到有效移动，检查游戏状态\n      if (this.next[0] < 0) {\n        \n        // 检查四个空位的 priority 是否都为 0（只检查前面是有效卡片且有候选的空位）\n        let allPrioritiesZero = true;\n        let validSlotCount = 0;\n        for (let i = -4; i < 0; i++) {\n          if (temp[i] && temp[i].card >= 4) {\n            validSlotCount++;\n            // 只有既有 priority 又有候选的空位才算有效移动\n            const allCandidates = temp[i].allCandidates;\n            if (temp[i].priority > 0 && allCandidates && allCandidates.length > 0) {\n              allPrioritiesZero = false;\n            }\n          }\n        }\n        \n        // 计算已完成的牌数\n        this.updateN();\n        \n        // 如果所有牌都已完成，标记为胜利\n        if (this.n >= this.number * 4) {\n          this.gameManager.setWin();\n        } else if (allPrioritiesZero && validSlotCount > 0) {\n          // 仅当有有效空位且所有 priority 都为 0 时才设置失败\n          this.gameManager.setLose();\n        }\n      } else {\n        this.updateN();\n      }\n    },\n    \n    // 设置匹配难度\n    setMatchMode(mode) {\n      if ([1, 2, 4].includes(mode)) {\n        this.matchMode = mode;\n        this.init();  // 重新初始化游戏\n        console.log(`✅ 难度已设置为: ${mode === 1 ? '简单(数值)' : mode === 2 ? '中等(颜色)' : '困难(花色)'}`);\n      } else {\n        console.error('❌ 无效的难度模式，请使用 1, 2 或 4');\n      }\n    },\n    \n    // 获取当前难度的描述\n    getMatchModeDescription() {\n      const descriptions = {\n        1: '简单(数值匹配) - 任意点数相同即可连接',\n        2: '中等(颜色匹配) - 同颜色的牌可以连接',\n        4: '困难(花色匹配) - 必须同花色才能连接'\n      };\n      return descriptions[this.matchMode] || '未知难度';\n    },\n    \n    /**\n     * 渲染文本视图 - 显示当前游戏状态\n     * 用于终端交互式游戏\n     */\n    renderTextView() {\n      console.log('\\n╔════════════════════════════════════════════════╗');\n      console.log('║                排序游戏 (Sort)                ║');\n      console.log('╚════════════════════════════════════════════════╝');\n      console.log(`\\n难度: ${this.getMatchModeDescription()}`);\n      console.log(`完成度: ${this.n} / ${(this.number + 1) * 4} 张\\n`);\n      console.log('\\n图例: [-n] = 无卡牌可放入  [?X] = 有卡牌可放入  * = 可移动  → = 推荐移动');\n      \n      // 显示下一步提示\n      if (this.next && this.next[0] >= 0) {\n        const targetCard = getCardPlaceholderText(this.next[0]);\n        const targetSlotCard = this.cards1[this.next[1]];\n        const targetSlot = targetSlotCard < 0 ? ['[-1]', '[-2]', '[-3]', '[-4]'][Math.abs(targetSlotCard) - 1] : `[${this.next[1]}]`;\n        console.log(`\\n💡 建议移动: ${targetCard} → ${targetSlot}`);\n      }\n      \n      // 表格格式显示所有列\n      const colWidth = this.number + 1;\n      \n      // 创建表头（带行号列）\n      let header = '┌────┬';\n      let headerRow = '│    │';\n      let separator = '├────┼';\n      let footer = '└────┴';\n      \n      for (let col = 0; col < 4; col++) {\n        header += '───────┬';\n        headerRow += `  列${col + 1}  │`;\n        separator += '───────┼';\n        footer += '───────┴';\n      }\n      \n      header = header.slice(0, -1) + '┐';\n      headerRow = headerRow.slice(0, -1) + '│';\n      separator = separator.slice(0, -1) + '┤';\n      footer = footer.slice(0, -1) + '┘';\n      \n      console.log(header);\n      console.log(headerRow);\n      console.log(separator);\n      \n      // 按行显示卡片（从上到下）\n      for (let row = 0; row < colWidth; row++) {\n        let rowStr = `│行${(row + 1).toString().padStart(2)}│`;\n        \n        for (let col = 0; col < 4; col++) {\n          const idx = col * colWidth + row;\n          const card = this.cards1[idx];\n          \n          let cellContent = '';\n          let highlight = '';\n          \n          if (card < 0) {\n            // 空位 - 检查是否有卡牌可以放入\n            const emptySlotIndex = Math.abs(card) - 1; // 0, 1, 2, 3\n            const prevCardIndex = idx - 1;\n            const prevCard = this.cards1[prevCardIndex];\n            // 没有可放入的卡牌，显示负数ID\n            const emptyLabel = ['[-1]', '[-2]', '[-3]', '[-4]'][emptySlotIndex];\n            cellContent = emptyLabel;\n            \n            if (prevCard >= 4) { // 前面有有效卡牌\n              const candidates = this.findAllCardsByRankOffset(prevCard, -1);\n              if (candidates && candidates.length > 0) {\n                // 有可放入的卡牌，显示问号格式\n                const firstCandidate = candidates[0];\n                const candidateText = getCardPlaceholderText(firstCandidate.card);\n                cellContent = `[?${candidateText.slice(1)}]`; // 替换第一个字符为问号\n              }\n            }\n          } else {\n            // 有效卡片\n            const cardText = getCardPlaceholderText(card);\n            const canMove = this.canMoveCard(card);\n            const isTarget = this.next && this.next[0] === card;\n            \n            if (isTarget) {\n              highlight = '→'; // 下一步建议\n              cellContent = `${highlight}${cardText}`;\n            } else if (canMove) {\n              highlight = '*'; // 可移动\n              cellContent = `${highlight}${cardText}`;\n            } else {\n              cellContent = cardText;\n            }\n          }\n          \n          // 居中对齐\n          const padding = Math.max(0, 7 - cellContent.length);\n          const leftPad = Math.floor(padding / 2);\n          const rightPad = padding - leftPad;\n          \n          rowStr += ' '.repeat(leftPad) + cellContent + ' '.repeat(rightPad) + '│';\n        }\n        \n        console.log(rowStr);\n      }\n      \n      console.log(footer);\n      \n      return '渲染完成';\n    },\n\n    sendCustomButtons() {\n      const nextMode = this.matchMode === 1 ? 2 : this.matchMode === 2 ? 4 : 1;\n      this.customButtons.push({\n        action: 'difficulty',\n        label: 'MODE',\n        method: 'setMatchMode',\n        args: [nextMode],\n        description: 'SWITCH DIFFICULTY MODE (EASY → NORMAL → HARD)'\n      });\n    },\n  },\n  \n  // 以下方法由工厂函数GameComponentPresets.puzzleGame添加：\n  // wait(): Promise<void> - 等待指定时间，用于游戏步骤延迟\n  // undo(): void - 撤销上一步操作\n  // pass(): void - 跳过当前步骤\n  // goon(): void - 继续游戏\n  // goBack(): void - 返回上一状态\n  // step(fn: Function): Promise<void> - 执行游戏步骤\n  // executeMethodWithRenderToString(method: string, ...args: any[]): Promise<void> - 执行方法并渲染\n  \n  /**\n   * 组件挂载时注册自定义按钮\n   */\n  created() {\n    this.sendCustomButtons();\n  },\n  \n  /**\n   * 当matchMode变化时，更新自定义按钮\n   */\n  watch: {\n    matchMode() {\n      this.sendCustomButtons();\n    },\n    \n    // 保留原有的cards1监听\n    cards1: {\n      handler() {\n        this.$nextTick(() => {\n          this.updateAllCandidateCycling();\n        });\n      },\n      deep: true\n    }\n  },\n  \n\n};\n\n// 使用工厂函数创建增强的Sort组件并导出\nexport default GameComponentPresets.puzzleGame(Sort, 500);\n\n/**\n * 工厂函数GameComponentPresets.puzzleGame为Sort组件添加的功能：\n * \n * 基础增强功能（来自createEnhancedGameComponent）：\n * - gameManager属性：提供游戏状态管理、自动模式控制和步骤执行\n * - customButtons属性：存储自定义按钮配置\n * - displayButtons计算属性：决定显示哪些游戏控制按钮\n * - gameControlsConfig计算属性：游戏控制配置\n * - wait()、undo()、pass()、goon()等方法：游戏控制方法\n * - created和beforeUnmount生命周期钩子：管理游戏状态和事件监听\n * \n * puzzleGame特有功能：\n * - 提供拼图游戏相关的自动操作和状态管理\n * - 支持自动步骤延迟配置（此处设置为500ms）\n */\n","import { render } from \"./Sort.vue?vue&type=template&id=f9e286c6&scoped=true\"\nimport script from \"./Sort.vue?vue&type=script&lang=js\"\nexport * from \"./Sort.vue?vue&type=script&lang=js\"\n\nimport \"./Sort.vue?vue&type=style&index=0&id=f9e286c6&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-f9e286c6\"]])\n\nexport default __exports__","<template>\n  <GameLayout\n    v-bind=\"gameLayoutProps\"\n    @goon=\"goon\"\n    @step=\"stepFn\"\n    @auto=\"pass\"\n  >\n    <template #game-content>\n      <div class=\"row\">\n        <span>TIME: {{ time }}</span>\n        <br />\n        <span>STEP: {{ step }}</span>\n      </div>\n      <div class=\"row\">\n        <div>\n          <ul\n            class=\"cardsul flex-row center\"\n            style=\"padding-left: 0; margin: 0\"\n          >\n            <CardImage\n              v-for=\"(item, i) in cardPositions\"\n              :key=\"i\"\n              class=\"card m-0 radius\"\n              style=\"max-width: 25%\"\n              :card-id=\"selectedCard == item || secondSelectedCard == item || matchedCards[item] ? item : 'bg'\"\n              @click=\"(selectedCard != item && secondSelectedCard != item && !matchedCards[item]) && canOperate && clickCard(i)\"\n            />\n          </ul>\n        </div>\n      </div>\n    </template>\n\n    <template #win-content>\n      <h1 class=\"small\">TIME: {{ time }}</h1>\n      <h1 class=\"small\">STEP: {{ step }}</h1>\n    </template>\n  </GameLayout>\n</template>\n\n<script>\nimport PairsComponent from \"./Pairs.js\";\n\nconst component = PairsComponent;\n\nexport default component;\n</script>\n\n<style scoped>\n@import url(\"./sum.css\");\n</style>\n","import { shuffleCards } from \"../utils/help.js\";\nimport { GameComponentPresets } from \"../utils/gameComponentFactory.js\";\nimport { getCardPlaceholderText } from \"../utils/cardUtils.js\";\n\n/**\n * Pairs对象定义了记忆配对游戏的基础组件，将传递给GameComponentPresets.pairGame工厂函数\n * 工厂函数会为该组件添加游戏管理、按钮控制、自动操作等功能\n */\n\nconst Pairs = {\n  name: \"Pairs\",\n  data() {\n    return {\n      title: \"Pairs\",\n      // 存储牌的位置映射\n      cardPositions: [],\n      // 标记牌是否已配对\n      matchedCards: [],\n      // 标记牌是否已被查看过\n      seenCards: [],\n      // 当前选中的第一张牌索引\n      selectedCard: -1,\n      // 当前选中的第二张牌索引\n      secondSelectedCard: -2,\n      // 游戏时间（秒）\n      time: 0,\n      // 计时器引用\n      _timer: 0,\n      // 牌的总数\n      totalCards: 48,\n      // 未使用的变量\n      n: 0,\n      \n      // 以下属性由工厂函数GameComponentPresets.pairGame添加：\n      // gameManager: 游戏管理器实例，提供游戏状态控制和自动操作功能\n      // customButtons: 自定义按钮数组，用于存储游戏控制按钮配置\n      // seed: 随机种子，用于确保游戏结果可重现\n      // hitflag: 标记是否可以执行命中操作\n    };\n  },\n  created() {\n    this.sendCustomButtons();\n  },\n  methods: {\n    /**\n     * 初始化游戏状态\n     */\n    init() {\n      // 重置游戏计时器\n      this.time = 0;\n      clearInterval(this._timer);\n      this._timer = 0;\n      \n      // 重置选中状态\n      this.selectedCard = -1;\n      this.secondSelectedCard = -1;\n      \n      // 清空数组\n      this.cardPositions.splice(0);\n      this.seenCards.splice(0);\n      this.matchedCards.splice(0);\n      \n      // 创建牌并打乱顺序\n      const cardPositions = this.cardPositions;\n      for (let i = 0; i < this.totalCards; i++) {\n        cardPositions.push(i);\n        this.matchedCards.push(false);\n      }\n      \n      shuffleCards(cardPositions, this.totalCards);\n    },\n    /**\n     * 处理卡片点击事件\n     * @param {number} [rowOrPositionIndex] - 行号(当第二个参数存在时)或位置索引\n     * @param {number} [col] - 列号(可选)\n     */\n    async clickCard(rowOrPositionIndex, col) {\n      let positionIndex;\n      let cardId;\n      \n      // 处理不同参数情况\n      if (rowOrPositionIndex === undefined) {\n        // 不传参数时，选择一张未查看过的牌\n        let found = false;\n        \n        // 遍历所有位置查找未查看过的牌\n        for (positionIndex = 0; positionIndex < this.totalCards; positionIndex++) {\n          cardId = this.cardPositions[positionIndex];\n          if (!this.seenCards[cardId] && !this.matchedCards[cardId]) {\n            found = true;\n            break;\n          }\n        }\n        \n        // 如果所有牌都被看过，重置seen数组\n        if (!found) {\n          // 清空seen数组\n          this.seenCards.splice(0);\n          // 再次查找第一张未配对的牌\n          for (positionIndex = 0; positionIndex < this.totalCards; positionIndex++) {\n            cardId = this.cardPositions[positionIndex];\n            if (!this.matchedCards[cardId]) {\n              break;\n            }\n          }\n        }\n      } else if (col !== undefined) {\n        // 传入两个参数时，视为行号和列号\n        // 假设6行8列的布局\n        const gridColumns = 8;\n        positionIndex = rowOrPositionIndex * gridColumns + col;\n        cardId = this.cardPositions[positionIndex];\n      } else {\n        // 传入一个参数时，视为位置索引\n        positionIndex = rowOrPositionIndex;\n        cardId = this.cardPositions[positionIndex];\n      }\n      \n      // 启动游戏计时器（首次点击时）\n      if (!this._timer) {\n        this._timer = setInterval(() => {\n          this.time++;\n        }, 1000);\n      }\n      \n      // 忽略已经选中的牌或已经配对的牌\n      if (this.selectedCard === cardId || this.matchedCards[cardId]) {\n        return;\n      }\n      \n      // 标记牌为已查看\n      this.seenCards[cardId] = true;\n      \n      // 记录操作\n      this.gameManager.recordOperation();\n      \n      // 如果还没有选中第一张牌，将当前牌设为第一张\n      if (this.selectedCard < 0) {\n        this.selectedCard = cardId;\n        return;\n      }\n      \n      // 检查两张牌是否匹配（使用位运算判断是否属于同一组）\n      const isMatched = (this.selectedCard >> 2) === (cardId >> 2);\n      \n      if (isMatched) {\n        // 匹配成功，标记两张牌为已配对\n        this.matchedCards.splice(cardId, 1, true);\n        this.matchedCards.splice(this.selectedCard, 1, true);\n        this.selectedCard = -1;\n      }\n      \n      // 记录第二张选中的牌\n      this.gameManager.hitflag = false;\n      this.secondSelectedCard = cardId;\n      \n      // 等待一段时间让用户看到第二张牌\n      await this.wait();\n      \n      // 重置选中状态\n      this.selectedCard = -1;\n      this.secondSelectedCard = -1;\n      this.gameManager.hitflag = true;\n\n      // 检查游戏是否结束\n      const isGameOver = this.checkGameCompletion();\n\n      if (isGameOver) {\n        this.gameManager.setWin();\n        clearInterval(this._timer);\n        this._timer = 0;\n      }\n    },\n    \n    /**\n     * 检查游戏是否完成\n     * @returns {boolean} - 如果所有牌都已配对，返回true\n     */\n    checkGameCompletion() {\n      for (let i = 0; i < this.totalCards; i++) {\n        if (!this.matchedCards[i]) {\n          return false;\n        }\n      }\n      return true;\n    },\n    /**\n     * 自动执行游戏步骤（AI模式）\n     */\n    async stepFn() {\n      // 如果已经选中了第一张牌，尝试找出匹配的牌\n      if (this.selectedCard >= 0) {\n        // 查找同一组中的其他牌\n        const groupStartIndex = this.selectedCard - (this.selectedCard % 4);\n        for (let i = 0; i < 4; i++) {\n          const targetCardId = groupStartIndex + i;\n          // 跳过当前已选中的牌，选择已查看但未配对的牌\n          if (targetCardId !== this.selectedCard && \n              this.seenCards[targetCardId] && \n              !this.matchedCards[targetCardId]) {\n            // 找到对应牌ID的位置索引\n            const positionIndex = this.cardPositions.indexOf(targetCardId);\n            if (positionIndex !== -1) {\n              return await this.clickCard(positionIndex);\n            }\n          }\n        }\n      } else {\n        // 没有选中牌时，尝试找出已查看过的多张相同组的牌\n        let seenInGroupCount;\n        for (let i = 0; i < this.totalCards; i++) {\n          // 每组牌开始时重置计数器\n          if (i % 4 === 0) {\n            seenInGroupCount = 0;\n          }\n          \n          if (this.seenCards[i] && !this.matchedCards[i]) {\n            seenInGroupCount++;\n          }\n          \n          // 如果在同一组中看到多张未配对的牌，选择当前牌\n          if (seenInGroupCount > 1) {\n            // 找到对应牌ID的位置索引\n            const positionIndex = this.cardPositions.indexOf(i);\n            if (positionIndex !== -1) {\n              return await this.clickCard(positionIndex);\n            }\n          }\n        }\n      }\n      \n      // 如果没有明确的匹配策略，调用不带参数的clickCard函数\n      // 它会自动选择未查看过的牌，或在所有牌都看过时重置seen数组\n      return await this.clickCard();\n    },\n    \n    /**\n     * 渲染文本视图 - 显示当前游戏状态\n     * 用于终端交互式游戏\n     */\n    renderTextView() {\n      // 打印游戏标题\n      console.log('\\n╔════════════════════════════════════════════════╗');\n      console.log('║              配对游戏 (Pairs)                 ║');\n      console.log('╚════════════════════════════════════════════════╝');\n      \n      // 显示统计信息\n      const matchedCount = this.matchedCards.filter(m => m).length;\n      console.log(`\\n时间: ${this.time}秒 | 已配对: ${matchedCount}/${this.totalCards} 张\\n`);\n      \n      // 显示图例\n      console.log('\\n图例:');\n      console.log('  [?] = 未翻开  [✓] = 已看过  > = 第一张  * = 第二张');\n      \n      // 显示当前选中的牌\n      if (this.selectedCard >= 0) {\n        console.log(`\\n当前选中: ${getCardPlaceholderText(this.selectedCard)} (需要配对)`);\n      } else {\n        console.log('\\n');\n      }\n      \n      // 按6x8网格显示 - 与Vue模板保持一致\n      const gridColumns = 8;\n      const gridRows = 6;\n      \n      for (let row = 0; row < gridRows; row++) {\n        let line = '  ';\n        for (let col = 0; col < gridColumns; col++) {\n          const gridPosition = row * gridColumns + col;\n          const cardId = this.cardPositions[gridPosition]; // 获取该位置的牌ID\n          \n          // 检查这张牌是否被翻开或选中\n          const isFlipped = this.matchedCards[cardId] || \n                           cardId === this.selectedCard || \n                           cardId === this.secondSelectedCard;\n          const isSeen = this.seenCards[cardId];\n          \n          if (isFlipped) {\n            // 已翻开或当前选中\n            const cardText = getCardPlaceholderText(cardId);\n            const prefix = cardId === this.selectedCard ? '>' : \n                          (cardId === this.secondSelectedCard ? '*' : '');\n            line += `${(prefix + cardText).padEnd(3)} `;\n          } else if (isSeen) {\n            line += '[✓] ';\n          } else {\n            // 未翻开\n            line += '[?] ';\n          }\n        }\n        console.log(line);\n      }\n      \n      return '渲染完成';\n    },\n    \n    sendCustomButtons() {\n      // 添加Spider游戏特有的发牌按钮（如果牌堆有牌）\n      this.customButtons.push({\n        action: 'clickCard',\n        label: 'CLICK',\n        method: 'clickCard',\n        args: [],\n        description: 'CLICK ONE CARD'\n      });\n    },\n    // 注意：以下方法可能由工厂函数添加：\n    // - wait(): 延迟函数\n    // - getActions(): 获取可用操作列表\n    // - 其他游戏通用方法\n  },\n  \n  // 以下方法由工厂函数GameComponentPresets.pairGame添加：\n  // wait(): Promise<void> - 等待指定时间，用于游戏步骤延迟\n  // undo(): void - 撤销上一步操作\n  // pass(): void - 跳过当前步骤\n  // goon(): void - 继续游戏\n  // goBack(): void - 返回上一状态\n  // step(fn: Function): Promise<void> - 执行游戏步骤\n  // executeMethodWithRenderToString(method: string, ...args: any[]): Promise<void> - 执行方法并渲染\n  // getActions(): Array<Object> - 获取当前可用的操作列表\n  // setSeed(seed: number): void - 设置随机种子\n  // getAvailableActions(): Array<Object> - 获取可用操作（终端交互用）\n  // setWin(): void - 设置游戏胜利状态\n  // setLose(): void - 设置游戏失败状态\n  // setDraw(): void - 设置游戏平局状态\n  // sendCustomButtons(): void - 发送自定义按钮配置（组件已实现）\n};\n\n// 使用工厂函数创建增强的Pairs组件并导出\nexport default GameComponentPresets.pairGame(Pairs, 500);\n\n/**\n * 工厂函数GameComponentPresets.pairGame为Pairs组件添加的功能：\n * \n * 基础增强功能（来自createEnhancedGameComponent）：\n * - gameManager属性：提供游戏状态管理、自动模式控制和步骤执行\n * - customButtons属性：存储自定义按钮配置\n * - displayButtons计算属性：决定显示哪些游戏控制按钮\n * - gameControlsConfig计算属性：游戏控制配置\n * - wait()、undo()、pass()、goon()等方法：游戏控制方法\n * - created和beforeUnmount生命周期钩子：管理游戏状态和事件监听\n * - setWin()、setLose()、setDraw()方法：设置游戏结果状态\n * - setSeed()方法：设置随机种子\n * - getAvailableActions()方法：获取可用操作（终端交互用）\n * \n * pairGame特有功能：\n * - seed属性：随机种子，确保游戏可重现\n * - hitflag属性：标记是否可以执行命中操作（组件中已使用）\n * - getActions()方法：获取当前可用的操作列表\n * - 提供配对游戏相关的自动操作和状态管理\n * - 支持自动步骤延迟配置（此处设置为500ms）\n * \n * 注意事项：\n * - 组件实现了自己的sendCustomButtons()方法\n * - 游戏使用了自定义的计时器和游戏结束检查逻辑\n */\n","import { render } from \"./Pairs.vue?vue&type=template&id=0f05094e&scoped=true\"\nimport script from \"./Pairs.vue?vue&type=script&lang=js\"\nexport * from \"./Pairs.vue?vue&type=script&lang=js\"\n\nimport \"./Pairs.vue?vue&type=style&index=0&id=0f05094e&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-0f05094e\"]])\n\nexport default __exports__","<template>\n  <GameLayout\n    v-bind=\"gameLayoutProps\"\n    @undo=\"undo\"\n    @goon=\"goon\"\n    @step=\"stepFn\"\n    @auto=\"pass\"\n  >\n    <template #game-content>\n      <div class=\"row\">\n        <div calss=\"center\">\n          <ul\n            ref=\"container\"\n            class=\"cardsul rela center\"\n            style=\"padding-left: 0; max-width: 31.25rem; margin: auto\"\n            :style=\"{ height: height / 16 + 'rem' }\"\n          >\n            <CardImage\n              card-id=\"bg\"\n              :hide=\"cards[0].length === 0\"\n              class=\"m-0 static card m-0 abso\"\n              style=\"\n                max-width: 6.25rem;\n                width: 25%;\n                height: 9.375rem;\n                z-index: 0;\n                left: 0;\n                top: 0;\n              \"\n              @click=\"canOperate && clickCard(0)\"\n            />\n            <li\n              class=\"cards m-0 static\"\n              style=\"width: 50%; height: 9.375rem\"\n              :style=\"{ zIndex: dragItem == 1 ? 10 : 0 }\"\n              :class=\"{ drag: dragItem == 1 }\"\n            >\n              <CardImage\n                v-for=\"i in cards[1].length >= (turn > 3 ? 1 : 4 - turn)\n                  ? turn > 3\n                    ? 1\n                    : 4 - turn\n                  : cards[1].length\"\n                :key=\"cards[1][i - 1] + (fresh[1] * 3 + 1) * number\"\n                class=\"m-0 card abso\"\n                style=\"width: 25%; top: 0\"\n                :style=\"{ left: (3 - i) * 12.5 + 25 + '%', zIndex: 3 - i }\"\n                v-move=\"{ start, end, move }\"\n                :class=\"{\n                  drag: dragItem == 1,\n                  opa0: dragCard == cards[1][i - 1] && enterItem >= 0,\n                  shanshuo: sign == cards[1][i - 1],\n                }\"\n                :card-id=\"cards[1][i - 1]\"\n              />\n            </li>\n            <li\n              class=\"m-0 center\"\n              style=\"width: 25%; max-width: 6.25rem; height: 9.375rem\"\n            >\n              <span\n                class=\"m-0\"\n                :style=\"{ color: turn > 3 ? 'red' : 'inherit' }\"\n                >{{ turn }}</span\n              ><span class=\"m-0\">/3</span>\n            </li>\n            <li style=\"height: 1.875rem; width: 100%\"></li>\n            <li\n              v-for=\"i in 4\"\n              :key=\"i\"\n              class=\"cards m-0 static center\"\n              style=\"width: 25%; height: 9.375rem\"\n              :class=\"{ drag: dragItem == i + 1 }\"\n              ref=\"middleBox\"\n              :style=\"{ zIndex: dragItem == i + 1 ? 10 : 1 }\"\n              @mouseenter=\"enter(i + 1)\"\n              @touchenter=\"enter(i + 1)\"\n              @mouseleave=\"leave(i + 1)\"\n              @touchleave=\"leave(i + 1)\"\n            >\n              <div\n                class=\"card m-0 abso\"\n                style=\"top: 11.25rem; width: 25%\"\n                @click=\"canOperate && clickCard(i + 1)\"\n                :style=\"{\n                  zIndex: dragItem == i + 1 ? 10 : 1,\n                  left: (i - 1) * 25 + '%',\n                }\"\n              >\n                <span class=\"m-0\">{{ types[i - 1] + \"A\" }}</span>\n              </div>\n              <CardImage\n                v-for=\"item in cards[i + 1]\"\n                :key=\"item + (fresh[i + 1] * 3 + 2) * number\"\n                class=\"card m-0 abso\"\n                style=\"top: 11.25rem; width: 25%\"\n                :style=\"{ left: (i - 1) * 25 + '%' }\"\n                v-move=\"{ start, end, move }\"\n                :class=\"{\n                  drag: dragItem == i + 1,\n                  shanshuo: sign == item,\n                  opa0: dragCard == item && enterItem >= 0,\n                }\"\n                :card-id=\"item\"\n              />\n              <CardImage\n                :card-id=\"dragCard\"\n                :style=\"{ left: (i - 1) * 25 + '%' }\"\n                class=\"card m-0 abso\"\n                v-show=\"dragCard >= 0 && enterItem == i + 1\"\n                style=\"width: 25%; height: 9.375rem; top: 11.25rem\"\n              />\n            </li>\n            <li style=\"height: 1.875rem; width: 100%\"></li>\n            <li\n              v-for=\"i in 4\"\n              :key=\"i + 4\"\n              class=\"cards m-0 static\"\n              style=\"width: 25%\"\n              :class=\"{ drag: dragItem == i + 5 }\"\n              :style=\"{\n                height: (cards[i + 5].length * 30 + 120) / 16 + 'rem',\n                zIndex: dragItem == i + 5 ? 10 : 1,\n              }\"\n              ref=\"downBox\"\n              @mouseenter=\"enter(i + 5)\"\n              @touchenter=\"enter(i + 5)\"\n              @mouseleave=\"leave(i + 5)\"\n              @touchleave=\"leave(i + 5)\"\n            >\n              <CardImage\n                v-for=\"(item, j) in cards[i + 5]\"\n                :key=\"item + (fresh[i + 5] * 3 + 3) * number\"\n                class=\"m-0 card abso\"\n                style=\"width: 25%; height: 9.375rem\"\n                :style=\"{\n                  top: (j * 30 + 360) / 16 + 'rem',\n                  left: (i - 1) * 25 + '%',\n                }\"\n                :class=\"{\n                  drag: dragItem == i + 5,\n                  opa0: dragItem == i + 5 && dragCard >= item && enterItem >= 0,\n                  shanshuo: sign == item,\n                }\"\n                v-move=\"{ start, end, move }\"\n                ref=\"down\"\n                :card-id=\"item\"\n              />\n              <CardImage\n                v-for=\"(item, j) in cards[dragItem]\"\n                :key=\"j + 8\"\n                :card-id=\"item\"\n                :style=\"{\n                  top:\n                    (cards[i + 5].length * 30 +\n                      (j - cards[dragItem].indexOf(dragCard)) * 30 +\n                      360) /\n                      16 +\n                    'rem',\n                  left: (i - 1) * 25 + '%',\n                }\"\n                class=\"card m-0 abso\"\n                v-show=\"\n                  enterItem == i + 5 &&\n                  ((dragItem >= 6 && dragCard >= item) || dragCard == item)\n                \"\n                style=\"width: 25%; height: 9.375rem\"\n              />\n            </li>\n          </ul>\n        </div>\n      </div>\n    </template>\n  </GameLayout>\n</template>\n\n<script>\nimport SpiderComponent from \"./Spider.js\";\n\nconst component = SpiderComponent;\n\nexport default component;\n</script>\n\n<style scoped>\n@import url(\"./sum.css\");\n.card,\n.cards {\n  z-index: 1;\n}\n.drag {\n  pointer-events: none;\n  z-index: 0;\n}\n.opa0 {\n  opacity: 0;\n}\n</style>\n","var move = {};\nvar getPosition = function (e, isTouch) {\n  if (isTouch) {\n    e = e.touches[0];\n  }\n  return [e.clientX, e.clientY];\n};\nvar updateMoveData = function (el, e, isTouch) {\n  const data = el._moveData;\n  data.position = getPosition(e, isTouch);\n  data.offsetX = data.position[0] - data.startPosition[0];\n  data.offsetY = data.position[1] - data.startPosition[1];\n};\nvar prevent = function (e, bubbles) {\n  e.cancelable && e.preventDefault();\n  !bubbles && e.stopPropagation();\n  return false;\n};\nvar emit = (el, name, detail, bubbles, cancelable) => {\n  el.dispatchEvent(\n    new CustomEvent(name, {\n      detail,\n      bubbles,\n      cancelable,\n    }),\n  );\n};\nmove.emit = emit;\nvar listenEvents = (el, events, handles = {}) => {\n  for (const name of events) {\n    typeof handles[name] === \"function\" &&\n      el.addEventListener(name, handles[name]);\n  }\n};\nmove.listenEvents = listenEvents;\nmove.mounted = function (el, binding, vnode) {\n  if (el._isInitMove) {\n    return;\n  }\n  el._isInitMove = true;\n  var { page = window } = binding.value || {};\n  var { bubbles } = binding.modifiers;\n  listenEvents(el, [\"start\", \"move\", \"end\"], binding.value);\n  var isMove = false;\n  var isTouch;\n\n  function cancel() {\n    isMove = false;\n    el.removeEventListener(\"cancel\", cancel);\n    if (isTouch) {\n      page.removeEventListener(\"touchend\", _end);\n      page.removeEventListener(\"touchmove\", _move);\n      page.removeEventListener(\"touchcancel\", _end);\n    } else {\n      page.removeEventListener(\"mouseup\", _end);\n      page.removeEventListener(\"mousemove\", _move);\n    }\n  }\n\n  function _start(e) {\n    isTouch = e.type === \"touchstart\";\n    el.addEventListener(\"cancel\", cancel);\n    if (isTouch) {\n      page.addEventListener(\"touchend\", _end, { passive: false });\n      page.addEventListener(\"touchmove\", _move, { passive: false });\n      page.addEventListener(\"touchcancel\", _end, { passive: false });\n    } else {\n      page.addEventListener(\"mouseup\", _end, { passive: false });\n      page.addEventListener(\"mousemove\", _move, { passive: false });\n    }\n    if (!el._moveData) {\n      el._moveData = { isTouch };\n    }\n    el._moveData.startPosition = getPosition(e, isTouch);\n    // updateMoveData(el, e, isTouch)\n    emit(el, \"start\", {\n      el,\n      binding,\n      vnode,\n    });\n    return prevent(e, bubbles);\n  }\n\n  function _move(e) {\n    updateMoveData(el, e, isTouch);\n    emit(el, \"move\", {\n      el,\n      binding,\n      vnode,\n    });\n    isMove = true;\n    return prevent(e, bubbles);\n  }\n\n  function _end(e) {\n    if (!isMove) {\n      const data = el._moveData;\n      data.offsetX = 0;\n      data.offsetY = 0;\n      emit(el, \"notmove\");\n    }\n    emit(el, \"end\", {\n      el,\n      binding,\n      vnode,\n    });\n    emit(el, \"cancel\");\n    return prevent(e, bubbles);\n  }\n  el.addEventListener(\"touchstart\", _start);\n  el.addEventListener(\"mousedown\", _start);\n};\nmove.bind = move.mounted;\nmove.install = function (Vue) {\n  Vue.directive(\"move\", move);\n};\nexport default move;\n","import { shuffleCards, checkDeadForeach } from \"../utils/help.js\";\nimport move from \"../directives/move.js\";\nimport { GameComponentPresets } from \"../utils/gameComponentFactory.js\";\nimport { getCardPlaceholderText } from \"../utils/cardUtils.js\";\n\n/**\n * Spider对象定义了蜘蛛纸牌游戏的基础组件，将传递给GameComponentPresets.cardGame工厂函数\n * 工厂函数会为该组件添加游戏管理、按钮控制、自动操作等功能\n */\nconst Spider = {\n  name: \"Spider\",\n  data() {\n    return {\n      title: \"Spider\",\n      cards: [[], [], [], [], [], [], [], [], [], []],\n      fresh: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      sign: -99,\n      index: -99,\n      dragCard: -99,\n      dragItem: -99,\n      enterItem: -99,\n      turn: 1,\n      number: 52,\n      \n      // 以下属性由工厂函数GameComponentPresets.cardGame添加：\n      // gameManager: 游戏管理器实例，提供游戏状态控制和自动操作功能\n      // customButtons: 自定义按钮数组，用于存储游戏控制按钮配置\n      // record: 操作记录数组，用于撤销功能\n    };\n  },\n  directives: { move },\n  created: function () {\n    this.sendCustomButtons();\n    this.setupGameStateListeners();\n  },\n  mounted() {\n    let enter = (i) => () => this.moveEnter(i);\n    if (!this.$refs.middleBox || !this.$refs.downBox) return;\n    this.middleEnters = [];\n    this.downEnters = [];\n    for (let i = 0; i < 4; i++) {\n      let middle = this.$refs.middleBox[i];\n      let down = this.$refs.downBox[i];\n      this.middleEnters[i] = enter(i + 2);\n      this.downEnters[i] = enter(i + 6);\n      middle.addEventListener(\"mousemove\", this.middleEnters[i]);\n      middle.addEventListener(\"touchmove\", this.middleEnters[i]);\n      down.addEventListener(\"mousemove\", this.downEnters[i]);\n      down.addEventListener(\"touchmove\", this.downEnters[i]);\n    }\n  },\n  beforeUnmount() {\n    this.gameManager.off(\"stateChange\");\n    if (!this.$refs.middleBox || !this.$refs.downBox || !this.middleEnters || !this.downEnters) return;\n    for (let i = 0; i < 4; i++) {\n      let middle = this.$refs.middleBox[i];\n      let down = this.$refs.downBox[i];\n      middle.removeEventListener(\"mousemove\", this.middleEnters[i]);\n      middle.addEventListener(\"touchmove\", this.middleEnters[i]);\n      down.addEventListener(\"mousemove\", this.downEnters[i]);\n      down.addEventListener(\"touchmove\", this.downEnters[i]);\n    }\n  },\n  // 初始化\n  methods: {\n    setupGameStateListeners() {\n      // 监听游戏状态变化\n      this.gameManager.on(\"stateChange\", () => {\n        this.$forceUpdate(); // 强制更新视图\n      });\n    },\n    init() {\n      this.gameManager.init();\n      for (let i = 0; i < 10; i++) {\n        this.cards[i].splice(0);\n      }\n      this.fresh = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      this.turn = 1;\n      this.sign = -99;\n      this.dragItem = -99;\n      this.dragCard = -99;\n      this.enterItem = -99;\n      let cards = this.cards[0];\n      for (let i = 0; i < this.number; i++) {\n        cards.push(i);\n      }\n      shuffleCards(cards, this.number);\n      for (let i = 6; i < 10; i++) {\n        this.cards[i].push(this.cards[0].splice(-1)[0]);\n      }\n    },\n    findPos(card) {\n      for (let i = 2; i < 10; i++) {\n        if (this.cards[i].indexOf(card) >= 0) {\n          return i;\n        }\n      }\n      return -99;\n    },\n    addAndCheck(card, type) {\n      let res = checkDeadForeach(this.record, [card, type]);\n      if (!res) return false;\n      this.record.unshift([card, type]);\n      return true;\n    },\n    checkDown(card) {\n      if (!this.addAndCheck(card, 1)) return;\n      let type = card % 2;\n      let level = card >> 2;\n      if (level == 12) {\n        return false;\n      }\n      let up1 = ((level + 1) % 13) * 4 + !type;\n      let up2 = up1 + 2;\n      let pos1 = this.findPos(up1);\n      let pos2 = this.findPos(up2);\n      if (pos1 < 0 && pos2 < 0) {\n        return false;\n      } else if (pos1 >= 6 && pos2 >= 6) {\n        let pos = this.findPos(card);\n        let top1 = this.cards[pos1][this.cards[pos1].length - 1];\n        let top2 = this.cards[pos2][this.cards[pos2].length - 1];\n        if (top1 != up1 && top2 != up2) {\n          return false;\n        }\n        if (pos == (top1 == up1 ? pos1 : pos2)) {\n          return false;\n        }\n        return [pos, top1 == up1 ? pos1 : pos2];\n      }\n      if (pos1 >= 6 || pos2 >= 6) {\n        let cards = pos1 >= 6 ? this.cards[pos1] : this.cards[pos2];\n        let up = pos1 >= 6 ? up1 : up2;\n        let index = cards.indexOf(up);\n        if (index == cards.length - 1) {\n          let pos = this.findPos(card);\n          if (pos != (pos1 >= 6 ? pos1 : pos2)) {\n            return [pos, pos1 >= 6 ? pos1 : pos2];\n          }\n        } else {\n          let res = this.checkUp(cards[index + 1]);\n          if (res) {\n            return res;\n          }\n        }\n        if (pos1 < 0 || pos2 < 0) {\n          return false;\n        }\n      }\n      let first;\n      if (pos1 - 2 == up1 % 4) {\n        let i = 0;\n        let top = this.cards[pos1][this.cards[pos1].length - 1];\n        while (top - 4 * i >= up1) {\n          let res = this.checkDown(top - 4 * i);\n          if (!res) {\n            break;\n          }\n          if (!first) {\n            first = res;\n          }\n          i++;\n        }\n        if (top - 4 * i < up1) {\n          return first;\n        }\n      }\n      if (pos2 - 2 == up2 % 4) {\n        let i = 0;\n        let top = this.cards[pos2][this.cards[pos2].length - 1];\n        while (top - 4 * i >= up2) {\n          let res = this.checkDown(top - 4 * i);\n          if (!res) {\n            break;\n          }\n          if (!first) {\n            first = res;\n          }\n          i++;\n        }\n        if (top - 4 * i < up2) {\n          return first;\n        }\n      }\n      return false;\n    },\n    checkUp(card) {\n      if (!this.addAndCheck(card, 2)) return;\n      let type = card % 4;\n      let level = card >> 2;\n      let result = [];\n      for (let i = 0; i <= level; i++) {\n        let temp = i * 4 + type;\n        let pos = this.findPos(temp);\n        if (pos < 0) {\n          if (i == level) {\n            result.push([pos, type + 2]);\n            break;\n          }\n          return false;\n        }\n        if (pos == type + 2) {\n          continue;\n        }\n        let index = this.cards[pos].indexOf(temp);\n        if (index == this.cards[pos].length - 1) {\n          result.push([pos, type + 2]);\n          continue;\n        }\n        let res = this.checkMove(this.cards[pos][index + 1]);\n        if (!res) {\n          return false;\n        }\n        result.push(res);\n      }\n      return result[0];\n    },\n    checkMove(card) {\n      if (!this.addAndCheck(card, 0)) return;\n      return this.checkDown(card) || this.checkUp(card);\n    },\n    async stepFn() {\n      await this.gameManager.step(async () => {\n        let next = false;\n        for (let i = 6; i < 10; i++) {\n          this.record = [];\n          next = this.checkMove(this.cards[i][0]);\n          if (next) {\n            if (\n              !this.skipCheck &&\n              !checkDeadForeach(this.gameManager.history, [next[1], next[0]])\n            )\n              continue;\n            break;\n          }\n        }\n        this.record = [];\n        !next &&\n          this.cards[1].length > 0 &&\n          (next = this.checkMove(this.cards[1][0]));\n        if (\n          !next ||\n          (!this.skipCheck &&\n            !checkDeadForeach(this.gameManager.history, [next[1], next[0]]))\n        ) {\n          return this.clickCard(0);\n        }\n        this.skipCheck = false;\n        this.sign = -99;\n        await this.clickCard(next[0] < 0 ? 1 : next[0]);\n        await this.wait();\n        await this.clickCard(next[1]);\n      });\n    },\n    async addCard() {\n      for (let i = 6; i < 10; i++) {\n        if (this.cards[i].length <= 0) {\n          if (this.cards[1].length > 0) {\n            this.gameManager.recordOperation([i, 1, 0, 1], true);\n            this.cards[i].push(this.cards[1].splice(0, 1)[0]);\n          } else if (this.cards[0].length > 0) {\n            this.gameManager.recordOperation(\n              [i, 0, this.cards[0].length - 1, 1],\n              true,\n            );\n            this.cards[i].push(this.cards[0].splice(-1)[0]);\n          }\n        }\n      }\n      if (this.cards[0].length <= 0 && this.cards[1].length <= 0) {\n        if (this.lock) {\n          return false;\n        }\n        this.dragCard = -99;\n        this.dragItem = -99;\n        this.enterItem = -99;\n        this.lock = true;\n        for (let i = 0; i < this.number; i++) {\n          let type = i % 4;\n          while (this.cards[type + 2].length <= i >> 2) {\n            this.record = [];\n            let next = this.checkUp(i);\n            if (\n              !next ||\n              (!this.skipCheck &&\n                !checkDeadForeach(this.gameManager.history, [next[1], next[0]]))\n            ) {\n              for (let j = 6; j < 10; j++) {\n                if (this.cards[j].length <= 0 || this.cards[j][0] >> 2 >= 12) {\n                  continue;\n                }\n                this.record = [];\n                next = this.checkMove(this.cards[j][0]);\n                if (next) {\n                  if (\n                    !this.skipCheck &&\n                    !checkDeadForeach(this.gameManager.history, [\n                      next[1],\n                      next[0],\n                    ])\n                  ) {\n                    next = false;\n                    continue;\n                  }\n                  break;\n                }\n              }\n            }\n            if (!next) {\n              this.skipCheck = true;\n              continue;\n            }\n            this.skipCheck = false;\n            this.sign = -99;\n            await this.clickCard(next[0]);\n            await this.wait();\n            await this.clickCard(next[1]);\n            for (let k = 6; k < 10; k++) {\n              if (this.cards[k].length <= 0) {\n                let pos = this.findPos(i);\n                if (this.cards[pos][this.cards[pos].length - 1] != i) {\n                  let index = this.cards[pos].indexOf(i);\n                  let next = [\n                    k,\n                    pos,\n                    index + 1,\n                    this.cards[pos].length - index - 1,\n                    i,\n                  ];\n                  this.cards[k].push(...this.cards[pos].splice(index + 1));\n                  this.gameManager.recordOperation(next, true);\n                  continue;\n                }\n                let l;\n                for (l = 48; l < 52; l++) {\n                  let pos = this.findPos(l);\n                  if (pos < 6) {\n                    continue;\n                  }\n                  let index = this.cards[pos].indexOf(l);\n                  if (l <= 0) {\n                    continue;\n                  }\n                  let next = [k, pos, index, this.cards[pos].length - index, l];\n                  if (!checkDeadForeach(this.gameManager.history, next)) {\n                    continue;\n                  }\n                  this.cards[k].push(...this.cards[pos].splice(index));\n                  this.gameManager.recordOperation(next, true);\n                  break;\n                }\n                if (l < 52) {\n                  continue;\n                }\n                for (l = 6; l < 10; l++) {\n                  if (this.cards[l].length > 1) {\n                    let next = [k, l, this.cards[l].length - 1, 1];\n                    if (!checkDeadForeach(this.gameManager.history, next)) {\n                      continue;\n                    }\n                    this.cards[k].push(this.cards[l].splice(-1)[0]);\n                    this.gameManager.recordOperation(next, true);\n                    break;\n                  }\n                }\n              }\n            }\n          }\n        }\n        this.sign = -99;\n        this.gameManager.setWin();\n        this.lock = false;\n      }\n    },\n    async clickCard(index) {\n      let len = this.cards[index].length;\n      if (index == 0) {\n        if (this.cards[0].length > 0) {\n          this.gameManager.recordOperation(\n            [1, 0, this.turn > 3 ? 1 : 4 - this.turn],\n            true,\n          );\n          this.cards[1].unshift(\n            ...this.cards[0].splice(this.turn > 3 ? -1 : this.turn - 4),\n          );\n        } else {\n          for (let i = 0; i < this.gameManager.history.length; i++) {\n            let step = this.gameManager.history[i];\n            if (step[0] == 0 && step[1] == 1) {\n              this.skipCheck = true;\n            } else if (step[0] != 1 || step[1] != 0) {\n              break;\n            }\n          }\n          this.gameManager.recordOperation([0, 1, this.cards[1].length], true);\n          this.cards[0].unshift(...this.cards[1].splice(0));\n          this.turn++;\n        }\n        this.sign = -99;\n      } else if (index == 1) {\n        if (len > 0) {\n          this.sign = this.cards[index][0];\n          this.index = index;\n        }\n      } else if (index < 6) {\n        if (this.sign == index - 2 + len * 4) {\n          this.gameManager.recordOperation(\n            [index, this.index, this.cards[this.index].indexOf(this.sign), 1],\n            true,\n          );\n          this.cards[index].push(\n            this.cards[this.index].splice(\n              this.cards[this.index].indexOf(this.sign),\n              1,\n            )[0],\n          );\n          this.sign = -99;\n        } else {\n          if (len > 0) {\n            this.sign = this.cards[index][len - 1];\n            this.index = index;\n          }\n        }\n      } else {\n        let top = this.cards[index][len - 1],\n          i;\n        if (\n          this.sign >= 0 &&\n          this.index >= 6 &&\n          (i = this.cards[this.index].findIndex((card) => {\n            return (\n              card >> 2 < 13 &&\n              card % 2 != top % 2 &&\n              ((card >> 2) + 1) % 13 == top >> 2\n            );\n          })) >= 0\n        ) {\n          this.gameManager.recordOperation(\n            [index, this.index, i, this.cards[this.index].length - i, top],\n            true,\n          );\n          this.cards[index].push(...this.cards[this.index].splice(i));\n          this.sign = -99;\n        } else if (\n          this.sign >= 0 &&\n          this.index < 6 &&\n          this.sign >> 2 < 13 &&\n          this.sign % 2 != top % 2 &&\n          ((this.sign >> 2) + 1) % 13 == top >> 2\n        ) {\n          this.gameManager.recordOperation(\n            [\n              index,\n              this.index,\n              this.cards[this.index].indexOf(this.sign),\n              1,\n              top,\n            ],\n            true,\n          );\n          this.cards[index].push(\n            this.cards[this.index].splice(\n              this.cards[this.index].indexOf(this.sign),\n              1,\n            )[0],\n          );\n          this.sign = -99;\n        } else if (len > 0) {\n          this.sign = top;\n          this.index = index;\n        }\n      }\n      if (this.sign < 0) {\n        await this.addCard();\n      }\n    },\n    undo() {\n      this.sign = -99;\n      if (this.step <= 0) {\n        return;\n      }\n      let temp = this.gameManager.history.shift(),\n        add = false;\n      if (temp[1] == 0) {\n        if (temp[0] == 1)\n          return this.cards[0].push(...this.cards[1].splice(0, temp[2]));\n        else {\n          add = true;\n          this.cards[0].push(this.cards[temp[0]].splice(0, 1)[0]);\n        }\n      } else if (temp[1] == 1) {\n        if (temp[0] != 0) {\n          this.cards[1].unshift(this.cards[temp[0]].splice(-1)[0]);\n          add = true;\n          if (temp[0] < 6 || this.cards[temp[0]].length > 0) {\n            return;\n          }\n        } else {\n          this.cards[1].unshift(...this.cards[0].splice(0));\n          this.turn--;\n          return;\n        }\n      }\n      if (add) {\n        temp = this.gameManager.history.shift();\n      }\n      this.cards[temp[1]].splice(\n        temp[2],\n        0,\n        ...this.cards[temp[0]].splice(-temp[3]),\n      );\n    },\n    start(e) {\n      // 方法1：尝试从绑定的组件实例获取数据\n      let item = -1;\n      \n      // 检查e.detail.binding.value，这可能包含组件的props数据\n      if (e.detail.binding && e.detail.binding.value && e.detail.binding.value.cardId !== undefined) {\n        item = parseInt(e.detail.binding.value.cardId);\n      }\n      \n      // 方法2：尝试从vnode上下文获取数据\n      if (item < 0 && e.detail.vnode && e.detail.vnode.componentInstance) {\n        const vm = e.detail.vnode.componentInstance;\n        if (vm.cardId !== undefined) {\n          item = parseInt(vm.cardId);\n        }\n      }\n      \n      // 方法3：使用Vue的数据属性机制\n      if (item < 0 && e.detail.el.dataset.cardId) {\n        item = parseInt(e.detail.el.dataset.cardId);\n      }\n      \n      // 如果仍然无法获取有效ID，返回\n      if (!this.canOperate || item < 0) {\n        return false;\n      }\n      \n      let drag = this.findPos(item);\n      if (drag < 0 && item != this.cards[1][0]) {\n        return;\n      }\n      let data = e.detail.el._moveData;\n      data.offsetLeft = e.detail.el.offsetLeft;\n      data.offsetTop = e.detail.el.offsetTop;\n      this.dragItem = drag;\n      if (this.dragItem < 0) {\n        this.dragItem = 1;\n      }\n      this.dragCard = item;\n      this.enterItem = -99;\n    },\n    async end(e) {\n      let drag = this.dragItem;\n      if (!this.canOperate) {\n        return;\n      }\n      if (drag == 1 && this.dragCard != this.cards[1][0]) {\n        return;\n      }\n      let data = e.detail.el._moveData;\n      let left = data.offsetX + data.offsetLeft;\n      let top = data.offsetY + data.offsetTop;\n      let index = Math.floor((left + 50) / this.cardWidth);\n      if (index >= 0 && index < 4 && top >= 115 && top <= this.height - 75) {\n        index += top <= 330 ? 2 : 6;\n        await this.clickCard(drag).catch(console.log);\n        if (this.sign >= 0 && index != drag && index >= 0) {\n          await this.clickCard(index).catch(console.log);\n        }\n      }\n      this.fresh[drag]++;\n      this.enterItem = -99;\n      this.dragItem = -99;\n      this.dragCard = -99;\n    },\n    enter(item) {\n      console.log(\"enter\", item);\n      // this.enterItem = item\n    },\n    leave(item) {\n      console.log(\"leave\", item);\n      // if (this.enterItem == item) {\n      //   this.enterItem = -99\n      // }\n    },\n    moveEnter(item) {\n      console.log(\"moveEnter\", item, this.dragItem);\n      // if (item == this.dragItem) {\n      //   return\n      // }\n      // this.enterItem = item\n      // this.moveflag = false\n    },\n    move(e) {\n      if (!this.canOperate) {\n        return false;\n      }\n      if (this.dragItem == 1 && this.dragCard != this.cards[1][0]) {\n        return;\n      }\n      let data = e.detail.el._moveData;\n      let left = data.offsetX + data.offsetLeft;\n      let top = data.offsetY + data.offsetTop;\n      let index = Math.floor((left + 50) / this.cardWidth);\n      if (index >= 0 && index < 4 && top >= 115 && top <= this.height - 75) {\n        index += top <= 330 ? 2 : 6;\n        if (this.dragItem != index) this.enterItem = index;\n      } else {\n        this.enterItem = -99;\n      }\n      e.detail.el.style.left = left / 16 + \"rem\";\n      e.detail.el.style.top = top / 16 + \"rem\";\n      if (this.dragItem >= 6) {\n        let index = this.cards[this.dragItem].indexOf(this.dragCard);\n        let j = 0;\n        for (let down of this.$refs.down) {\n          let res = down.$el._cardImageRoot.className.match(\"drag\");\n          if (!res || ++j <= index) {\n            continue;\n          }\n          down.$el._cardImageRoot.style.left = (data.offsetX + data.offsetLeft) / 16 + \"rem\";\n          down.$el._cardImageRoot.style.top =\n            (data.offsetY + data.offsetTop + (j - index - 1) * 30) / 16 + \"rem\";\n        }\n      }\n    },\n    \n    /**\n     * 渲染文本视图 - 显示当前游戏状态\n     * 用于终端交互式游戏\n     */\n    renderTextView() {\n      console.log('\\n╔════════════════════════════════════════════════╗');\n      console.log('║            蜘蛛纸牌 (Spider)                  ║');\n      console.log('╚════════════════════════════════════════════════╝');\n      \n      // 统计信息\n      const totalCards = this.cards.slice(1).reduce((sum, col) => sum + col.length, 0);\n      const deckCards = this.cards[0].length;\n      console.log(`\\n步数: ${this.step} | 牌堆剩余: ${deckCards} 张 | 场上: ${totalCards} 张\\n`);\n      console.log('提示: ← 表示选中的牌');\n      \n      // 创建表格显示\n      console.log('┌──────────────┬──────────────┬──────────────┬──────────────┐');\n      \n      // 第一行：牌堆 + 第1列最后3张牌\n      const col1 = this.cards[1];\n      const deckDisplay = deckCards > 0 ? `🂠 ${deckCards}张` : '(空)';\n      const col1Last3 = col1.slice(0, 3).map((card) => {\n        const cardText = getCardPlaceholderText(card);\n        // const actualIdx = col1.length - 3 + idx;\n        const isSelected = this.sign === card;\n        return `${cardText}${isSelected ? ' ←' : ''}`;\n      });\n      \n      console.log(`│ 牌堆: ${deckDisplay.padEnd(5)} │ ${(col1Last3[0] || \"\").padEnd(12)} │ ${(col1Last3[1] || \"\").padEnd(12)} │ ${(col1Last3[2] || \"\").padEnd(12)} │`);\n      console.log('├──────────────┼──────────────┼──────────────┼──────────────┤');\n      \n      // 第二行：第2-5列（每列显示剩余张数+最后一张牌）\n      const row2Data = [];\n      for (let i = 2; i <= 5; i++) {\n        const col = this.cards[i];\n        if (col.length === 0) {\n          row2Data.push(\"-:\" + this.types[i - 2] + '?');\n        } else {\n          const lastCard = col[col.length - 1];\n          const cardText = getCardPlaceholderText(lastCard);\n          const isSelected = this.sign === lastCard;\n          row2Data.push(`${col.length - 1}:${cardText}${isSelected ? ' ←' : ''}`);\n        }\n      }\n      \n      console.log(`│ ${row2Data[0].padEnd(12)} │ ${row2Data[1].padEnd(12)} │ ${row2Data[2].padEnd(12)} │ ${row2Data[3].padEnd(12)} │`);\n      console.log('├──────────────┼──────────────┼──────────────┼──────────────┤');\n      \n      // 第三行：第6-9列（每列显示总张数+纵向最多5张牌）\n      const row3Data = [];\n      for (let i = 6; i <= 9; i++) {\n        const col = this.cards[i];\n        if (col.length === 0) {\n          row3Data.push(\"\");\n        } else {\n          const cardsDisplay = [];\n          \n          for (let j = 0; j < col.length; j++) {\n            const card = col[j];\n            const cardText = getCardPlaceholderText(card);\n            const isSelected = this.sign === card;\n            cardsDisplay.push(`${j}:${cardText}${isSelected ? ' ←' : ''}`);\n          }\n          \n          row3Data.push(`${cardsDisplay.join('\\n')}`);\n        }\n      }\n      \n      // 处理多行显示，确保对齐\n      const maxLines = Math.max(...row3Data.map(data => data.split('\\n').length));\n      const paddedData = row3Data.map(data => {\n        const lines = data.split('\\n');\n        while (lines.length < maxLines) {\n          lines.push('');\n        }\n        return lines;\n      });\n      \n      for (let lineIdx = 0; lineIdx < maxLines; lineIdx++) {\n        const lineContent = paddedData.map(data => data[lineIdx].padEnd(12));\n        console.log(`│ ${lineContent.join(' │ ')} │`);\n      }\n      \n      console.log('└──────────────┴──────────────┴──────────────┴──────────────┘');\n      \n      return '渲染完成';\n    },\n    \n    sendCustomButtons() {\n      // 添加Spider游戏特有的发牌按钮（如果牌堆有牌）\n      this.customButtons.push({\n        action: 'deal',\n        label: 'DEAL',\n        method: 'clickCard',\n        args: [0],\n        description: 'DEAL FROM THE DECK'\n      });\n    },\n  },\n    \n    /**\n     * 监听cards变化，更新自定义按钮\n     */\n  watch: {\n    cards: {\n      handler() {\n        this.sendCustomButtons();\n      },\n      deep: true\n    },\n  },\n  \n  // 以下方法由工厂函数GameComponentPresets.cardGame添加：\n  // wait(): Promise<void> - 等待指定时间，用于游戏步骤延迟\n  // undo(): void - 撤销上一步操作\n  // pass(): void - 跳过当前步骤\n  // goon(): void - 继续游戏\n  // goBack(): void - 返回上一状态\n  // step(fn: Function): Promise<void> - 执行游戏步骤\n  // executeMethodWithRenderToString(method: string, ...args: any[]): Promise<void> - 执行方法并渲染\n  \n  computed: {\n    // 保留Spider特有的计算属性\n    height() {\n      return (\n        Math.max(...this.cards.slice(-4).map((cards) => cards.length)) * 30 +\n        480\n      );\n    },\n    cardWidth() {\n      return this.$refs.container ? this.$refs.container.offsetWidth >> 2 : 500;\n    },\n  },\n};\n\n// 使用工厂函数创建增强的Spider组件并导出\nexport default GameComponentPresets.cardGame(Spider, 500);\n\n/**\n * 工厂函数GameComponentPresets.cardGame为Spider组件添加的功能：\n * \n * 基础增强功能（来自createEnhancedGameComponent）：\n * - gameManager属性：提供游戏状态管理、自动模式控制和步骤执行\n * - customButtons属性：存储自定义按钮配置\n * - displayButtons计算属性：决定显示哪些游戏控制按钮\n * - gameControlsConfig计算属性：游戏控制配置\n * - wait()、undo()、pass()、goon()等方法：游戏控制方法\n * - created和beforeUnmount生命周期钩子：管理游戏状态和事件监听\n * \n * cardGame特有功能：\n * - record属性：存储操作记录，支持撤销功能\n * - 提供纸牌游戏相关的自动操作和状态管理\n * - 支持自动步骤延迟配置（此处设置为500ms）\n */\n","import { render } from \"./Spider.vue?vue&type=template&id=f91447be&scoped=true\"\nimport script from \"./Spider.vue?vue&type=script&lang=js\"\nexport * from \"./Spider.vue?vue&type=script&lang=js\"\n\nimport \"./Spider.vue?vue&type=style&index=0&id=f91447be&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-f91447be\"]])\n\nexport default __exports__","<template>\n  <GameLayout\n    v-bind=\"gameLayoutProps\"\n    :container-style=\"{ width: '100%' }\"\n    @undo=\"undo\"\n    @goon=\"goon\"\n    @step=\"stepTwiceFn\"\n    @auto=\"pass\"\n  >\n    <template #game-content>\n      <div class=\"row center\">\n        <div>\n          <div\n            class=\"cardsul center\"\n            style=\"\n              padding-left: 0;\n              margin: 0;\n              width: 100%;\n              max-width: 37.5rem;\n              background-color: #719192;\n              padding: 0.3125rem 0;\n            \"\n          >\n            <div\n              v-for=\"(item, i) in cards1\"\n              :key=\"i\"\n              class=\"m-0 center\"\n              style=\"width: 16%; border-radius: 50%; overflow: hidden\"\n              @click=\"canOperate && clickCard(i)\"\n            >\n              <div\n                class=\"center\"\n                style=\"width: 100%; position: relative\"\n                :style=\"{\n                  backgroundColor:\n                    item < 0\n                      ? 'transparent'\n                      : !cards2[item]\n                        ? '#fff'\n                        : item == sign\n                          ? '#FFB800'\n                          : grades[item] == grade\n                            ? '#01AAED'\n                            : '#5FB878',\n                }\"\n              >\n                <div\n                  class=\"shanshuo abso\"\n                  v-show=\"validBoxes.indexOf(i) >= 0\"\n                  style=\"\n                    width: 100%;\n                    height: 100%;\n                    background-color: #ff5722;\n                    top: 0;\n                    left: 0;\n                  \"\n                ></div>\n                <img\n                  :style=\"{\n                    transform:\n                      cards2[item] && grades[item] != grade\n                        ? 'rotate(180deg)'\n                        : 'rotate(0)',\n                    opacity: item < 0 ? 0 : 100,\n                  }\"\n                  :src=\"\n                    !cards2[item]\n                      ? './static/avatar/logo.webp'\n                      : './static/avatar/' + item + '.webp'\n                  \"\n                  style=\"width: 100%\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">\n        <span class=\"m-0 scrore\">{{ lowCount + \" : \" + highCount }}</span>\n      </div>\n    </template>\n  </GameLayout>\n</template>\n\n<script>\nimport GridBattleComponent from \"./Chess.js\";\nexport default GridBattleComponent;\n</script>\n\n<style scoped>\n@import url(\"./sum.css\");\n</style>\n","import { shuffleCards, seededRandom } from \"../utils/help.js\";\nimport { GameComponentPresets } from \"../utils/gameComponentFactory.js\";\n\n/**\n * GridBattle对象定义了棋盘对战游戏的基础组件，将传递给GameComponentPresets.strategyGame工厂函数\n * 工厂函数会为该组件添加游戏管理、按钮控制、自动操作等功能\n */\n\nlet _modes = [\n  [1, 0],\n  [1, 1],\n  [2, 1],\n  [2, 2],\n  [3, 1],\n  [3, 2],\n  [3, 3],\n];\n\nconst GridBattle = {\n  name: \"GridBattle\",\n  data() {\n    return {\n      title: \"GridBattle\",\n      cards1: [],\n      cards2: [],\n      // 移除arr数组，因为现在由GameStateManager管理历史记录\n      // arr: [],\n      sign: -1,\n      number: 36,\n      grade: -1,\n      modes: [\n        0, 1, 3, 6, 10, 15, 2, 5, 7, 13, 18, 21, 4, 8, 14, 17, 24, 27, 9, 12,\n        20, 25, 26, 31, 11, 19, 23, 29, 30, 35, 16, 22, 28, 32, 34, 33,\n      ],\n      grades: [\n        1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1,\n        1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1,\n      ],\n      \n      // 以下属性由工厂函数GameComponentPresets.strategyGame添加：\n      // gameManager: 游戏管理器实例，提供游戏状态控制和自动操作功能\n      // customButtons: 自定义按钮数组，用于存储游戏控制按钮配置\n      // step: 当前游戏步骤计数\n      // difficulty: 游戏难度级别（默认为\"normal\"）\n      // seed: 随机种子，用于确保游戏结果可重现\n    };\n  },\n  computed: {\n    validBoxes() {\n      return this.getValidBoxes(this.sign);\n    },\n    lowCount() {\n      return this.cards1.filter((item) => this.grades[item] === 0).length;\n    },\n    highCount() {\n      return this.cards1.filter((item) => this.grades[item] === 1).length;\n    },\n  },\n  // 初始化\n  methods: {\n    init() {\n      this.sign = -1;\n      this.grade = -1;\n      this.cards1.splice(0);\n      this.cards2.splice(0);\n      let cards = this.cards1;\n      // return cards.splice(0, 0, ...this.modes)\n      for (let i = 0; i < this.number; i++) {\n        cards.push(i);\n        this.cards2.push(false); // 初始化cards2为36个false\n      }\n      shuffleCards(cards, this.number);\n    },\n    // 记录移动操作\n    recordMove(from, to, card, sign, signIndex) {\n      this.gameManager.recordOperation({\n        type: \"move\",\n        from: from,\n        to: to,\n        card: card,\n        sign: sign,\n        signIndex: signIndex,\n        timestamp: Date.now(),\n      });\n    },\n\n    // 记录翻转操作\n    recordFlip(card) {\n      this.gameManager.recordOperation({\n        type: \"flip\",\n        card: card,\n        timestamp: Date.now(),\n      });\n    },\n\n    // 处理撤销操作\n    handleUndo(operation) {\n      // 根据操作类型执行相应的撤销逻辑\n      switch (operation.type) {\n        case \"move\":\n          // 撤销移动操作\n          this.cards1.splice(operation.signIndex, 1, operation.sign);\n          this.cards1.splice(\n            operation.to,\n            1,\n            operation.card >= 0 ? operation.card : -1,\n          );\n          break;\n        case \"flip\":\n          // 撤销翻转操作\n          this.cards2[operation.card] = false; // 直接赋值而不是splice\n          break;\n      }\n    },\n\n    // 重写undo方法\n    undo() {\n      // 原代码中每执行一次undo会弹出两个操作，这里也保持一致\n      this.gameManager.undo();\n      this.gameManager.undo();\n    },\n\n    // 重写clickCard方法，使用GameStateManager记录操作\n    async clickCard(i, isAuto) {\n      let card = this.cards1[i];\n      if (this.grade < 0) {\n        this.grade = this.grades[card];\n      }\n      if (card >= 0 && !this.cards2[card]) {\n        this.cards2[card] = true; // 直接赋值而不是splice\n        this.recordFlip(card); // 使用GameStateManager记录操作\n        this.sign = -1;\n        if (!isAuto) {\n          this.gameManager.step(async () => {\n            await this.wait();\n            await this.stepFn();\n          });\n        }\n        return;\n      }\n      let grade = this.step % 2 == 0 ? this.grade : !this.grade;\n      if (this.sign >= 0 && this.grades[this.sign] != grade) {\n        this.sign =\n          card != this.sign && card >= 0 && this.grades[card] != grade\n            ? card\n            : -1;\n        return;\n      }\n      if (this.sign >= 0 && this.grades[this.sign] == grade) {\n        if (card >= 0 && this.grades[card] == grade) {\n          this.sign = this.sign == card ? -1 : card;\n          return;\n        }\n        if (this.validBoxes.indexOf(i) >= 0) {\n          let signIndex = this.cards1.indexOf(this.sign);\n          this.cards1.splice(signIndex, 1, -1);\n          this.cards1.splice(i, 1, this.sign);\n          this.recordMove(signIndex, i, card, this.sign, signIndex); // 使用GameStateManager记录操作\n          this.sign = -1;\n          if (card >= 0) {\n            if (this.lowCount <= 0) {\n              if (this.grade == 1) {\n                this.gameManager.setWin();\n              } else {\n                this.gameManager.setLose();\n              }\n            }\n            if (this.highCount <= 0) {\n              if (this.grade == 0) {\n                this.gameManager.setWin();\n              } else {\n                this.gameManager.setLose();\n              }\n            }\n            if (this.lowCount == 1 && this.highCount == 1) {\n              this.gameManager.setDraw();\n            }\n          }\n          if (!isAuto) {\n            this.gameManager.step(async () => {\n              await this.wait();\n              await this.stepFn();\n            });\n          }\n          return;\n        }\n      }\n      this.sign = card;\n    },\n\n    // 重写stepTwiceFn方法\n    async stepTwiceFn() {\n      await this.gameManager.step(async () => {\n        await this.stepFn();\n        await this.wait();\n        await this.stepFn();\n      });\n    },\n    getValidBoxes(item) {\n      let arr = [];\n      // let item = this.cards1[index];\n      let index = this.cards1.indexOf(item);\n      if (item < 0 || index < 0) {\n        return arr;\n      }\n      let mode = this.modes.indexOf(item);\n      let h = _modes[Math.floor(mode / 6)],\n        v = _modes[mode % 6];\n      if (index + v[0] * 6 < 36 && (index % 6) + v[1] < 6)\n        arr.push(index + v[0] * 6 + v[1]);\n      if (index - v[0] * 6 >= 0 && (index % 6) + v[1] < 6)\n        arr.push(index - v[0] * 6 + v[1]);\n      if (index + v[0] * 6 < 36 && (index % 6) - v[1] >= 0)\n        arr.push(index + v[0] * 6 - v[1]);\n      if (index - v[0] * 6 >= 0 && (index % 6) - v[1] >= 0)\n        arr.push(index - v[0] * 6 - v[1]);\n      if (index + h[1] * 6 < 36 && (index % 6) + h[0] < 6)\n        arr.push(index + h[1] * 6 + h[0]);\n      if (index - h[1] * 6 >= 0 && (index % 6) + h[0] < 6)\n        arr.push(index - h[1] * 6 + h[0]);\n      if (index + h[1] * 6 < 36 && (index % 6) - h[0] >= 0)\n        arr.push(index + h[1] * 6 - h[0]);\n      if (index - h[1] * 6 >= 0 && (index % 6) - h[0] >= 0)\n        arr.push(index - h[1] * 6 - h[0]);\n      return arr;\n    },\n    async stepFn() {\n      // 1.挪2.送3.翻4.翻吃5.坏翻6.中翻7.友8.躲9.敌10.吃\n      let temp = [];\n      let hide = [],\n        friends = [];\n      let grade = this.step % 2 == 0 ? this.grade : !this.grade;\n      let _this = this;\n      let moveFn = async function (from, to) {\n        _this.sign = -1;\n        await _this.clickCard(from, true);\n        await _this.wait();\n        await _this.clickCard(to, true);\n      };\n      for (let i = 0; i < this.cards1.length; i++) {\n        let item = this.cards1[i];\n        if (item < 0) {\n          temp[i] = temp[i] || 1;\n          continue;\n        }\n        if (!this.cards2[item]) {\n          temp[i] = temp[i] || 3;\n          hide.push(i);\n          continue;\n        }\n        if (this.grades[item] == grade) {\n          temp[i] = 7;\n          friends.push(i);\n          let boxes = this.getValidBoxes(item);\n          for (let b of boxes) {\n            let c = this.cards1[b];\n            if (c < 0) {\n              continue;\n            }\n            if (!this.cards2[c]) {\n              temp[b] = temp[b] == 5 || temp[b] == 6 ? 6 : 4;\n              continue;\n            }\n            if (this.grades[c] != grade) {\n              return await moveFn(i, b);\n            }\n          }\n          continue;\n        }\n        temp[i] = 9;\n        let boxes = this.getValidBoxes(item);\n        for (let b of boxes) {\n          let c = this.cards1[b];\n          if (c < 0) {\n            temp[b] = 2;\n            continue;\n          }\n          if (!this.cards2[c]) {\n            temp[b] = temp[b] == 4 || temp[b] == 6 ? 6 : 5;\n            continue;\n          }\n          if (this.grades[c] == grade) {\n            temp[b] = 8;\n          }\n        }\n      }\n      // 1.吃2.躲3.翻吃4.中翻5.翻6.挪7.坏翻8.送\n      for (let f of friends) {\n        let t = temp[f];\n        if (t == 8) {\n          let c = this.cards1[f];\n          let boxes = this.getValidBoxes(c);\n          for (let box of boxes) {\n            if (temp[box] == 1) {\n              return await moveFn(f, box);\n            }\n          }\n        }\n      }\n      let best = -1;\n      let worst = -1;\n      for (let i = 0; i < hide.length; i++) {\n        let h = hide[i];\n        let t = temp[h];\n        if (t == 4) {\n          return await this.clickCard(h, true);\n        }\n        if (t == 5) {\n          worst = h;\n          hide.splice(i, 1);\n          i--;\n        }\n        if (t == 6) {\n          best = h;\n        }\n      }\n      if (best >= 0) {\n        return await this.clickCard(best, true);\n      }\n      if (hide.length > 0) {\n        let random = Math.floor(seededRandom() * hide.length);\n        return await this.clickCard(hide[random], true);\n      }\n      let suicide = false;\n      let road = [];\n      let protectedRoad = [];\n      // 预先收集所有友方棋子可以到达的空位\n      let friendsReach = {};\n      for (let f of friends) {\n        let c = this.cards1[f];\n        let boxes = this.getValidBoxes(c);\n        for (let box of boxes) {\n          if (temp[box] == 1) {\n            friendsReach[box] = (friendsReach[box] || 0) + 1;\n          }\n        }\n      }\n      // 收集路径，区分受保护和普通路径\n      for (let f of friends) {\n        let c = this.cards1[f];\n        let boxes = this.getValidBoxes(c);\n        for (let box of boxes) {\n          if (temp[box] == 1) {\n            if (friendsReach[box] >= 2) {\n              protectedRoad.push([f, box]);\n            } else {\n              road.push([f, box]);\n            }\n          }\n          if (temp[box] == 2) {\n            suicide = [f, box];\n          }\n        }\n      }\n      // 优先移动到受保护的位置\n      if (protectedRoad.length > 0) {\n        let random = Math.floor(seededRandom() * protectedRoad.length);\n        return await moveFn(protectedRoad[random][0], protectedRoad[random][1]);\n      }\n      // 其次移动到普通空位\n      if (road.length > 0) {\n        let random = Math.floor(seededRandom() * road.length);\n        return await moveFn(road[random][0], road[random][1]);\n      }\n      if (worst >= 0) {\n        return await this.clickCard(worst, true);\n      }\n      if (suicide) {\n        return await moveFn(suicide[0], suicide[1]);\n      } else {\n        throw new Error(\"unkown error\");\n      }\n    },\n    \n    /**\n     * 渲染文本视图 - 显示当前游戏状态\n     * 用于终端交互式游戏\n     */\n    renderTextView() {\n      console.log('\\n╔════════════════════════════════════════════════╗');\n      console.log('║           国际象棋 (GridBattle)               ║');\n      console.log('╚════════════════════════════════════════════════╝');\n      console.log(`\\n步数: ${this.step}`);\n      console.log(`高子: ${this.highCount} | 低子: ${this.lowCount}\\n`);\n      \n      console.log('\\n图例:');\n      console.log('  ? = 未翻开  - = 空位置  H = 高子  L = 低子  [H/L] = 已选中');\n      \n      if (this.sign >= 0) {\n        const row = Math.floor(this.sign / 6);\n        const col = this.sign % 6;\n        console.log(`\\n当前选中: (${row},${col})`);\n        \n        const validMoves = this.validBoxes;\n        if (validMoves && validMoves.length > 0) {\n          const moves = validMoves.map(idx => {\n            const r = Math.floor(idx / 6);\n            const c = idx % 6;\n            return `(${r},${c})`;\n          }).join(', ');\n          console.log(`可移动到: ${moves}`);\n        }\n      }\n      \n      // 显示6x6棋盘\n      console.log('    0   1   2   3   4   5');\n      console.log('  ┌───┬───┬───┬───┬───┬───┐');\n      \n      for (let row = 0; row < 6; row++) {\n        let line = `${row} │`;\n        for (let col = 0; col < 6; col++) {\n          const idx = row * 6 + col;\n          const card = this.cards1[idx];\n          \n          if (this.cards2[card]) {\n            // 已翻开\n            const grade = this.grades[card];\n            const symbol = grade === 1 ? ' H ' : ' L '; // H=高子，L=低子\n            const isSelected = idx === this.sign;\n            line += isSelected ? `[${symbol.trim()}]` : symbol;\n          } else if (this.cards1[idx] >= 0) {\n            // 未翻开\n            line += ' ? ';\n          } else {\n            // 空位置\n            line += ' - ';\n          }\n          line += '│';\n        }\n        console.log(line);\n        \n        if (row < 5) {\n          console.log('  ├───┼───┼───┼───┼───┼───┤');\n        }\n      }\n      console.log('  └───┴───┴───┴───┴───┴───┘');\n      \n      return '渲染完成';\n    },\n    \n    /**\n     * 获取当前可用的操作列表\n     * 用于终端交互式游戏\n     * 使用工厂函数中统一实现的方法\n     */\n    \n    // 注意：以下方法由工厂函数添加并可在当前组件中访问：\n    // - wait(delay): 延迟函数\n    // - pass(): 自动模式方法（组件中未重写）\n    // - goon(): 重新开始方法（组件中未重写）\n    // - getAvailableActions(): 获取可用操作列表\n    // - setSeed(seed): 设置随机数种子\n    // - setDifficulty(level): 设置游戏难度（由strategyGame预设添加）\n    // - loadDelaySettings(): 加载延迟设置\n    // - handleSettingsChanged(settings): 处理设置变化事件\n    // - getCardPlaceholderText(): 获取卡片占位符文本\n    // - 注意：组件中重写了undo()方法\n  },\n  \n  // 以下方法由工厂函数GameComponentPresets.strategyGame添加：\n  // wait(): Promise<void> - 等待指定时间，用于游戏步骤延迟\n  // undo(): void - 撤销上一步操作（组件重写了此方法，一次撤销两个操作）\n  // pass(): void - 跳过当前步骤\n  // goon(): void - 继续游戏\n  // goBack(): void - 返回上一状态\n  // step(fn: Function): Promise<void> - 执行游戏步骤\n  // setDifficulty(level: string): void - 设置游戏难度\n  // executeMethodWithRenderToString(method: string, ...args: any[]): Promise<void> - 执行方法并渲染\n  // getActions(): Array<Object> - 获取当前可用的操作列表\n  // setSeed(seed: number): void - 设置随机种子\n  // getAvailableActions(): Array<Object> - 获取可用操作（终端交互用）\n  // setWin(): void - 设置游戏胜利状态\n  // setLose(): void - 设置游戏失败状态\n  // setDraw(): void - 设置游戏平局状态\n};\n\n// 使用工厂函数创建增强的GridBattle组件并导出\nexport default GameComponentPresets.strategyGame(GridBattle, 1200);\n\n/**\n * 工厂函数GameComponentPresets.strategyGame为GridBattle组件添加的功能：\n * \n * 基础增强功能（来自createEnhancedGameComponent）：\n * - gameManager属性：提供游戏状态管理、自动模式控制和步骤执行\n * - customButtons属性：存储自定义按钮配置\n * - displayButtons计算属性：决定显示哪些游戏控制按钮\n * - gameControlsConfig计算属性：游戏控制配置\n * - wait()、undo()、pass()、goon()等方法：游戏控制方法\n * - created和beforeUnmount生命周期钩子：管理游戏状态和事件监听\n * - setWin()、setLose()、setDraw()方法：设置游戏结果状态\n * - setSeed()方法：设置随机种子\n * - getAvailableActions()方法：获取可用操作（终端交互用）\n * \n * strategyGame特有功能：\n * - step属性：游戏步骤计数器（组件中已使用）\n * - difficulty属性：游戏难度配置（默认为\"normal\"）\n * - seed属性：随机种子，确保游戏可重现\n * - getActions()方法：获取当前可用的操作列表\n * - setDifficulty()方法：设置游戏难度\n * - 提供策略游戏相关的自动操作和状态管理\n * - 支持自动步骤延迟配置（此处设置为1200ms）\n * \n * 注意事项：\n * - 组件重写了undo()方法，每调用一次会撤销两个操作\n * - 组件使用了gameManager来记录操作和管理历史记录\n */\n","import { render } from \"./Chess.vue?vue&type=template&id=f1b2a642&scoped=true\"\nimport script from \"./Chess.vue?vue&type=script&lang=js\"\nexport * from \"./Chess.vue?vue&type=script&lang=js\"\n\nimport \"./Chess.vue?vue&type=style&index=0&id=f1b2a642&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-f1b2a642\"]])\n\nexport default __exports__","<template>\n  <GameLayout\n    v-bind=\"gameLayoutProps\"\n    @undo=\"undo\"\n    @goon=\"goon\"\n    @step=\"stepFn\"\n    @auto=\"pass\"\n  >\n    <template #game-content>\n      <div class=\"row\">\n        <span>步数: {{ step }}</span>\n        <br />\n        <span>移动次数: {{ moveCount }}</span>\n        <br />\n        <span>最优解: {{ minMoves }} 步</span>\n      </div>\n      \n      <div class=\"row\">\n        <div>\n          <div \n            class=\"towers-container center\"\n            style=\"\n              padding: 1rem;\n              margin: 0;\n              width: 100%;\n              max-width: 37.5rem;\n              background-color: #719192;\n              border-radius: 0.5rem;\n            \"\n          >\n            <div \n              v-for=\"(tower, towerIndex) in towers\" \n              :key=\"towerIndex\"\n              class=\"tower\"\n              :class=\"{ selected: selectedTower === towerIndex }\"\n              @click=\"canOperate && clickTower(towerIndex)\"\n            >\n              <div class=\"tower-label\">{{ getTowerName(towerIndex) }}</div>\n              <div class=\"tower-base\"></div>\n              <div class=\"tower-pole\"></div>\n              <div class=\"disks-container\">\n                <div \n                  v-for=\"disk in tower\" \n                  :key=\"disk\"\n                  class=\"disk\"\n                  :class=\"getDiskClass(disk)\"\n                  :style=\"getDiskStyle(disk)\"\n                >\n                  {{ disk }}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"row\" style=\"margin-top: 1rem;\">\n        <div style=\"text-align: center; color: #dfcdc3; font-size: 1rem;\">\n          <span v-if=\"selectedTower >= 0\">\n            已选中: {{ getTowerName(selectedTower) }} - 点击目标柱子移动圆盘\n          </span>\n          <span v-else>点击柱子选择圆盘</span>\n        </div>\n      </div>\n      \n      <div class=\"row\">\n        <div class=\"difficulty-selector\">\n          <label>圆盘数量: </label>\n          <select \n            v-model=\"diskCount\" \n            @change=\"resetGame\"\n            style=\"\n              padding: 0.5rem 1rem;\n              border: 0.125rem solid #6c757d;\n              border-radius: 0.375rem;\n              background: white;\n              font-size: 1rem;\n              font-weight: bold;\n              color: #495057;\n              cursor: pointer;\n            \"\n          >\n            <option value=\"3\">3个圆盘</option>\n            <option value=\"4\">4个圆盘</option>\n            <option value=\"5\">5个圆盘</option>\n            <option value=\"6\">6个圆盘</option>\n            <option value=\"7\">7个圆盘</option>\n            <option value=\"8\">8个圆盘</option>\n          </select>\n        </div>\n      </div>\n    </template>\n\n    <template #win-content>\n      <h1 class=\"small\">步数: {{ step }}</h1>\n      <h1 class=\"small\">移动次数: {{ moveCount }}</h1>\n      <h1 class=\"small\">最优解: {{ minMoves }} 步</h1>\n    </template>\n  </GameLayout>\n</template>\n\n<script>\nimport TowerHanoi from \"./TowerHanoi.js\";\nimport { GameComponentPresets } from \"../utils/gameComponentFactory.js\";\n\n// 使用工厂函数创建增强的TowerHanoi组件\nexport default GameComponentPresets.puzzleGame(TowerHanoi, 800);\n</script>\n\n<style scoped>\n@import url(\"./sum.css\");\n\n/* 汉诺塔游戏样式 - 遵循项目标准 */\n.towers-container {\n  display: flex;\n  justify-content: space-around;\n  align-items: flex-end;\n  min-height: 18.75rem;\n  padding: 1.25rem 0;\n  gap: 1rem;\n  flex-wrap: wrap;\n}\n\n.tower {\n  position: relative;\n  width: 11.25rem;\n  height: 17.5rem;\n  margin: 0 0.625rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  border-radius: 0.5rem;\n  background: linear-gradient(to bottom, #f8f8f8, #e8e8e8);\n  border: 0.125rem solid #ccc;\n}\n\n.tower:hover {\n  background: linear-gradient(to bottom, #f0f0f0, #e0e0e0);\n  border-color: #999;\n  transform: translateY(-0.125rem);\n  box-shadow: 0 0.25rem 0.75rem rgba(0,0,0,0.15);\n}\n\n.tower.selected {\n  background: linear-gradient(to bottom, #e3f2fd, #bbdefb);\n  border-color: #2196f3;\n  box-shadow: 0 0.375rem 1.25rem rgba(33, 150, 243, 0.3);\n  transform: translateY(-0.25rem);\n}\n\n.tower-label {\n  position: absolute;\n  top: 0.625rem;\n  left: 50%;\n  transform: translateX(-50%);\n  font-weight: bold;\n  color: #333;\n  font-size: 1rem;\n  background: rgba(255,255,255,0.9);\n  padding: 0.3125rem 0.625rem;\n  border-radius: 0.9375rem;\n  border: 0.0625rem solid #ddd;\n}\n\n.tower-base {\n  position: absolute;\n  bottom: 0;\n  left: 0.625rem;\n  right: 0.625rem;\n  height: 0.5rem;\n  background: linear-gradient(to right, #8d6e63, #6d4c41);\n  border-radius: 0.25rem;\n  box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.2);\n}\n\n.tower-pole {\n  position: absolute;\n  bottom: 0.5rem;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 0.375rem;\n  height: 13.75rem;\n  background: linear-gradient(to top, #8d6e63, #6d4c41);\n  border-radius: 0.1875rem;\n  box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.2);\n}\n\n.disks-container {\n  position: absolute;\n  bottom: 0.5rem;\n  left: 0.625rem;\n  right: 0.625rem;\n  display: flex;\n  flex-direction: column-reverse;\n  align-items: center;\n  gap: 0.125rem;\n}\n\n.disk {\n  height: 1.5rem;\n  border-radius: 0.75rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-weight: bold;\n  font-size: 0.75rem;\n  text-shadow: 0.0625rem 0.0625rem 0.125rem rgba(0,0,0,0.5);\n  box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.2);\n  transition: all 0.2s ease;\n  border: 0.125rem solid rgba(255,255,255,0.3);\n}\n\n.disk:hover {\n  transform: scale(1.05);\n  box-shadow: 0 0.25rem 0.5rem rgba(0,0,0,0.3);\n}\n\n/* 不同大小的圆盘颜色 */\n.disk-size-1 { background: linear-gradient(45deg, #ff6b6b, #ee5a52); width: 2.5rem; }\n.disk-size-2 { background: linear-gradient(45deg, #4ecdc4, #44a08d); width: 3.75rem; }\n.disk-size-3 { background: linear-gradient(45deg, #45b7d1, #3498db); width: 5rem; }\n.disk-size-4 { background: linear-gradient(45deg, #f9ca24, #f0932b); width: 6.25rem; }\n.disk-size-5 { background: linear-gradient(45deg, #6c5ce7, #5f3dc4); width: 7.5rem; }\n.disk-size-6 { background: linear-gradient(45deg, #fd79a8, #e84393); width: 8.75rem; }\n.disk-size-7 { background: linear-gradient(45deg, #00b894, #00a085); width: 10rem; }\n.disk-size-8 { background: linear-gradient(45deg, #fdcb6e, #e17055); width: 11.25rem; }\n\n.difficulty-selector {\n  text-align: center;\n  margin: 1.25rem 0;\n  padding: 0.9375rem;\n  background: #f8f9fa;\n  border-radius: 0.5rem;\n  border: 0.0625rem solid #dee2e6;\n}\n\n.difficulty-selector label {\n  font-weight: bold;\n  color: #495057;\n  margin-right: 0.625rem;\n}\n\n/* 响应式设计 - 使用rem单位 */\n@media (max-width: 48rem) {\n  .towers-container {\n    flex-direction: column;\n    align-items: center;\n    gap: 1.25rem;\n  }\n  \n  .tower {\n    width: 10rem;\n    height: 12.5rem;\n  }\n  \n  .tower-pole {\n    height: 8.75rem;\n  }\n  \n  .disk {\n    height: 1.25rem;\n    font-size: 0.625rem;\n  }\n  \n  .disk-size-1 { width: 2rem; }\n  .disk-size-2 { width: 3rem; }\n  .disk-size-3 { width: 4rem; }\n  .disk-size-4 { width: 5rem; }\n  .disk-size-5 { width: 6rem; }\n  .disk-size-6 { width: 7rem; }\n  .disk-size-7 { width: 8rem; }\n  .disk-size-8 { width: 9rem; }\n}\n\n@media (max-width: 30rem) {\n  .tower {\n    width: 8.75rem;\n    height: 11.25rem;\n  }\n  \n  .tower-pole {\n    height: 7.5rem;\n  }\n  \n  .disk {\n    height: 1.125rem;\n    font-size: 0.5625rem;\n  }\n  \n  .disk-size-1 { width: 1.75rem; }\n  .disk-size-2 { width: 2.625rem; }\n  .disk-size-3 { width: 3.5rem; }\n  .disk-size-4 { width: 4.375rem; }\n  .disk-size-5 { width: 5.25rem; }\n  .disk-size-6 { width: 6.125rem; }\n  .disk-size-7 { width: 7rem; }\n  .disk-size-8 { width: 7.875rem; }\n}\n\n/* 动画效果 */\n@keyframes diskMove {\n  0% { transform: translateY(0) scale(1); }\n  50% { transform: translateY(-0.625rem) scale(1.1); }\n  100% { transform: translateY(0) scale(1); }\n}\n\n.disk.moving {\n  animation: diskMove 0.3s ease-in-out;\n}\n\n/* 胜利动画 */\n@keyframes victory {\n  0%, 100% { transform: scale(1); }\n  50% { transform: scale(1.05); }\n}\n\n.tower.completed {\n  animation: victory 1s ease-in-out infinite;\n}\n</style>","import { GameComponentPresets } from \"../utils/gameComponentFactory.js\";\n\n/**\n * TowerHanoi对象定义了汉诺塔游戏的基础组件，将传递给GameComponentPresets.puzzleGame工厂函数\n * 工厂函数会为该组件添加游戏管理、按钮控制、自动操作等功能\n * \n * 游戏规则：\n * - 有三根柱子，第一根柱子上有若干个大小不同的圆盘\n * - 目标是将所有圆盘移动到第三根柱子\n * - 每次只能移动一个圆盘\n * - 大盘不能放在小盘上面\n * - 移动次数越少越好\n */\nconst TowerHanoi = {\n  name: \"TowerHanoi\",\n  data() {\n    return {\n      title: \"Tower of Hanoi\",\n      // 三根柱子，每根柱子是一个数组，存储圆盘（数字越大表示圆盘越大）\n      towers: [[], [], []],\n      // 当前选中的柱子索引（-1表示未选中）\n      selectedTower: -1,\n      // 圆盘总数\n      diskCount: 4,\n      // 移动次数\n      moveCount: 0,\n      // 最少需要移动的次数（理论最优解）\n      minMoves: 0,\n      \n      // 以下属性由工厂函数GameComponentPresets.puzzleGame添加：\n      // gameManager: 游戏管理器实例，提供游戏状态控制和自动操作功能\n      // customButtons: 自定义按钮数组，用于存储游戏控制按钮配置\n      // step: 当前游戏步骤计数\n      // history: 操作历史记录数组\n    };\n  },\n  \n  // 初始化\n  methods: {\n    init() {\n      this.resetGame();\n    },\n    \n    /**\n     * 重置游戏\n     */\n    resetGame() {\n      this.towers = [[], [], []];\n      this.selectedTower = -1;\n      this.moveCount = 0;\n      this.minMoves = Math.pow(2, this.diskCount) - 1;\n      \n      // 在第一根柱子上放置所有圆盘（从大到小）\n      for (let i = this.diskCount; i >= 1; i--) {\n        this.towers[0].push(i);\n      }\n      \n      this.gameManager.recordOperation();\n    },\n    \n    /**\n     * 选择或移动圆盘\n     * @param {number} towerIndex - 柱子索引（0, 1, 2）\n     */\n    clickTower(towerIndex) {\n      // 如果当前没有选中柱子\n      if (this.selectedTower === -1) {\n        // 只能选中有圆盘的柱子\n        if (this.towers[towerIndex].length > 0) {\n          this.selectedTower = towerIndex;\n          this.gameManager.recordOperation();\n        }\n        return;\n      }\n      \n      // 如果点击的是同一个柱子，取消选择\n      if (this.selectedTower === towerIndex) {\n        this.selectedTower = -1;\n        return;\n      }\n      \n      // 尝试移动圆盘\n      this.moveDisk(this.selectedTower, towerIndex);\n    },\n    \n    /**\n     * 移动圆盘\n     * @param {number} fromTower - 源柱子索引\n     * @param {number} toTower - 目标柱子索引\n     */\n    moveDisk(fromTower, toTower) {\n      const fromDisks = this.towers[fromTower];\n      const toDisks = this.towers[toTower];\n      \n      // 源柱子必须不为空\n      if (fromDisks.length === 0) {\n        this.selectedTower = -1;\n        return;\n      }\n      \n      const disk = fromDisks[fromDisks.length - 1];\n      \n      // 目标柱子必须为空，或者顶部的圆盘比要移动的圆盘大\n      if (toDisks.length === 0 || toDisks[toDisks.length - 1] > disk) {\n        // 执行移动\n        fromDisks.pop();\n        toDisks.push(disk);\n        this.moveCount++;\n        this.selectedTower = -1;\n        \n        // 记录操作\n        this.gameManager.recordOperation({\n          type: \"move\",\n          from: fromTower,\n          to: toTower,\n          disk: disk,\n          moveCount: this.moveCount\n        });\n        \n        // 检查游戏是否完成\n        this.checkGameCompletion();\n      } else {\n        // 移动无效，取消选择\n        this.selectedTower = -1;\n      }\n    },\n    \n    /**\n     * 检查游戏是否完成\n     */\n    checkGameCompletion() {\n      // 如果所有圆盘都在第三根柱子上，游戏胜利\n      if (this.towers[2].length === this.diskCount) {\n        this.gameManager.setWin();\n        return;\n      }\n      \n      // 检查是否还有可能的移动\n      if (!this.hasValidMoves()) {\n        this.gameManager.setLose();\n      }\n    },\n    \n    /**\n     * 检查是否还有有效的移动\n     * @returns {boolean} 是否还有有效移动\n     */\n    hasValidMoves() {\n      // 汉诺塔总是有解，所以这里返回true\n      // 只有在极端情况下才会没有有效移动\n      return true;\n    },\n    \n    /**\n     * 自动执行游戏步骤（AI模式）\n     * 使用递归算法解决汉诺塔问题\n     */\n    async stepFn() {\n      await this.gameManager.step(async () => {\n        // 使用最优算法移动圆盘\n        await this.solveHanoi(this.diskCount, 0, 2, 1);\n      });\n    },\n    \n    /**\n     * 递归解决汉诺塔问题\n     * @param {number} n - 要移动的圆盘数量\n     * @param {number} from - 源柱子\n     * @param {number} to - 目标柱子\n     * @param {number} aux - 辅助柱子\n     */\n    async solveHanoi(n, from, to, aux) {\n      if (n === 1) {\n        // 移动一个圆盘\n        this.moveDisk(from, to);\n        await this.wait();\n      } else {\n        // 递归移动n-1个圆盘到辅助柱子\n        await this.solveHanoi(n - 1, from, aux, to);\n        // 移动最大的圆盘到目标柱子\n        this.moveDisk(from, to);\n        await this.wait();\n        // 将n-1个圆盘从辅助柱子移动到目标柱子\n        await this.solveHanoi(n - 1, aux, to, from);\n      }\n    },\n    \n    /**\n     * 处理撤销操作\n     * @param {Object} operation - 要撤销的操作\n     */\n    handleUndo(operation) {\n      if (operation.type === \"move\") {\n        // 撤销移动操作\n        const disk = this.towers[operation.to].pop();\n        this.towers[operation.from].push(disk);\n        this.moveCount--;\n        this.selectedTower = -1;\n      }\n    },\n    \n    /**\n     * 获取塔的名称\n     * @param {number} towerIndex - 塔的索引\n     * @returns {string} 塔的名称\n     */\n    getTowerName(towerIndex) {\n      const towerNames = ['A塔', 'B塔', 'C塔'];\n      return towerNames[towerIndex] || '未知塔';\n    },\n\n    /**\n     * 获取圆盘的CSS类名\n     * @param {number} diskSize - 圆盘大小\n     * @returns {string} CSS类名\n     */\n    getDiskClass(diskSize) {\n      return `disk-size-${diskSize}`;\n    },\n\n    /**\n     * 获取圆盘的样式\n     * @param {number} diskSize - 圆盘大小\n     * @returns {Object} 样式对象\n     */\n    getDiskStyle(diskSize) {\n      const baseWidth = 40;\n      const widthIncrement = 20;\n      const width = baseWidth + (diskSize - 1) * widthIncrement;\n      \n      return {\n        width: `${width}px`,\n        backgroundColor: this.getDiskColor(diskSize)\n      };\n    },\n\n    /**\n     * 获取圆盘颜色\n     * @param {number} diskSize - 圆盘大小\n     * @returns {string} 颜色值\n     */\n    getDiskColor(diskSize) {\n      const colors = [\n        'linear-gradient(45deg, #ff6b6b, #ee5a52)', // 1\n        'linear-gradient(45deg, #4ecdc4, #44a08d)', // 2\n        'linear-gradient(45deg, #45b7d1, #3498db)', // 3\n        'linear-gradient(45deg, #f9ca24, #f0932b)', // 4\n        'linear-gradient(45deg, #6c5ce7, #5f3dc4)', // 5\n        'linear-gradient(45deg, #fd79a8, #e84393)', // 6\n        'linear-gradient(45deg, #00b894, #00a085)', // 7\n        'linear-gradient(45deg, #a29bfe, #6c5ce7)'  // 8\n      ];\n      return colors[diskSize - 1] || colors[0];\n    },\n    \n    /**\n     * 渲染文本视图 - 显示当前游戏状态\n     * 用于终端交互式游戏\n     */\n    renderTextView() {\n      console.log('\\n╔════════════════════════════════════════════════╗');\n      console.log('║            汉诺塔 (Tower of Hanoi)             ║');\n      console.log('╚════════════════════════════════════════════════╝');\n      console.log(`\\n步数: ${this.step} | 移动次数: ${this.moveCount} | 最优解: ${this.minMoves} 步\\n`);\n      \n      // 显示三根柱子\n      const towerNames = ['A塔', 'B塔', 'C塔'];\n      const maxHeight = this.diskCount;\n      \n      // 从顶部到底部显示每层的圆盘\n      for (let level = maxHeight - 1; level >= 0; level--) {\n        let line = '';\n        for (let tower = 0; tower < 3; tower++) {\n          const disks = this.towers[tower];\n          const diskIndex = level - (maxHeight - disks.length);\n          \n          if (diskIndex >= 0 && diskIndex < disks.length) {\n            const diskSize = disks[diskIndex];\n            const diskVisual = '█'.repeat(diskSize * 2 + 1);\n            line += `  ${diskVisual.padStart(this.diskCount + 1, ' ').padEnd(this.diskCount * 2 + 1, ' ')}  `;\n          } else {\n            line += `  ${'|'.padStart(this.diskCount + 1, ' ').padEnd(this.diskCount * 2 + 1, ' ')}  `;\n          }\n        }\n        console.log(line);\n      }\n      \n      // 显示柱子底部\n      console.log('  ' + '═'.repeat(this.diskCount * 2 + 1) + '  ' + '  ' + '═'.repeat(this.diskCount * 2 + 1) + '  ' + '  ' + '═'.repeat(this.diskCount * 2 + 1) + '  ');\n      console.log(`  ${towerNames[0].padStart(this.diskCount + 1, ' ').padEnd(this.diskCount * 2 + 1, ' ')}  ${towerNames[1].padStart(this.diskCount + 1, ' ').padEnd(this.diskCount * 2 + 1, ' ')}  ${towerNames[2].padStart(this.diskCount + 1, ' ').padEnd(this.diskCount * 2 + 1, ' ')}  `);\n      \n      // 显示选中状态\n      if (this.selectedTower >= 0) {\n        console.log(`\\n已选中: ${towerNames[this.selectedTower]}`);\n      }\n      \n      return '渲染完成';\n    },\n    \n    /**\n     * 获取当前可用的操作列表\n     * 用于终端交互式游戏\n     */\n    getAvailableActions() {\n      const actions = [];\n      const towerNames = ['A塔', 'B塔', 'C塔'];\n      \n      // 重新开始按钮\n      actions.push({\n        id: 1,\n        label: '重新开始 (RESTART)',\n        method: 'goon',\n        args: []\n      });\n      \n      // 柱子操作\n      for (let i = 0; i < 3; i++) {\n        const hasDisks = this.towers[i].length > 0;\n        \n        if (this.selectedTower === -1) {\n          // 未选中状态，可以选择有圆盘的柱子\n          if (hasDisks) {\n            actions.push({\n              id: actions.length + 1,\n              label: `选择${towerNames[i]}`,\n              method: 'clickTower',\n              args: [i]\n            });\n          }\n        } else {\n          // 已选中状态，可以移动到目标柱子\n          if (i !== this.selectedTower) {\n            const canMove = this.towers[i].length === 0 || \n                           this.towers[this.selectedTower][this.towers[this.selectedTower].length - 1] < this.towers[i][this.towers[i].length - 1];\n            \n            if (canMove) {\n              actions.push({\n                id: actions.length + 1,\n                label: `移动到${towerNames[i]}`,\n                method: 'clickTower',\n                args: [i]\n              });\n            }\n          }\n          \n          // 取消选择\n          actions.push({\n            id: actions.length + 1,\n            label: '取消选择',\n            method: 'clickTower',\n            args: [this.selectedTower]\n          });\n        }\n      }\n      \n      return actions;\n    }\n  },\n  \n  computed: {\n    /**\n     * 计算游戏完成度百分比\n     */\n    completionPercentage() {\n      const completedDisks = this.towers[2].length;\n      return Math.round((completedDisks / this.diskCount) * 100);\n    },\n    \n    /**\n     * 计算效率评分（移动次数与最优解的比值）\n     */\n    efficiencyScore() {\n      if (this.moveCount === 0) return 100;\n      const optimalMoves = this.minMoves;\n      const actualMoves = this.moveCount;\n      return Math.round((optimalMoves / actualMoves) * 100);\n    }\n  },\n  \n  watch: {\n    /**\n     * 监听移动次数变化\n     */\n    moveCount(newVal, oldVal) {\n      if (newVal > oldVal) {\n        console.log(`移动次数: ${newVal}`);\n      }\n    }\n  }\n};\n\n// 使用工厂函数创建增强的TowerHanoi组件并导出\nexport default GameComponentPresets.puzzleGame(TowerHanoi, 800);\n\n/**\n * 工厂函数GameComponentPresets.puzzleGame为TowerHanoi组件添加的功能：\n * \n * 基础增强功能（来自createEnhancedGameComponent）：\n * - gameManager属性：提供游戏状态管理、自动模式控制和步骤执行\n * - customButtons属性：存储自定义按钮配置\n * - displayButtons计算属性：决定显示哪些游戏控制按钮\n * - gameControlsConfig计算属性：游戏控制配置\n * - wait()、undo()、pass()、goon()等方法：游戏控制方法\n * - created和beforeUnmount生命周期钩子：管理游戏状态和事件监听\n * \n * puzzleGame特有功能：\n * - 提供益智游戏相关的自动操作和状态管理\n * - 支持撤销操作（通过handleUndo方法）\n * - 支持自动步骤延迟配置（此处设置为800ms）\n * - 提供提示功能（自动计算最优解）\n */","import { render } from \"./TowerHanoi.vue?vue&type=template&id=b6aabbc0&scoped=true\"\nimport script from \"./TowerHanoi.vue?vue&type=script&lang=js\"\nexport * from \"./TowerHanoi.vue?vue&type=script&lang=js\"\n\nimport \"./TowerHanoi.vue?vue&type=style&index=0&id=b6aabbc0&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-b6aabbc0\"]])\n\nexport default __exports__","<template>\n  <GameLayout\n    v-bind=\"gameLayoutProps\"\n    @undo=\"undo\"\n    @goon=\"goon\"\n    @step=\"stepFn\"\n    @auto=\"pass\"\n  >\n    <template #game-content>\n      <div class=\"row\">\n        <span>步数: {{ step }}</span>\n        <br />\n        <span>当前数字数量: {{ currentNumberCount }}</span>\n      </div>\n      <div class=\"row\">\n        <div>\n          <div\n            class=\"cardsul center\"\n            style=\"\n              padding-left: 0;\n              margin: 0;\n              width: 100%;\n              max-width: 37.5rem;\n              background-color: #719192;\n              padding: 0.3125rem 0;\n            \"\n          >\n            <div\n              v-for=\"(item, i) in grid\"\n              :key=\"i\"\n              class=\"m-0 center\"\n              style=\"width: 16%; height: 3.125rem; border-radius: 0.3125rem; overflow: hidden; margin: 0.125rem; cursor: pointer;\"\n              @click=\"canOperate && clickNumber(i)\"\n              :style=\"{\n                backgroundColor: item === 0 ? '#4CAF50' : item === 99 ? '#FF5722' : item === -1 ? '#E0E0E0' : '#5FB878',\n                border: targetPath.includes(i) ? '2px solid #FFD700' : '1px solid #333'\n              }\"\n            >\n              <div\n                class=\"center\"\n                style=\"width: 100%; height: 100%; position: relative; font-size: 1.125rem; font-weight: bold; color: white;\"\n              >\n                <span v-if=\"item === 0\">起</span>\n                <span v-else-if=\"item === 99\">终</span>\n                <span v-else-if=\"item === -1\"></span>\n                <span v-else>{{ item }}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"row\" style=\"margin-top: 1rem;\">\n        <div style=\"text-align: center; color: #dfcdc3; font-size: 1rem;\">\n          <span v-if=\"pathFound\">✓ 找到有效路径</span>\n          <span v-else>✗ 未找到路径</span>\n          <br />\n          <span v-if=\"emptyPos >= 0\">空位位置: {{ emptyPos + 1 }}</span>\n        </div>\n      </div>\n    </template>\n\n    <template #win-content>\n      <h1 class=\"small\">步数: {{ step }}</h1>\n      <h1 class=\"small\">找到路径: {{ targetPath.length }} 步</h1>\n    </template>\n  </GameLayout>\n</template>\n\n<script>\nimport NumberMazeComponent from \"./NumberMaze.js\";\n\nconst component = NumberMazeComponent;\n\nexport default component;\n</script>\n\n<style scoped>\n@import url(\"./sum.css\");\n\n.cardsul {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  padding: 1rem;\n  gap: 0.25rem;\n}\n\n.cardsul > div {\n  transition: all 0.3s ease;\n}\n\n.cardsul > div:hover {\n  transform: scale(1.05);\n  box-shadow: 0 4px 8px rgba(0,0,0,0.3);\n}\n\n.cardsul > div:active {\n  transform: scale(0.95);\n}\n</style>","import { shuffleCards } from \"../utils/help.js\";\nimport { GameComponentPresets } from \"../utils/gameComponentFactory.js\";\n\n/**\n * NumberMaze对象定义了数字迷宫游戏的基础组件，将传递给GameComponentPresets.puzzleGame工厂函数\n * 工厂函数会为该组件添加游戏管理、按钮控制、自动操作等功能\n * \n * 游戏规则：\n * 1. 6x6网格包含起点(0)、终点(35)和数字方块\n * 2. 数字方块可以向相邻空位移动\n * 3. 需要创建从起点到终点的路径，路径数字必须满足递增关系\n * 4. 当存在有效路径时游戏胜利\n * 5. 提供自动移动功能，智能寻找解决方案\n */\n\nconst NumberMaze = {\n  name: \"NumberMaze\",\n  data() {\n    return {\n      title: \"Number Maze\",\n      grid: [], // 6x6网格，-1表示空位\n      gridSize: 6,\n      numbers: [], // 数字方块数组\n      emptyPos: -1, // 空位位置\n      targetPath: [], // 目标路径\n      pathFound: false, // 是否找到有效路径\n      number: 20, // 使用20个数字方块\n      \n      // 以下属性由工厂函数GameComponentPresets.puzzleGame添加：\n      // gameManager: 游戏状态管理器实例，提供游戏状态控制和自动操作功能\n      // customButtons: 自定义按钮数组，用于存储游戏控制按钮配置\n      // step: 当前游戏步骤计数\n      // history: 操作历史记录数组，支持撤销重做功能\n    };\n  },\n  \n  // 初始化\n  methods: {\n    init() {\n      this.grid = Array(this.gridSize * this.gridSize).fill(-1);\n      this.numbers = [];\n      this.emptyPos = -1;\n      this.pathFound = false;\n      this.targetPath = [];\n      \n      // 生成数字方块（1-20）\n      for (let i = 0; i < this.number; i++) {\n        this.numbers.push(i + 1);\n      }\n      shuffleCards(this.numbers, this.number);\n      \n      // 随机放置数字方块到网格中（除了起点和终点）\n      const availablePositions = [];\n      for (let i = 0; i < this.gridSize * this.gridSize; i++) {\n        if (i !== 0 && i !== this.gridSize * this.gridSize - 1) { // 0是起点，35是终点\n          availablePositions.push(i);\n        }\n      }\n      shuffleCards(availablePositions, availablePositions.length);\n      \n      // 放置数字方块\n      for (let i = 0; i < Math.min(this.number, availablePositions.length); i++) {\n        this.grid[availablePositions[i]] = this.numbers[i];\n      }\n      \n      // 设置一个空位（用于移动）\n      if (availablePositions.length > this.number) {\n        this.emptyPos = availablePositions[this.number];\n        this.grid[this.emptyPos] = -1;\n      }\n      \n      // 设置起点和终点标记\n      this.grid[0] = 0; // 起点\n      this.grid[this.gridSize * this.gridSize - 1] = 99; // 终点\n      \n      this.autoCalc();\n    },\n    \n    // 获取指定位置的相邻位置\n    getNeighbors(pos) {\n      const neighbors = [];\n      const row = Math.floor(pos / this.gridSize);\n      const col = pos % this.gridSize;\n      \n      // 上\n      if (row > 0) neighbors.push(pos - this.gridSize);\n      // 下\n      if (row < this.gridSize - 1) neighbors.push(pos + this.gridSize);\n      // 左\n      if (col > 0) neighbors.push(pos - 1);\n      // 右\n      if (col < this.gridSize - 1) neighbors.push(pos + 1);\n      \n      return neighbors;\n    },\n    \n    // 移动数字方块\n    async moveNumber(fromPos, toPos) {\n      console.log('moveNumber called with fromPos:', fromPos, 'toPos:', toPos);\n      \n      if (this.grid[toPos] !== -1) {\n        console.log('moveNumber returning false - target not empty');\n        return false; // 目标位置不是空位\n      }\n      \n      // 检查是否相邻\n      const neighbors = this.getNeighbors(fromPos);\n      console.log('neighbors:', neighbors);\n      console.log('toPos in neighbors:', neighbors.includes(toPos));\n      \n      if (!neighbors.includes(toPos)) {\n        console.log('moveNumber returning false - not adjacent');\n        return false; // 不相邻\n      }\n      \n      // 获取要移动的数字值\n      const numberValue = this.grid[fromPos];\n      console.log('numberValue:', numberValue);\n      \n      // 执行移动\n      this.grid[toPos] = numberValue;\n      this.grid[fromPos] = -1;\n      this.emptyPos = fromPos;\n      \n      console.log('moveNumber calling recordOperation');\n      \n      // 记录操作\n      this.recordOperation(\"move\", {\n        from: fromPos,\n        to: toPos,\n        number: numberValue\n      });\n      \n      console.log('moveNumber returning true');\n      return true;\n    },\n    \n    // 点击数字方块\n    clickNumber(pos) {\n      console.log('clickNumber called with pos:', pos);\n      console.log('grid[pos]:', this.grid[pos]);\n      \n      if (this.grid[pos] <= 0 || this.grid[pos] === 99) {\n        console.log('clickNumber returning early - invalid position');\n        return; // 不能移动起点、终点或空位\n      }\n      \n      console.log('clickNumber proceeding with move');\n      \n      // 找到相邻的空位\n      const neighbors = this.getNeighbors(pos);\n      let moved = false;\n      \n      for (const neighbor of neighbors) {\n        if (this.grid[neighbor] === -1) {\n          // 尝试移动到相邻的空位\n          if (this.moveNumber(pos, neighbor)) {\n            console.log('moveNumber succeeded to neighbor:', neighbor);\n            moved = true;\n            break;\n          }\n        }\n      }\n      \n      if (moved) {\n        // 移动成功，检查游戏状态\n        this.autoCalc();\n      } else {\n        console.log('moveNumber failed - no valid adjacent empty position');\n      }\n    },\n    \n    // 查找从起点到终点的有效路径\n    findValidPath() {\n      const start = 0;\n      const end = this.gridSize * this.gridSize - 1;\n      \n      // 使用BFS查找路径\n      const queue = [{pos: start, path: [start], value: 0}];\n      const visited = new Set([start]);\n      \n      while (queue.length > 0) {\n        const current = queue.shift();\n        \n        if (current.pos === end) {\n          return current.path; // 找到路径\n        }\n        \n        const neighbors = this.getNeighbors(current.pos);\n        for (const neighbor of neighbors) {\n          if (visited.has(neighbor)) continue;\n          \n          const neighborValue = this.grid[neighbor];\n          if (neighborValue === -1) continue; // 空位\n          \n          // 检查数字关系：必须递增\n          if (neighborValue > current.value && neighborValue !== 99) {\n            visited.add(neighbor);\n            queue.push({\n              pos: neighbor,\n              path: [...current.path, neighbor],\n              value: neighborValue\n            });\n          } else if (neighborValue === 99 && current.value > 0) {\n            // 到达终点\n            visited.add(neighbor);\n            queue.push({\n              pos: neighbor,\n              path: [...current.path, neighbor],\n              value: current.value\n            });\n          }\n        }\n      }\n      \n      return null; // 没有找到路径\n    },\n    \n    // 自动计算游戏状态\n    autoCalc() {\n      const path = this.findValidPath();\n      this.pathFound = path !== null;\n      this.targetPath = path || [];\n      \n      if (this.pathFound) {\n        this.gameManager.setWin();\n      }\n    },\n    \n    // 获取自动移动的下一步\n    getNextAutoMove() {\n      // 简单的启发式算法：尝试将数字移动到能够创建递增路径的位置\n      const currentNumbers = [];\n      for (let i = 0; i < this.grid.length; i++) {\n        if (this.grid[i] > 0 && this.grid[i] < 99) {\n          currentNumbers.push({pos: i, value: this.grid[i]});\n        }\n      }\n      \n      // 按值排序\n      currentNumbers.sort((a, b) => a.value - b.value);\n      \n      // 尝试为每个数字找到合适的位置\n      for (const num of currentNumbers) {\n        const neighbors = this.getNeighbors(num.pos);\n        for (const neighbor of neighbors) {\n          if (this.grid[neighbor] === -1) {\n            // 检查移动后是否能帮助创建路径\n            const testGrid = [...this.grid];\n            testGrid[neighbor] = num.value;\n            testGrid[num.pos] = -1;\n            \n            // 简单的路径检查\n            if (this.hasPotentialPath(testGrid, neighbor)) {\n              return {from: num.pos, to: neighbor};\n            }\n          }\n        }\n      }\n      \n      return null;\n    },\n    \n    // 检查是否有潜在的路径可能\n    hasPotentialPath(grid, startPos) {\n      // 简单的检查：从给定位置开始，看是否能到达终点\n      const visited = new Set();\n      const queue = [startPos];\n      const end = this.gridSize * this.gridSize - 1;\n      \n      while (queue.length > 0) {\n        const current = queue.shift();\n        if (current === end) return true;\n        \n        const neighbors = this.getNeighbors(current);\n        for (const neighbor of neighbors) {\n          if (visited.has(neighbor)) continue;\n          \n          const value = grid[neighbor];\n          if (value === -1 || value === 99) {\n            visited.add(neighbor);\n            queue.push(neighbor);\n          }\n        }\n      }\n      \n      return false;\n    },\n    \n    // 重写stepFn方法，实现自动移动\n    async stepFn() {\n      await this.gameManager.step(async () => {\n        const nextMove = this.getNextAutoMove();\n        if (nextMove) {\n          await this.moveNumber(nextMove.from, nextMove.to);\n          await this.wait();\n        } else {\n          // 没有有效的自动移动，停止自动模式\n          this.gameManager.stopAuto();\n        }\n      });\n    },\n    \n    // 记录操作\n    recordOperation(type, data) {\n      console.log('recordOperation called:', type, data);\n      console.log('gameManager exists:', !!this.gameManager);\n      console.log('gameManager.recordOperation exists:', !!this.gameManager?.recordOperation);\n      \n      if (this.gameManager && this.gameManager.recordOperation) {\n        this.gameManager.recordOperation({\n          type: type,\n          ...data,\n          timestamp: Date.now(),\n        });\n        console.log('Operation recorded successfully');\n      } else {\n        console.error('Cannot record operation - gameManager not available');\n      }\n    },\n    \n    // 处理撤销操作\n    handleUndo(operation) {\n      console.log('=== HANDLEUNDO CALLED ===');\n      console.log('handleUndo called with operation:', operation);\n      console.log('Before undo - grid[5]:', this.grid[5], 'grid[11]:', this.grid[11]);\n      switch (operation.type) {\n        case \"move\":\n          // 撤销移动操作\n          this.grid[operation.from] = operation.number;\n          this.grid[operation.to] = -1;\n          this.emptyPos = operation.to;\n          console.log('Undo completed - moved', operation.number, 'from', operation.to, 'to', operation.from);\n          console.log('this.grid after undo:', this.grid[operation.from], this.grid[operation.to]);\n          break;\n      }\n    },\n    \n    /**\n     * 渲染文本视图 - 显示当前游戏状态\n     * 用于终端交互式游戏\n     */\n    renderTextView() {\n      console.log('\\n╔════════════════════════════════════════════════╗');\n      console.log('║              数字迷宫 (Number Maze)           ║');\n      console.log('╚════════════════════════════════════════════════╝');\n      console.log(`\\n步数: ${this.step}\\n`);\n      \n      // 显示6x6网格\n      for (let row = 0; row < this.gridSize; row++) {\n        let rowStr = '  ';\n        for (let col = 0; col < this.gridSize; col++) {\n          const pos = row * this.gridSize + col;\n          const value = this.grid[pos];\n          let cellStr;\n          \n          if (value === 0) {\n            cellStr = '[起]'; // 起点\n          } else if (value === 99) {\n            cellStr = '[终]'; // 终点\n          } else if (value === -1) {\n            cellStr = '[  ]'; // 空位\n          } else {\n            cellStr = `[${value.toString().padStart(2, '0')}]`;\n          }\n          \n          // 标记路径中的位置\n          if (this.targetPath.includes(pos)) {\n            cellStr = cellStr.replace('[', '*[').replace(']', ']*');\n          }\n          \n          rowStr += cellStr + ' ';\n        }\n        console.log(rowStr);\n      }\n      \n      console.log(`\\n空位位置: ${this.emptyPos + 1}`);\n      console.log(`路径状态: ${this.pathFound ? '✓ 找到有效路径' : '✗ 未找到路径'}`);\n      \n      if (this.pathFound && this.targetPath.length > 0) {\n        const pathValues = this.targetPath.map(pos => {\n          const value = this.grid[pos];\n          return value === 0 ? '起' : value === 99 ? '终' : value;\n        });\n        console.log(`路径: ${pathValues.join(' → ')}`);\n      }\n      \n      return '渲染完成';\n    },\n  },\n  \n  computed: {\n    // 计算当前数字数量\n    currentNumberCount() {\n      let count = 0;\n      for (let i = 0; i < this.grid.length; i++) {\n        if (this.grid[i] > 0 && this.grid[i] < 99) {\n          count++;\n        }\n      }\n      return count;\n    },\n    \n    // 计算网格状态（用于状态检测）\n    gridState() {\n      return this.grid.join(',');\n    }\n  }\n};\n\n// 使用工厂函数创建增强的NumberMaze组件并导出\nexport default GameComponentPresets.puzzleGame(NumberMaze, 800);\n\n/**\n * 工厂函数GameComponentPresets.puzzleGame为NumberMaze组件添加的功能：\n * \n * 基础增强功能（来自createEnhancedGameComponent）：\n * - gameManager属性：提供游戏状态管理、自动模式控制和步骤执行\n * - customButtons属性：存储自定义按钮配置\n * - displayButtons计算属性：决定显示哪些游戏控制按钮\n * - gameControlsConfig计算属性：游戏控制配置\n * - wait()、pass()、goon()等方法：游戏控制方法\n * - created和beforeUnmount生命周期钩子：管理游戏状态和事件监听\n * \n * puzzleGame特有功能：\n * - step属性：游戏步骤计数器\n * - history属性：操作历史记录数组\n * - 支持撤销重做功能\n * - 提供益智游戏相关的自动操作和状态管理\n * - 支持自动步骤延迟配置（此处设置为800ms）\n */","import { render } from \"./NumberMaze.vue?vue&type=template&id=120f0fb9&scoped=true\"\nimport script from \"./NumberMaze.vue?vue&type=script&lang=js\"\nexport * from \"./NumberMaze.vue?vue&type=script&lang=js\"\n\nimport \"./NumberMaze.vue?vue&type=style&index=0&id=120f0fb9&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-120f0fb9\"]])\n\nexport default __exports__","<template>\n  <GameLayout\n    v-bind=\"gameLayoutProps\"\n    @goon=\"goon\"\n    @step=\"stepFn\"\n    @auto=\"pass\"\n  >\n    <template #game-content>\n      <div class=\"row\">\n        <span>MOVES: {{ moves }}</span>\n        <br />\n        <span>STEP: {{ step }}</span>\n      </div>\n      <div class=\"row\">\n        <div>\n          <ul\n            class=\"cardsul flex-col center\"\n            style=\"\n              padding-left: 0;\n              margin: 0;\n              width: 100%;\n              max-width: 31.25rem;\n            \"\n          >\n            <li\n              v-for=\"(row, rowIndex) in grid\"\n              :key=\"rowIndex\"\n              class=\"flex-row center\"\n              style=\"padding: 0; margin: 0; list-style: none\"\n            >\n              <div\n                v-for=\"(number, colIndex) in row\"\n                :key=\"colIndex\"\n                class=\"grid-cell\"\n                :class=\"{\n                  'empty-cell': number === 0\n                }\"\n                @click=\"canOperate && clickCard(rowIndex, colIndex)\"\n              >\n                <span v-if=\"number !== 0\" class=\"number-tile\">{{ number }}</span>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </template>\n\n    <template #win-content>\n      <h1 class=\"small\">MOVES: {{ moves }}</h1>\n      <h1 class=\"small\">STEP: {{ step }}</h1>\n    </template>\n  </GameLayout>\n</template>\n\n<script>\nimport NumberPuzzleComponent from \"./NumberPuzzle.js\";\n\nconst component = NumberPuzzleComponent;\n\nexport default component;\n</script>\n\n<style scoped>\n@import url(\"./sum.css\");\n\n.grid-cell {\n  width: 4rem;\n  height: 4rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: rgba(255, 255, 255, 0.9);\n  border-radius: 0.5rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 0.25rem 0.9375rem rgba(0, 0, 0, 0.1);\n  border: 0.125rem solid transparent;\n  margin: 0.125rem;\n}\n\n.grid-cell:hover {\n  transform: translateY(-0.125rem);\n  box-shadow: 0 0.375rem 1.25rem rgba(0, 0, 0, 0.15);\n}\n\n.grid-cell.movable-cell {\n  background: rgba(76, 175, 80, 0.9);\n  border-color: #4CAF50;\n}\n\n.grid-cell.movable-cell:hover {\n  background: rgba(76, 175, 80, 1);\n  transform: scale(1.05);\n}\n\n.grid-cell.empty-cell {\n  background: rgba(255, 255, 255, 0.2);\n  cursor: default;\n}\n\n.number-tile {\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: #333;\n  text-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.1);\n}\n\n/* 响应式设计 */\n@media (max-width: 480px) {\n  .grid-cell {\n    width: 3.5rem;\n    height: 3.5rem;\n  }\n  \n  .number-tile {\n    font-size: 1.3rem;\n  }\n}\n\n@media (max-width: 360px) {\n  .grid-cell {\n    width: 3rem;\n    height: 3rem;\n  }\n  \n  .number-tile {\n    font-size: 1.2rem;\n  }\n}\n</style>","import { GameComponentPresets } from \"../utils/gameComponentFactory.js\";\n\n/**\n * NumberPuzzle对象定义了数字拼图游戏的基础组件\n * 游戏规则：4×4网格，15个数字方块和1个空位，通过移动数字方块将数字按顺序排列\n */\n// 目标处理顺序：[数字, 目标行, 目标列] 对\nconst TARGET_SEQUENCE = [\n  [1, 0, 0], [2, 0, 1], [4, 3, 3], [3, 0, 3], [4, 2, 3], [4, 1, 3], [3, 0, 2], [4, 0, 3],\n  [5, 1, 0], [6, 1, 1], [7, 1, 3], [8, 2, 3], [7, 1, 2], [8, 1, 3],\n  [9, 3, 0], [13, 3, 1], [9, 2, 0], [13, 3, 0], [10, 3, 1], [14, 3, 2], [10, 2, 1], [14, 3, 1]\n];\n\nconst NumberPuzzle = {\n  name: \"NumberPuzzle\",\n  data() {\n    return {\n      title: \"数字拼图\",\n      grid: [], // 4×4网格，0表示空位\n      emptyPos: { row: 3, col: 3 }, // 空位位置\n      moves: 0, // 移动次数\n      \n      // 以下属性由工厂函数添加：\n      // gameManager: 游戏管理器实例\n      // customButtons: 自定义按钮数组\n      // step: 当前游戏步骤计数\n    };\n  },\n  \n  methods: {\n    /**\n     * 初始化游戏\n     * 创建已解决的拼图，然后进行随机打乱\n     */\n    init() {\n      // 创建已解决的拼图状态\n      this.grid = [];\n      let num = 1;\n      for (let i = 0; i < 4; i++) {\n        this.grid[i] = [];\n        for (let j = 0; j < 4; j++) {\n          if (i === 3 && j === 3) {\n            this.grid[i][j] = 0; // 右下角为空位\n          } else {\n            this.grid[i][j] = num++;\n          }\n        }\n      }\n      this.emptyPos = { row: 3, col: 3 };\n      this.moves = 0;\n      \n      // 随机打乱拼图（确保可解）\n      this.shuffleGrid();\n    },\n    \n    /**\n     * 随机打乱拼图\n     * 通过模拟有效移动来确保拼图可解\n     */\n    shuffleGrid() {\n      const moves = 100; // 进行100次随机移动\n      for (let i = 0; i < moves; i++) {\n        const validMoves = this.getValidMoves();\n        if (validMoves.length > 0) {\n          const randomMove = validMoves[Math.floor(Math.random() * validMoves.length)];\n          this.executeMove(randomMove.row, randomMove.col, false); // 不记录历史\n        }\n      }\n    },\n    \n    /**\n     * 获取所有有效的移动\n     * 返回可以与空位交换的数字位置数组\n     */\n    getValidMoves(direction) {\n      const moves = [];\n      const { row, col } = this.emptyPos;\n      \n      // 检查四个方向\n      let directions = [\n        { row: row - 1, col: col }, // 上\n        { row: row + 1, col: col }, // 下\n        { row: row, col: col - 1 }, // 左\n        { row: row, col: col + 1 }  // 右\n      ];\n\n      if (direction !== undefined) {\n        directions = directions.filter((_, index) => index === direction);\n      }\n      \n      for (const dir of directions) {\n        if (dir.row >= 0 && dir.row < 4 && dir.col >= 0 && dir.col < 4) {\n          moves.push(dir);\n        }\n      }\n      \n      return moves;\n    },\n    \n    /**\n     * 执行移动操作\n     * @param {number} row - 要移动的数字行位置\n     * @param {number} col - 要移动的数字列位置\n     * @param {boolean} recordHistory - 是否记录到历史\n     */\n    executeMove(row, col, recordHistory = true) {\n      // 检查是否与空位相邻\n      if (!this.isAdjacent(row, col, this.emptyPos.row, this.emptyPos.col)) {\n        return false;\n      }\n      \n      // 交换数字和空位\n      const number = this.grid[row][col];\n      this.grid[row][col] = 0;\n      this.grid[this.emptyPos.row][this.emptyPos.col] = number;\n      \n      // 更新空位位置\n      const oldEmptyPos = { ...this.emptyPos };\n      this.emptyPos = { row, col };\n      \n      if (recordHistory) {\n        this.moves++;\n        this.gameManager.recordOperation({\n          type: \"move\",\n          from: { row, col },\n          to: oldEmptyPos,\n          number: number,\n          hash: JSON.stringify(this.grid),\n        });\n      }\n      \n      return true;\n    },\n    \n    /**\n     * 检查两个位置是否相邻\n     */\n    isAdjacent(row1, col1, row2, col2) {\n      const rowDiff = Math.abs(row1 - row2);\n      const colDiff = Math.abs(col1 - col2);\n      return (rowDiff === 1 && colDiff === 0) || (rowDiff === 0 && colDiff === 1);\n    },\n    \n    /**\n     * 点击卡片处理\n     */\n    clickCard(rowOrDirection, col) {\n      if (!this.gameManager.hitflag) return;\n\n      if (rowOrDirection === undefined) return;\n\n      let row;\n      if (col === undefined) {\n        const move = this.getValidMoves(rowOrDirection);\n        if (move.length === 0) return;\n        row = move[0].row;\n        col = move[0].col;\n      } else {\n        row = rowOrDirection;\n      }\n      \n      // 如果点击的是空位，忽略\n      if (this.grid[row][col] === 0) return;\n      \n      // 尝试移动\n      if (this.executeMove(row, col)) {\n        // 检查是否完成\n        if (this.done()) {\n          this.gameManager.setWin();\n        }\n      }\n    },\n    \n    /**\n     * 检查是否只剩下最后6个格子需要处理（右下角区域）\n     * 第3行第2列到第4行第4列的六个格子\n     */\n    isFinalSixCells() {\n      // 检查最后6个格子是否包含数字10,11,12,0,14,15\n      const finalCells = [\n        {row: 2, col: 1}, {row: 2, col: 2}, {row: 2, col: 3},\n        {row: 3, col: 1}, {row: 3, col: 2}, {row: 3, col: 3}\n      ];\n      \n      const finalNumbers = [10, 11, 12, 0, 14, 15];\n      const numbersInFinalCells = [];\n      \n      for (const cell of finalCells) {\n        const number = this.grid[cell.row][cell.col];\n        numbersInFinalCells.push(number);\n      }\n      \n      // 检查这些数字是否都在最后6个数字范围内\n      return numbersInFinalCells.every(num => finalNumbers.includes(num)) && \n             numbersInFinalCells.length === 6;\n    },\n\n    /**\n     * 检查移动是否能让数字到达目标位置\n     */\n    canReachTargetInSteps(number, targetRow, targetCol, steps = 2) {\n      const currentPos = this.findNumberPosition(number);\n      if (!currentPos) return false;\n      \n      if (currentPos.row === targetRow && currentPos.col === targetCol) {\n        return true;\n      }\n      \n      if (steps <= 0) return false;\n      \n      // 使用临时网格模拟移动\n      const tempGrid = this.grid.map(row => [...row]);\n      const tempEmptyPos = { ...this.emptyPos };\n      \n      // 尝试所有可能的移动\n      const validMoves = this.getValidMoves();\n      \n      for (const move of validMoves) {\n        // 模拟执行移动\n        const numberAtMove = tempGrid[move.row][move.col];\n        tempGrid[move.row][move.col] = 0;\n        tempGrid[tempEmptyPos.row][tempEmptyPos.col] = numberAtMove;\n        \n        // 检查数字是否到达目标位置\n        const newPos = this.findNumberPositionInGrid(number, tempGrid);\n        if (newPos && newPos.row === targetRow && newPos.col === targetCol) {\n          return true;\n        }\n        \n        // 递归检查下一步\n        if (steps > 1) {\n          // 更新空位位置继续检查\n          const newEmptyPos = { ...move };\n          const canReach = this.canReachTargetInStepsWithGrid(\n            number, targetRow, targetCol, steps - 1, \n            tempGrid, newEmptyPos\n          );\n          if (canReach) {\n            return true;\n          }\n        }\n        \n        // 恢复网格状态\n        tempGrid[move.row][move.col] = numberAtMove;\n        tempGrid[tempEmptyPos.row][tempEmptyPos.col] = 0;\n      }\n      \n      return false;\n    },\n\n    /**\n     * 在指定网格中查找数字位置\n     */\n    findNumberPositionInGrid(number, grid) {\n      for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n          if (grid[i][j] === number) {\n            return { row: i, col: j };\n          }\n        }\n      }\n      return null;\n    },\n\n    /**\n     * 使用指定网格进行两步前瞻分析\n     */\n    canReachTargetInStepsWithGrid(number, targetRow, targetCol, steps, grid, emptyPos) {\n      if (steps <= 0) return false;\n      \n      // 获取当前数字位置\n      const currentPos = this.findNumberPositionInGrid(number, grid);\n      if (!currentPos) return false;\n      \n      if (currentPos.row === targetRow && currentPos.col === targetCol) {\n        return true;\n      }\n      \n      // 获取有效移动\n      const validMoves = [];\n      const directions = [\n        { row: emptyPos.row - 1, col: emptyPos.col },\n        { row: emptyPos.row + 1, col: emptyPos.col },\n        { row: emptyPos.row, col: emptyPos.col - 1 },\n        { row: emptyPos.row, col: emptyPos.col + 1 }\n      ];\n      \n      for (const dir of directions) {\n        if (dir.row >= 0 && dir.row < 4 && dir.col >= 0 && dir.col < 4) {\n          validMoves.push(dir);\n        }\n      }\n      \n      // 尝试所有可能的移动\n      for (const move of validMoves) {\n        // 模拟执行移动\n        const numberAtMove = grid[move.row][move.col];\n        const tempGrid = grid.map(row => [...row]);\n        const tempEmptyPos = { ...emptyPos };\n        \n        tempGrid[move.row][move.col] = 0;\n        tempGrid[tempEmptyPos.row][tempEmptyPos.col] = numberAtMove;\n        \n        // 检查数字是否到达目标位置\n        const newPos = this.findNumberPositionInGrid(number, tempGrid);\n        if (newPos && newPos.row === targetRow && newPos.col === targetCol) {\n          return true;\n        }\n        \n        // 递归检查下一步\n        if (steps > 1) {\n          const newEmptyPos = { ...move };\n          const canReach = this.canReachTargetInStepsWithGrid(\n            number, targetRow, targetCol, steps - 1, \n            tempGrid, newEmptyPos\n          );\n          if (canReach) {\n            return true;\n          }\n        }\n      }\n      \n      return false;\n    },\n\n    /**\n     * 检查候选移动是否通过两步前瞻分析\n     */\n    checkTwoStepLookahead(move) {\n      // 模拟执行移动\n      const tempGrid = this.grid.map(row => [...row]);\n      const tempEmptyPos = { ...this.emptyPos };\n      \n      const numberAtMove = tempGrid[move.row][move.col];\n      tempGrid[move.row][move.col] = 0;\n      tempGrid[tempEmptyPos.row][tempEmptyPos.col] = numberAtMove;\n      const newEmptyPos = { ...move };\n      \n      // 检查第一步移动后，数字10或14是否到达目标位置\n      const targetPos10 = { row: 2, col: 1 }; // 数字10的目标位置：3行2列（索引从0开始）\n      const targetPos14 = { row: 3, col: 1}; // 数字14的目标位置：4行2列（索引从0开始）\n      \n      const pos10AfterMove = this.findNumberPositionInGrid(10, tempGrid);\n      const pos14AfterMove = this.findNumberPositionInGrid(14, tempGrid);\n      \n      // 检查两个数字是否都已经到达目标位置（完成状态）\n      const tenInTarget = pos10AfterMove && pos10AfterMove.row === targetPos10.row && pos10AfterMove.col === targetPos10.col;\n      const fourteenInTarget = pos14AfterMove && pos14AfterMove.row === targetPos14.row && pos14AfterMove.col === targetPos14.col;\n      \n      // 如果两个数字都已经到位，这个移动是可接受的（避免无限循环）\n      if (tenInTarget && fourteenInTarget) {\n        return true;\n      }\n      \n      let firstNumberMoved = null;\n      let firstTargetReached = false;\n      \n      // 检查数字10是否到达目标位置\n      if (tenInTarget) {\n        firstNumberMoved = 10;\n        firstTargetReached = true;\n      }\n      \n      // 检查数字14是否到达目标位置\n      if (fourteenInTarget && firstNumberMoved === null) {\n        firstNumberMoved = 14;\n        firstTargetReached = true;\n      }\n      \n      // 如果第一步没有让任何数字到达目标位置，返回false\n      if (!firstTargetReached) {\n        return false;\n      }\n      \n      // 检查第二步是否能让另一个数字也到达目标位置\n      const secondNumber = firstNumberMoved === 10 ? 14 : 10;\n      const secondTargetPos = secondNumber === 14 ? targetPos14 : targetPos10;\n      \n      // 检查第二步是否能让第二个数字到达目标位置\n      const canReachSecondTarget = this.canReachTargetInStepsWithGrid(\n        secondNumber, secondTargetPos.row, secondTargetPos.col, 1, \n        tempGrid, newEmptyPos\n      );\n      \n      return canReachSecondTarget;\n    },\n\n    /**\n     * 检查是否存在将数字14移动到数字10目标位置，或将数字10移动到数字14目标位置的移动\n     * 这是在两步前瞻分析失败时的加速策略\n     */\n    checkSpecialTargetMoves() {\n      const targetPos10 = { row: 2, col: 1 }; // 数字10的目标位置：3行2列（索引从0开始）\n      const targetPos14 = { row: 3, col: 1}; // 数字14的目标位置：4行2列（索引从0开始）\n      \n      // 获取当前数字10和14的位置\n      const currentPos10 = this.findNumberPosition(10);\n      const currentPos14 = this.findNumberPosition(14);\n      \n      if (!currentPos10 || !currentPos14) {\n        return null;\n      }\n      \n      // 获取所有有效移动\n      const allValidMoves = this.getValidMoves();\n      \n      // 检查是否存在将数字14移动到数字10目标位置的移动\n      const move14to10Target = allValidMoves.find(move => {\n        // 检查这个移动是否会把数字14移动到数字10的目标位置\n        if (currentPos14.row === move.row && currentPos14.col === move.col) {\n          // 这个移动会把数字14移动到空位，然后空位会移动到数字14的原始位置\n          // 我们需要检查这个移动是否会让数字14最终到达数字10的目标位置\n          const tempGrid = this.grid.map(row => [...row]);\n          const tempEmptyPos = { ...this.emptyPos };\n          \n          // 模拟移动\n          tempGrid[move.row][move.col] = 0;\n          tempGrid[tempEmptyPos.row][tempEmptyPos.col] = 14;\n          const newPos14 = this.findNumberPositionInGrid(14, tempGrid);\n\n          if (currentPos10.row === targetPos14.row && currentPos10.col === targetPos14.col) {\n            return newPos14 && newPos14.row === targetPos14.row && newPos14.col === targetPos14.col + 1;\n          }\n          \n          // 检查数字14的新位置是否是数字10的目标位置\n          return currentPos10.col === targetPos10.col + 2 && newPos14 && newPos14.row === targetPos10.row && newPos14.col === targetPos10.col;\n        }\n        return false;\n      });\n      \n      if (move14to10Target) {\n        return move14to10Target;\n      }\n      \n      // 检查是否存在将数字10移动到数字14目标位置的移动\n      const move10to14Target = allValidMoves.find(move => {\n        // 检查这个移动是否会把数字10移动到数字14的目标位置\n        if (currentPos10.row === move.row && currentPos10.col === move.col) {\n          // 模拟移动\n          const tempGrid = this.grid.map(row => [...row]);\n          const tempEmptyPos = { ...this.emptyPos };\n          \n          // 模拟移动\n          tempGrid[move.row][move.col] = 0;\n          tempGrid[tempEmptyPos.row][tempEmptyPos.col] = 10;\n          const newPos10 = this.findNumberPositionInGrid(10, tempGrid);\n\n          if (currentPos14.row === targetPos10.row && currentPos14.col === targetPos10.col) {\n            return newPos10 && newPos10.row === targetPos10.row && newPos10.col === targetPos10.col + 1;\n          }\n          \n          // 检查数字10的新位置是否是数字14的目标位置\n          return currentPos14.col === targetPos14.col + 2 && newPos10 && newPos10.row === targetPos14.row && newPos10.col === targetPos14.col;\n        }\n        return false;\n      });\n      \n      return move10to14Target;\n    },\n\n    /**\n     * 在最后6个格子区域内进行完全随机移动（带两步前瞻分析）\n     */\n    randomMoveInFinalSixCells() {\n      // 获取最后6个格子的有效移动\n      const finalCells = [\n        {row: 2, col: 1}, {row: 2, col: 2}, {row: 2, col: 3},\n        {row: 3, col: 1}, {row: 3, col: 2}, {row: 3, col: 3}\n      ];\n      \n      // 获取所有有效移动\n      const allValidMoves = this.getValidMoves();\n      \n      // 过滤出只影响最后6个格子的移动\n      const finalSixMoves = allValidMoves.filter(move => {\n        // 移动的目标位置必须在最后6个格子内\n        return finalCells.some(cell => cell.row === move.row && cell.col === move.col);\n      });\n      \n      // 首先检查是否存在通过两步前瞻分析的移动\n      let lookaheadMoves = [];\n      try {\n        lookaheadMoves = finalSixMoves.filter(move => this.checkTwoStepLookahead(move));\n      } catch (error) {\n        console.warn('两步前瞻分析出错，使用随机移动:', error);\n        lookaheadMoves = [];\n      }\n      \n      // 如果存在通过两步前瞻分析的移动，随机选择一个执行\n      if (lookaheadMoves.length === 1) {\n        this.clickCard(lookaheadMoves[0].row, lookaheadMoves[0].col);\n        return;\n      } else if (lookaheadMoves.length > 1) {\n        // 最后四格快速胜利检测\n        const directCorrectMove = this.findDirectCorrectMove(finalSixMoves);\n\n        if (directCorrectMove) {\n          this.clickCard(directCorrectMove.row, directCorrectMove.col);\n          return;\n        }\n      }\n      \n      // 如果不存在通过两步前瞻分析的移动，检查是否存在特殊目标移动\n      if (finalSixMoves.length > 0) {\n        // 首先检查是否存在将数字14移动到数字10目标位置，或将数字10移动到数字14目标位置的移动\n        const specialTargetMove = this.checkSpecialTargetMoves();\n        \n        if (specialTargetMove) {\n          // 如果存在特殊目标移动，立即执行\n          this.clickCard(specialTargetMove.row, specialTargetMove.col);\n          return;\n        }\n        \n        // 如果不存在特殊目标移动，随机选择一个普通移动\n        const randomMove = finalSixMoves[Math.floor(Math.random() * finalSixMoves.length)];\n        this.clickCard(randomMove.row, randomMove.col);\n        return;\n      }\n      \n      // 最后的保底策略：随机选择一个有效移动\n      const randomMove = allValidMoves[Math.floor(Math.random() * allValidMoves.length)];\n      this.clickCard(randomMove.row, randomMove.col);\n    },\n\n    /**\n     * 单步执行 - 基于路径规划的智能算法\n     * 按照固定顺序将目标数字移动到指定目标位置\n     */\n    stepFn() {\n      // 找到当前需要处理的目标\n      const currentTarget = this.findCurrentTarget(TARGET_SEQUENCE);\n      if (!currentTarget) {\n        // 所有目标都已完成，检查是否在最后6个格子阶段\n        if (this.isFinalSixCells()) {\n          // 在最后6个格子内进行完全随机移动\n          this.randomMoveInFinalSixCells();\n        } else {\n          // 普通随机移动\n          const validMoves = this.getValidMoves();\n          if (validMoves.length > 0) {\n            const randomMove = validMoves[Math.floor(Math.random() * validMoves.length)];\n            this.clickCard(randomMove.row, randomMove.col);\n          }\n        }\n        return;\n      }\n\n      const [targetNumber, targetRow, targetCol] = currentTarget;\n\n      // 计算下一步移动\n      const nextMove = this.calculateNextMove(targetNumber, targetRow, targetCol);\n      if (nextMove) {\n        // 模拟执行移动\n        const tempGrid = this.grid.map(row => [...row]);\n        const tempEmptyPos = { ...this.emptyPos };\n        \n        const numberAtMove = tempGrid[nextMove.row][nextMove.col];\n        tempGrid[nextMove.row][nextMove.col] = 0;\n        tempGrid[tempEmptyPos.row][tempEmptyPos.col] = numberAtMove;\n        if (!this.gameManager.history.find(operation => operation.hash === JSON.stringify(tempGrid))) {\n          this.clickCard(nextMove.row, nextMove.col);\n          return;\n        }\n      }\n\n      this.makeSafeRandomMove();\n    },\n\n    /**\n     * 找到当前需要处理的目标\n     * 按照目标序列顺序检查，返回第一个未完成的目标\n     * 跳过所有小于连续完成序列的数字，避免破坏已完成的序列\n     */\n    findCurrentTarget(targetSequence) {\n      for (let i = 0; i < targetSequence.length; i++) {\n        const [targetNumber, targetRow, targetCol] = targetSequence[i];\n        \n        // 检查目标数字是否已在目标位置\n        if (this.grid[targetRow][targetCol] !== targetNumber) {\n          // 检查目标数字当前位置\n          const currentPos = this.findNumberPosition(targetNumber);\n          if (currentPos) {\n            // 检查是否有后续相同数字的目标位置\n            let hasLaterTargetAndIntermediateCompleted = false;\n            const laterTargets = targetSequence.slice(i + 1).filter(target => target[0] === targetNumber);\n            for (const laterTarget of laterTargets) {\n              const [laterNumber, laterRow, laterCol] = laterTarget;\n              \n              // 如果数字在后续目标位置，检查中间是否有未完成的目标\n              if (currentPos.row === laterRow && currentPos.col === laterCol) {\n                // 检查从当前位置到后续目标位置之间的目标是否都已完成\n                let intermediateCompleted = true;\n                for (let j = targetSequence.findIndex(t => t[0] === laterNumber && t[1] === laterRow && t[2] === laterCol); j > i; j--) {\n                  const [interNumber, interRow, interCol] = targetSequence[j];\n                  if (interNumber === targetNumber) continue;\n                  const interIndex = interNumber - 1;\n                  const targetIndex = targetNumber - 1;\n                  const targetIndexInGrid = this.grid[Math.floor(targetIndex / 4)][targetIndex % 4]\n                  const interIndexInGrid = this.grid[Math.floor(interIndex / 4)][interIndex % 4]\n                  const interNumberInGrid = this.grid[interRow][interCol]\n                  if (targetIndexInGrid === targetNumber && interIndexInGrid === interNumber || interNumberInGrid === interNumber){//} || interNumberInGrid === 0 && (targetIndexInGrid === 0)) {\n                    break;\n                  }\n                  intermediateCompleted = false;\n                  break;\n                }\n                if (intermediateCompleted) {\n                  hasLaterTargetAndIntermediateCompleted = true;\n                  break;\n                }\n              }\n            }\n            if (hasLaterTargetAndIntermediateCompleted) {\n              continue;\n            }\n          }\n          return [targetNumber, targetRow, targetCol];\n        }\n      }\n      return null;\n    },\n\n    /**\n     * 找到数字的当前位置\n     */\n    findNumberPosition(number) {\n      for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n          if (this.grid[i][j] === number) {\n            return { row: i, col: j };\n          }\n        }\n      }\n      return null;\n    },\n\n    /**\n     * 计算能将目标数字移动到目标位置的下一步移动\n     * 使用路径规划算法避免干扰已完成的数字，同时避开正在计算的目标数字\n     */\n    calculateNextMove(targetNumber, targetRow, targetCol) {\n      const numberPos = this.findNumberPosition(targetNumber);\n      if (!numberPos) return null;\n\n      // 如果数字已在目标位置，返回null\n      if (numberPos.row === targetRow && numberPos.col === targetCol) {\n        return null;\n      }\n\n      // 计算数字到目标的最短路径，避开目标数字本身\n      const numberPath = this.findShortestPath(numberPos, { row: targetRow, col: targetCol }, targetNumber);\n      if (!numberPath || numberPath.length === 0) return null;\n\n      // 获取路径的下一步\n      const nextNumberPos = numberPath[0];\n\n      // 计算空位需要移动到的位置（数字路径的下一步）\n      const requiredEmptyPos = nextNumberPos;\n\n      // 如果空位已经在所需位置，直接移动数字\n      if (this.emptyPos.row === requiredEmptyPos.row && this.emptyPos.col === requiredEmptyPos.col) {\n        return numberPos;\n      }\n\n      // 计算空位到所需位置的路径，同样避开目标数字\n      const emptyPath = this.findShortestPath(this.emptyPos, requiredEmptyPos, targetNumber);\n      if (!emptyPath || emptyPath.length === 0) return null;\n\n      // 返回空位移动的下一步\n      return emptyPath[0];\n    },\n\n    /**\n     * 使用BFS算法找到最短路径\n     * 避免经过已完成的数字位置，同时避开指定的目标数字\n     */\n    findShortestPath(start, end, excludeNumber = null) {\n      if (start.row === end.row && start.col === end.col) {\n        return [];\n      }\n\n      const queue = [{ pos: start, path: [] }];\n      const visited = new Set();\n      visited.add(`${start.row},${start.col}`);\n\n      while (queue.length > 0) {\n        const { pos, path } = queue.shift();\n\n        // 获取相邻位置\n        const neighbors = [\n          { row: pos.row - 1, col: pos.col }, // 上\n          { row: pos.row + 1, col: pos.col }, // 下\n          { row: pos.row, col: pos.col - 1 }, // 左\n          { row: pos.row, col: pos.col + 1 }  // 右\n        ];\n\n        for (const neighbor of neighbors) {\n          // 检查边界\n          if (neighbor.row < 0 || neighbor.row >= 4 || neighbor.col < 0 || neighbor.col >= 4) {\n            continue;\n          }\n\n          const neighborKey = `${neighbor.row},${neighbor.col}`;\n          if (visited.has(neighborKey)) {\n            continue;\n          }\n\n          // 检查是否是目标位置\n          if (neighbor.row === end.row && neighbor.col === end.col) {\n            return [...path, neighbor];\n          }\n\n          // 检查该位置是否包含已完成的数字\n          const numberAtPos = this.grid[neighbor.row][neighbor.col];\n          if (numberAtPos !== 0 && this.isNumberCompleted(numberAtPos, neighbor.row, neighbor.col)) {\n            continue; // 避免经过已完成的数字\n          }\n\n          // 检查是否是需要避开的目标数字（防止无限循环）\n          if (excludeNumber !== null && numberAtPos === excludeNumber) {\n            continue; // 避免经过正在移动的目标数字\n          }\n\n          visited.add(neighborKey);\n          queue.push({ pos: neighbor, path: [...path, neighbor] });\n        }\n      }\n\n      return null; // 没有找到路径\n    },\n\n    /**\n     * 在不破坏连续已完成数字序列的前提下进行随机移动\n     * 找出从数字1开始的最长连续已完成数字序列，确保随机移动不会破坏这些数字\n     */\n    makeSafeRandomMove() {\n      // 找出从数字1开始的最长连续已完成数字序列\n      const continuousCompleted = this.getContinuousCompletedNumbers();\n\n      // 获取所有有效移动\n      const allValidMoves = this.getValidMoves();\n      \n      // 过滤出不会破坏已完成数字序列的移动\n      const safeMoves = allValidMoves.filter(move => {\n        const numberAtMove = this.grid[move.row][move.col];\n        // 如果移动的位置是空位或者是未完成的数字，则是安全的\n        return numberAtMove >= continuousCompleted;\n      });\n      \n      // 优先选择安全的移动\n      if (safeMoves.length > 0) {\n        const randomSafeMove = safeMoves[Math.floor(Math.random() * safeMoves.length)];\n        this.clickCard(randomSafeMove.row, randomSafeMove.col);\n        return;\n      }\n\n      // 如果没有安全的移动（理论上不应该发生），选择任意移动\n      if (allValidMoves.length > 0) {\n        const randomMove = allValidMoves[Math.floor(Math.random() * allValidMoves.length)];\n        this.clickCard(randomMove.row, randomMove.col);\n      }\n    },\n    \n    /**\n     * 找出从数字1开始的最长连续已完成数字序列\n     * 例如：如果数字1、2已完成，数字3未完成，则返回[1, 2]\n     */\n    getContinuousCompletedNumbers() {\n      let currentNumber = 1;\n      \n      // 按顺序检查每个数字是否已完成\n      while (currentNumber <= 15) {\n        const targetIndex = currentNumber - 1;\n        if (this.grid[Math.floor(targetIndex / 4)][targetIndex % 4] === currentNumber) {\n          currentNumber++;\n        } else {\n          break;\n        }\n      }\n      \n      return currentNumber;\n    },\n\n    /**\n     * 检查数字是否已完成（在正确的目标位置）\n     * 同时检查当前数字之前所有数字是否都已完成目标\n     */\n    isNumberCompleted(number, row, col) {\n      // 找到当前数字在目标序列中的索引\n      const currentIndex = TARGET_SEQUENCE.findIndex(target => target[0] === number && target[1] === row && target[2] === col);\n      if (currentIndex === -1) return false;\n      \n      // 检查当前数字及之前所有数字是否都已完成\n      // 兼容Node.js v16，使用filter代替findLast\n      const prevTargetSquence = TARGET_SEQUENCE.filter((target, index) => {\n        if (index > currentIndex) return false;\n        \n        // 查找是否有后续相同数字的目标位置\n        let hasLaterTarget = false;\n        for (let i = currentIndex; i >= index + 1; i--) {\n          const t = TARGET_SEQUENCE[i];\n          if (t[0] === target[0]) {\n            hasLaterTarget = true;\n            break;\n          }\n        }\n        \n        return !hasLaterTarget;\n      });\n      \n      for (let i = 0; i < prevTargetSquence.length; i++) {\n        const [targetNumber, targetRow, targetCol] = prevTargetSquence[i];\n        \n        // 检查目标数字是否在正确的目标位置\n        if (this.grid[targetRow][targetCol] !== targetNumber) {\n          return false;\n        }\n      }\n      \n      return true;\n    },\n    \n    /**\n     * 找到可以直接完成游戏的移动\n     */\n    findWinningMove(validMoves) {\n      for (const move of validMoves) {\n        if (this.willCompleteGame(move)) {\n          return move;\n        }\n      }\n      return null;\n    },\n    \n    /**\n     * 找到能直接将数字放到正确位置的移动\n     */\n    findDirectCorrectMove(validMoves) {\n      for (const move of validMoves) {\n        const number = this.grid[move.row][move.col];\n        const targetRow = Math.floor((number - 1) / 4);\n        const targetCol = (number - 1) % 4;\n        \n        // 如果这个移动能将数字放到正确位置\n        if (this.emptyPos.row === targetRow && this.emptyPos.col === targetCol) {\n          return move;\n        }\n      }\n      return null;\n    },\n    \n    /**\n     * 检查移动是否能完成游戏\n     */\n    willCompleteGame(move) {\n      const tempGrid = this.grid.map(row => [...row]);\n      const tempEmptyPos = { ...this.emptyPos };\n      \n      const number = tempGrid[move.row][move.col];\n      tempGrid[move.row][move.col] = 0;\n      tempGrid[tempEmptyPos.row][tempEmptyPos.col] = number;\n      \n      return this.isGridComplete(tempGrid);\n    },\n    \n    /**\n     * 检查网格是否完成\n     */\n    isGridComplete(grid) {\n      let expectedNumber = 1;\n      for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n          if (i === 3 && j === 3) {\n            return grid[i][j] === 0;\n          } else {\n            if (grid[i][j] !== expectedNumber) {\n              return false;\n            }\n            expectedNumber++;\n          }\n        }\n      }\n      return true;\n    },\n    \n    /**\n     * 检查游戏是否完成\n     */\n    done() {\n      let expectedNumber = 1;\n      for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n          if (i === 3 && j === 3) {\n            // 最后一个位置应该是空位\n            return this.grid[i][j] === 0;\n          } else {\n            if (this.grid[i][j] !== expectedNumber) {\n              return false;\n            }\n            expectedNumber++;\n          }\n        }\n      }\n      return true;\n    },\n    \n    /**\n     * 处理撤销操作\n     */\n    handleUndo(operation) {\n      if (operation && operation.type === \"move\") {\n        // 撤销移动：将数字移回原位置\n        const { from, to, number } = operation;\n        this.grid[to.row][to.col] = 0;\n        this.grid[from.row][from.col] = number;\n        this.emptyPos = { ...to };\n        this.moves--;\n      }\n    },\n    \n    /**\n     * 撤销上一步\n     */\n    undo() {\n      this.gameManager.undo();\n    },\n    \n    /**\n     * 记录移动操作\n     */\n    recordMove(operation) {\n      this.gameManager.recordOperation(operation);\n    },\n    \n    /**\n     * 渲染文本视图\n     */\n    renderTextView() {\n      console.log('\\n╔════════════════════════════════════════════════╗');\n      console.log('║              数字拼图游戏                    ║');\n      console.log('╚════════════════════════════════════════════════╝');\n      console.log(`\\n步数: ${this.step} | 移动次数: ${this.moves}\\n`);\n      \n      // 显示网格\n      console.log('┌────┬────┬────┬────┐');\n      for (let i = 0; i < 4; i++) {\n        let rowStr = '│';\n        for (let j = 0; j < 4; j++) {\n          const value = this.grid[i][j];\n          rowStr += value === 0 ? '    │' : value.toString().padStart(4, ' ') + '│';\n        }\n        console.log(rowStr);\n        if (i < 3) {\n          console.log('├────┼────┼────┼────┤');\n        }\n      }\n      console.log('└────┴────┴────┴────┘');\n      \n      if (this.done()) {\n        console.log('\\n🎉 恭喜！拼图完成！');\n      }\n      \n      return '渲染完成';\n    },\n    \n    sendCustomButtons() {\n      // 添加Spider游戏特有的发牌按钮（如果牌堆有牌）\n      this.customButtons.push({\n        action: 'clickCard',\n        label: 'MOVE',\n        method: 'clickCard',\n        args: [],\n        description: 'MOVE TO ONE DIRECTION'\n      });\n    },\n  },\n  created() {\n    this.sendCustomButtons();\n  }\n};\n\n// 使用工厂函数创建增强的数字拼图组件并导出\nexport default GameComponentPresets.puzzleGame(NumberPuzzle, 300);","import { render } from \"./NumberPuzzle.vue?vue&type=template&id=4cf5149e&scoped=true\"\nimport script from \"./NumberPuzzle.vue?vue&type=script&lang=js\"\nexport * from \"./NumberPuzzle.vue?vue&type=script&lang=js\"\n\nimport \"./NumberPuzzle.vue?vue&type=style&index=0&id=4cf5149e&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-4cf5149e\"]])\n\nexport default __exports__","<template>\n  <GameLayout\n    v-bind=\"gameLayoutProps\"\n    :win-title=\"'🎉 恭喜！'\"\n    :win-subtitle=\"`你成功清空了所有数字！最终得分：${score}`\"\n    :lose-title=\"'😔 游戏结束'\"\n    :lose-subtitle=\"`没有可用的序列了！最终得分：${score}`\"\n    @undo=\"undo\"\n    @goon=\"goon\"\n    @step=\"stepFn\"\n    @auto=\"pass\"\n  >\n    <template #game-content>\n      <div class=\"row center\">\n        <div class=\"game-container\">\n          <!-- 分数显示 -->\n          <div class=\"score-display\">\n            <span class=\"scrore\">得分: {{ score }}</span>\n          </div>\n          \n          <!-- 游戏网格 -->\n          <div class=\"grid-container\">\n            <div\n              v-for=\"(row, rowIndex) in grid\"\n              :key=\"rowIndex\"\n              class=\"grid-row\"\n            >\n              <div\n                v-for=\"(cell, colIndex) in row\"\n                :key=\"colIndex\"\n                class=\"grid-cell\"\n                :class=\"{\n                  'cell-empty': cell === null,\n                  'cell-selectable': cell !== null && canOperate,\n                  'cell-selected': isCellSelected(rowIndex, colIndex),\n                  'cell-selectable-next': isCellSelectableNext(rowIndex, colIndex)\n                }\"\n                @click=\"cell !== null && canOperate && handleCellClick(rowIndex, colIndex)\"\n              >\n                <span v-if=\"cell !== null\" class=\"cell-number\">{{ cell }}</span>\n              </div>\n            </div>\n          </div>\n          \n          <!-- 游戏状态提示 -->\n          <div class=\"game-status\">\n            <p v-if=\"!gameManager.winflag && !gameManager.loseflag\" class=\"status-text\">\n              选择相邻的递增数字序列（长度≥{{ minSequenceLength }}）\n            </p>\n            <p v-else-if=\"gameManager.winflag\" class=\"status-text win-text\">\n              🎉 恭喜！你清空了所有数字！\n            </p>\n            <p v-else-if=\"gameManager.loseflag\" class=\"status-text lose-text\">\n              😔 没有可用的序列了！\n            </p>\n          </div>\n          \n          <!-- 当前选中的序列显示 -->\n          <div v-if=\"selectedCells.length > 0\" class=\"selected-sequence\">\n            <h3>当前选中序列:</h3>\n            <div class=\"sequence-display\">\n              <span\n                v-for=\"(cell, index) in selectedCells\"\n                :key=\"index\"\n                class=\"sequence-cell\"\n              >\n                {{ cell.value }}\n              </span>\n            </div>\n            <div class=\"sequence-controls\">\n              <button\n                class=\"btn-confirm\"\n                @click=\"confirmSequence\"\n                :disabled=\"!isValidSequence(selectedCells)\"\n              >\n                确认选择\n              </button>\n              <button\n                class=\"btn-clear\"\n                @click=\"clearSelection\"\n              >\n                清除选择\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </template>\n  </GameLayout>\n</template>\n\n<script>\nimport NumberSequenceComponent from \"./NumberSequence.js\";\n\nconst component = NumberSequenceComponent;\n\nexport default component;\n</script>\n\n<style scoped>\n@import url(\"./sum.css\");\n\n.game-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 1.25rem;\n  max-width: 31.25rem;\n  margin: 0 auto;\n}\n\n.score-display {\n  margin-bottom: 1.25rem;\n  text-align: center;\n}\n\n.grid-container {\n  display: flex;\n  flex-direction: column;\n  background-color: #719192;\n  padding: 0.625rem;\n  border-radius: 0.3125rem;\n  margin-bottom: 1.25rem;\n}\n\n.grid-row {\n  display: flex;\n  justify-content: center;\n}\n\n.grid-cell {\n  width: 3.125rem;\n  height: 3.125rem;\n  border: 0.0625rem solid #dfcdc3;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #5FB878;\n  margin: 0.125rem;\n  border-radius: 0.1875rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.grid-cell.cell-empty {\n  background-color: transparent;\n  border: 0.0625rem dashed #719192;\n  cursor: default;\n}\n\n.grid-cell.cell-selectable:hover {\n  background-color: #FFB800;\n  transform: scale(1.05);\n}\n\n.grid-cell.cell-selected {\n  background-color: #FFB800;\n  box-shadow: 0 0 0.625rem rgba(255, 184, 0, 0.8);\n  transform: scale(1.05);\n}\n\n.grid-cell.cell-selectable-next {\n  background-color: #01AAED;\n  animation: pulse 1s infinite;\n}\n\n@keyframes pulse {\n  0% {\n    transform: scale(1);\n    box-shadow: 0 0 0.3125rem rgba(1, 170, 237, 0.6);\n  }\n  50% {\n    transform: scale(1.08);\n    box-shadow: 0 0 0.9375rem rgba(1, 170, 237, 0.8);\n  }\n  100% {\n    transform: scale(1);\n    box-shadow: 0 0 0.3125rem rgba(1, 170, 237, 0.6);\n  }\n}\n\n.cell-number {\n  font-size: 1.25rem;\n  font-weight: bold;\n  color: #fff;\n}\n\n.game-status {\n  text-align: center;\n  margin-bottom: 1.25rem;\n}\n\n.status-text {\n  font-size: 1rem;\n  color: #dfcdc3;\n  margin: 0;\n}\n\n.status-text.win-text {\n  color: #5FB878;\n  font-weight: bold;\n}\n\n.status-text.lose-text {\n  color: #FF5722;\n  font-weight: bold;\n}\n\n.selected-sequence {\n  background-color: #3c4245;\n  padding: 1.25rem;\n  border-radius: 0.3125rem;\n  margin-top: 1.25rem;\n  text-align: center;\n}\n\n.selected-sequence h3 {\n  color: #dfcdc3;\n  margin-bottom: 0.625rem;\n  font-size: 1.125rem;\n}\n\n.sequence-display {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 0.9375rem;\n  flex-wrap: wrap;\n}\n\n.sequence-cell {\n  display: inline-block;\n  width: 2.5rem;\n  height: 2.5rem;\n  background-color: #FFB800;\n  color: #fff;\n  font-weight: bold;\n  font-size: 1.125rem;\n  line-height: 2.5rem;\n  text-align: center;\n  margin: 0.1875rem;\n  border-radius: 0.1875rem;\n}\n\n.sequence-controls {\n  display: flex;\n  justify-content: center;\n  gap: 0.625rem;\n}\n\n.btn-confirm,\n.btn-clear {\n  padding: 0.5rem 1.25rem;\n  border: none;\n  border-radius: 0.1875rem;\n  font-size: 1rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.btn-confirm {\n  background-color: #5FB878;\n  color: #fff;\n}\n\n.btn-confirm:hover:not(:disabled) {\n  background-color: #01AAED;\n}\n\n.btn-confirm:disabled {\n  background-color: #719192;\n  cursor: not-allowed;\n  opacity: 0.6;\n}\n\n.btn-clear {\n  background-color: #FF5722;\n  color: #fff;\n}\n\n.btn-clear:hover {\n  background-color: #FF7043;\n}\n\n/* 响应式设计 */\n@media (max-width: 480px) {\n  .grid-cell {\n    width: 2.5rem;\n    height: 2.5rem;\n  }\n  \n  .cell-number {\n    font-size: 1rem;\n  }\n  \n  .sequence-cell {\n    width: 2rem;\n    height: 2rem;\n    line-height: 2rem;\n    font-size: 1rem;\n  }\n}\n</style>","import { GameComponentPresets } from '../utils/gameComponentFactory.js';\n\nexport default GameComponentPresets.puzzleGame({\n  name: 'NumberSequence',\n  \n  data() {\n    return {\n      grid: [],\n      selectedCells: [],\n      score: 0,\n      gridSize: 5,\n      minSequenceLength: 3\n    };\n  },\n\n  computed: {\n    isGameComplete() {\n      return this.grid && this.grid.length > 0 && this.grid.every(row => row.every(cell => cell === null));\n    },\n    \n    hasValidMoves() {\n      return this.findAllValidSequences().length > 0;\n    }\n  },\n\n  methods: {\n    init() {\n      this.grid = this.generateGrid();\n      this.selectedCells = [];\n      this.score = 0;\n    },\n\n    handleCellClick(row, col) {\n      if (this.grid[row][col] === null) return;\n      \n      const cellData = { row, col, value: this.grid[row][col] };\n      \n      // 如果点击的是已选中的第一个单元格，清除选择\n      if (this.selectedCells.length > 0 && \n          this.selectedCells[0].row === row && \n          this.selectedCells[0].col === col) {\n        this.clearSelection();\n        return;\n      }\n      \n      // 如果当前没有选择，开始新选择\n      if (this.selectedCells.length === 0) {\n        this.selectedCells = [cellData];\n        return;\n      }\n      \n      // 检查是否可以添加到当前序列\n      const lastCell = this.selectedCells[this.selectedCells.length - 1];\n      const distance = Math.abs(row - lastCell.row) + Math.abs(col - lastCell.col);\n      \n      // 必须相邻且值更大\n      if (distance === 1 && this.grid[row][col] > lastCell.value) {\n        // 检查是否已经包含这个单元格\n        const alreadySelected = this.selectedCells.some(cell => \n          cell.row === row && cell.col === col\n        );\n        \n        if (!alreadySelected) {\n          this.selectedCells.push(cellData);\n        }\n      } else {\n        // 不能添加，开始新选择\n        this.selectedCells = [cellData];\n      }\n    },\n\n    confirmSequence() {\n      if (this.isValidSequence(this.selectedCells)) {\n        this.selectSequence(this.selectedCells);\n        this.clearSelection();\n      }\n    },\n\n    clearSelection() {\n      this.selectedCells = [];\n    },\n\n    isCellSelected(row, col) {\n      return this.selectedCells.some(cell => cell.row === row && cell.col === col);\n    },\n\n    isCellSelectableNext(row, col) {\n      if (this.selectedCells.length === 0) return false;\n      if (this.grid[row][col] === null) return false;\n      \n      const lastCell = this.selectedCells[this.selectedCells.length - 1];\n      const distance = Math.abs(row - lastCell.row) + Math.abs(col - lastCell.col);\n      \n      // 必须相邻、值更大且未被选中\n      return distance === 1 && \n             this.grid[row][col] > lastCell.value &&\n             !this.isCellSelected(row, col);\n    },\n\n    generateGrid() {\n      const grid = [];\n      for (let i = 0; i < this.gridSize; i++) {\n        const row = [];\n        for (let j = 0; j < this.gridSize; j++) {\n          row.push(Math.floor(Math.random() * 9) + 1);\n        }\n        grid.push(row);\n      }\n      return grid;\n    },\n\n    copyGrid(grid) {\n      return grid.map(row => [...row]);\n    },\n\n    stepFn() {\n      if (this.isGameComplete) {\n        this.gameManager.setWin();\n        return;\n      }\n\n      const validSequences = this.findAllValidSequences();\n      if (validSequences.length === 0) {\n        this.gameManager.setLose();\n        return;\n      }\n\n      // AI选择最长的序列\n      const bestSequence = validSequences.reduce((best, current) => \n        current.length > best.length ? current : best\n      );\n      \n      this.selectSequence(bestSequence);\n    },\n\n    findAllValidSequences() {\n      const sequences = [];\n      const visited = Array(this.gridSize).fill().map(() => Array(this.gridSize).fill(false));\n      \n      for (let i = 0; i < this.gridSize; i++) {\n        for (let j = 0; j < this.gridSize; j++) {\n          if (this.grid[i][j] !== null) {\n            const sequence = this.findSequenceFrom(i, j, visited);\n            if (sequence.length >= this.minSequenceLength) {\n              sequences.push(sequence);\n            }\n          }\n        }\n      }\n      \n      return sequences;\n    },\n\n    findSequenceFrom(startRow, startCol, visited) {\n      const sequences = [];\n      const currentSequence = [{row: startRow, col: startCol, value: this.grid[startRow][startCol]}];\n      \n      this.dfsFindSequence(startRow, startCol, currentSequence, visited, sequences);\n      \n      return sequences.length > 0 ? sequences[0] : [];\n    },\n\n    dfsFindSequence(row, col, currentSequence, visited, allSequences) {\n      if (currentSequence.length >= this.minSequenceLength) {\n        allSequences.push([...currentSequence]);\n        return;\n      }\n\n      const directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n      const lastValue = currentSequence[currentSequence.length - 1].value;\n\n      for (const [dr, dc] of directions) {\n        const newRow = row + dr;\n        const newCol = col + dc;\n        \n        if (this.isValidCell(newRow, newCol) && \n            !visited[newRow][newCol] && \n            this.grid[newRow][newCol] !== null &&\n            this.grid[newRow][newCol] > lastValue) {\n          \n          visited[newRow][newCol] = true;\n          currentSequence.push({\n            row: newRow, \n            col: newCol, \n            value: this.grid[newRow][newCol]\n          });\n          \n          this.dfsFindSequence(newRow, newCol, currentSequence, visited, allSequences);\n          \n          currentSequence.pop();\n          visited[newRow][newCol] = false;\n        }\n      }\n    },\n\n    isValidCell(row, col) {\n      return row >= 0 && row < this.gridSize && col >= 0 && col < this.gridSize;\n    },\n\n    selectSequence(sequence) {\n      if (!this.isValidSequence(sequence)) {\n        return false;\n      }\n\n      // 记录操作前的状态（在消除和重力应用之前）\n      const beforeGrid = this.copyGrid(this.grid);\n      const beforeScore = this.score;\n      \n      // 清除选中的序列\n      for (const cell of sequence) {\n        this.grid[cell.row][cell.col] = null;\n      }\n      \n      // 下落效果\n      this.applyGravity();\n      \n      // 更新分数\n      this.score += sequence.length * 10;\n      \n      // 记录操作（包含操作前的完整状态）\n      this.gameManager.recordOperation({\n        type: 'selectSequence',\n        data: {\n          sequence: sequence.map(cell => ({row: cell.row, col: cell.col, value: cell.value})),\n          beforeScore: beforeScore,\n          afterScore: this.score,\n          beforeGrid: beforeGrid,\n          afterGrid: this.copyGrid(this.grid)\n        }\n      });\n\n      // 检查游戏状态\n      this.checkGameState();\n      \n      return true;\n    },\n\n    isValidSequence(sequence) {\n      if (sequence.length < this.minSequenceLength) {\n        return false;\n      }\n\n      // 检查是否严格递增\n      for (let i = 1; i < sequence.length; i++) {\n        if (sequence[i].value <= sequence[i-1].value) {\n          return false;\n        }\n      }\n\n      // 检查是否相邻\n      for (let i = 1; i < sequence.length; i++) {\n        const prev = sequence[i-1];\n        const curr = sequence[i];\n        const distance = Math.abs(curr.row - prev.row) + Math.abs(curr.col - prev.col);\n        if (distance !== 1) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n\n    applyGravity() {\n      for (let col = 0; col < this.gridSize; col++) {\n        // 从底部开始，将非空单元格下移\n        let writePos = this.gridSize - 1;\n        for (let row = this.gridSize - 1; row >= 0; row--) {\n          if (this.grid[row][col] !== null) {\n            if (row !== writePos) {\n              this.grid[writePos][col] = this.grid[row][col];\n              this.grid[row][col] = null;\n            }\n            writePos--;\n          }\n        }\n      }\n    },\n\n    checkGameState() {\n      if (this.isGameComplete) {\n        this.gameManager.setWin();\n      } else if (!this.hasValidMoves) {\n        this.gameManager.setLose();\n      }\n    },\n\n    handleUndo(operation) {\n      if (operation.type === 'selectSequence') {\n        // 恢复操作前的网格状态（包含数字的原始位置）\n        this.grid = this.copyGrid(operation.data.beforeGrid);\n        this.score = operation.data.beforeScore;\n        this.selectedCells = [];\n      }\n    },\n\n    renderTextView() {\n      let output = `数字接龙 - 分数: ${this.score}\\n`;\n      output += '═'.repeat(this.gridSize * 4 + 1) + '\\n';\n      \n      for (let i = 0; i < this.gridSize; i++) {\n        output += '║';\n        for (let j = 0; j < this.gridSize; j++) {\n          const cell = this.grid[i][j];\n          if (cell === null) {\n            output += '   ║';\n          } else {\n            output += ` ${cell} ║`;\n          }\n        }\n        output += '\\n';\n        if (i < this.gridSize - 1) {\n          output += '╠' + '═══╬'.repeat(this.gridSize - 1) + '═══╣\\n';\n        }\n      }\n      \n      output += '═'.repeat(this.gridSize * 4 + 1) + '\\n';\n      \n      if (this.gameManager.winflag) {\n        output += '🎉 恭喜！你清空了所有数字！\\n';\n      } else if (this.gameManager.loseflag) {\n        output += '😔 没有可用的序列了！\\n';\n      } else {\n        output += `提示: 选择相邻的递增数字序列（长度≥${this.minSequenceLength}）\\n`;\n      }\n      \n      // 输出到控制台\n      console.log(output);\n      \n      return output;\n    },\n  }\n});","import { render } from \"./NumberSequence.vue?vue&type=template&id=7084b4dc&scoped=true\"\nimport script from \"./NumberSequence.vue?vue&type=script&lang=js\"\nexport * from \"./NumberSequence.vue?vue&type=script&lang=js\"\n\nimport \"./NumberSequence.vue?vue&type=style&index=0&id=7084b4dc&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-7084b4dc\"]])\n\nexport default __exports__","<template>\n  <GameLayout\n    :title=\"title\"\n    v-bind=\"gameLayoutProps\"\n    @undo=\"undo\"\n    @goon=\"goon\"\n    @step=\"stepFn\"\n    @auto=\"pass\"\n  >\n    <template #game-content>\n      <div class=\"junqi-container\">\n        <!-- 游戏状态显示 -->\n        <div class=\"game-status\">\n          <div class=\"current-player\">\n            当前玩家: <span :class=\"currentPlayer === 1 ? 'player1' : 'player2'\">{{ currentPlayerName }}</span>\n          </div>\n          <div class=\"game-phase\">\n            游戏阶段: {{ gamePhase === 'setup' ? '布阵' : '对战' }}\n          </div>\n        </div>\n\n        <!-- 棋子选择面板（布阵阶段） -->\n        <div v-if=\"gamePhase === 'setup'\" class=\"piece-selection\">\n          <h3>选择棋子放置</h3>\n          <div class=\"available-pieces\">\n            <div v-for=\"piece in availablePieces\" :key=\"piece.type\" class=\"piece-option\">\n              <span class=\"piece-name\">{{ pieceNames[piece.type] }}</span>\n              <span class=\"piece-count\">剩余: {{ piece.count }}</span>\n            </div>\n          </div>\n        </div>\n\n        <!-- 军棋棋盘 -->\n        <div class=\"board-container\">\n          <svg \n            class=\"junqi-board\" \n            :width=\"cols * 60 + 40\" \n            :height=\"rows * 60 + 40\"\n            viewBox=\"0 0 400 760\"\n          >\n            <!-- 定义样式 -->\n            <defs>\n              <!-- 普通格子渐变 -->\n              <linearGradient id=\"normalCell\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                <stop offset=\"0%\" style=\"stop-color:#f0f0f0;stop-opacity:1\" />\n                <stop offset=\"100%\" style=\"stop-color:#e0e0e0;stop-opacity:1\" />\n              </linearGradient>\n              \n              <!-- 行营格子渐变 -->\n              <linearGradient id=\"campCell\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                <stop offset=\"0%\" style=\"stop-color:#fff3cd;stop-opacity:1\" />\n                <stop offset=\"100%\" style=\"stop-color:#ffeaa7;stop-opacity:1\" />\n              </linearGradient>\n              \n              <!-- 大本营格子渐变 -->\n              <linearGradient id=\"baseCell\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                <stop offset=\"0%\" style=\"stop-color:#f8d7da;stop-opacity:1\" />\n                <stop offset=\"100%\" style=\"stop-color:#dc3545;stop-opacity:1\" />\n              </linearGradient>\n              \n              <!-- 铁路线格子渐变 -->\n              <linearGradient id=\"railwayCell\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                <stop offset=\"0%\" style=\"stop-color:#d1ecf1;stop-opacity:1\" />\n                <stop offset=\"100%\" style=\"stop-color:#bee5eb;stop-opacity:1\" />\n              </linearGradient>\n              \n              <!-- 选中效果 -->\n              <filter id=\"selectedGlow\">\n                <feGaussianBlur stdDeviation=\"3\" result=\"coloredBlur\"/>\n                <feMerge> \n                  <feMergeNode in=\"coloredBlur\"/>\n                  <feMergeNode in=\"SourceGraphic\"/>\n                </feMerge>\n              </filter>\n            </defs>\n\n            <!-- 绘制棋盘背景 -->\n            <rect x=\"0\" y=\"0\" width=\"400\" height=\"760\" fill=\"#8b4513\" stroke=\"#654321\" stroke-width=\"2\" rx=\"10\"/>\n            \n            <!-- 绘制棋盘格子 -->\n            <g v-for=\"row in Array.from({length: rows}, (_, i) => i)\" :key=\"row\" class=\"board-row\">\n              <g v-for=\"col in Array.from({length: cols}, (_, i) => i)\" :key=\"col\" class=\"board-cell\">\n                <!-- 计算格子位置 -->\n                <rect\n                  :x=\"col * 60 + 20\"\n                  :y=\"row * 60 + 20\"\n                  width=\"50\"\n                  height=\"50\"\n                  :fill=\"getCellFill(row, col)\"\n                  :stroke=\"getCellStroke(row, col)\"\n                  stroke-width=\"2\"\n                  rx=\"5\"\n                  :filter=\"isSelected(row, col) ? 'url(#selectedGlow)' : ''\"\n                  class=\"cell-rect\"\n                  @click=\"clickCell(row, col)\"\n                />\n                \n                <!-- 铁路线标识 -->\n                <g v-if=\"isRailwayCell(row, col)\">\n                  <line \n                    :x1=\"col * 60 + 25\" \n                    :y1=\"row * 60 + 25\" \n                    :x2=\"col * 60 + 65\" \n                    :y2=\"row * 60 + 65\" \n                    stroke=\"#0066cc\" \n                    stroke-width=\"2\" \n                    stroke-dasharray=\"5,5\"\n                  />\n                  <line \n                    :x1=\"col * 60 + 65\" \n                    :y1=\"row * 60 + 25\" \n                    :x2=\"col * 60 + 25\" \n                    :y2=\"row * 60 + 65\" \n                    stroke=\"#0066cc\" \n                    stroke-width=\"2\" \n                    stroke-dasharray=\"5,5\"\n                  />\n                </g>\n                \n                <!-- 行营标识 -->\n                <g v-if=\"isCampCell(row, col)\">\n                  <circle \n                    :cx=\"col * 60 + 45\" \n                    :cy=\"row * 60 + 45\" \n                    r=\"15\" \n                    fill=\"none\" \n                    stroke=\"#ffc107\" \n                    stroke-width=\"2\"\n                  />\n                  <text \n                    :x=\"col * 60 + 45\" \n                    :y=\"row * 60 + 50\" \n                    text-anchor=\"middle\" \n                    font-size=\"12\" \n                    fill=\"#856404\"\n                    font-weight=\"bold\"\n                  >\n                    营\n                  </text>\n                </g>\n                \n                <!-- 大本营标识 -->\n                <g v-if=\"isBaseCell(row, col)\">\n                  <rect \n                    :x=\"col * 60 + 30\" \n                    :y=\"row * 60 + 30\" \n                    width=\"30\" \n                    height=\"30\" \n                    fill=\"none\" \n                    stroke=\"#dc3545\" \n                    stroke-width=\"2\" \n                    rx=\"3\"\n                  />\n                  <text \n                    :x=\"col * 60 + 45\" \n                    :y=\"row * 60 + 50\" \n                    text-anchor=\"middle\" \n                    font-size=\"12\" \n                    fill=\"#721c24\"\n                    font-weight=\"bold\"\n                  >\n                    旗\n                  </text>\n                </g>\n                \n                <!-- 绘制棋子 -->\n                <g v-if=\"board[row][col] !== 0\" class=\"piece\">\n                  <circle\n                    :cx=\"col * 60 + 45\"\n                    :cy=\"row * 60 + 45\"\n                    r=\"20\"\n                    :fill=\"getPieceFill(row, col)\"\n                    :stroke=\"getPieceStroke(row, col)\"\n                    stroke-width=\"2\"\n                    class=\"piece-circle\"\n                  />\n                  <text\n                    :x=\"col * 60 + 45\"\n                    :y=\"row * 60 + 50\"\n                    text-anchor=\"middle\"\n                    font-size=\"12\"\n                    :fill=\"getPieceTextColor(row, col)\"\n                    font-weight=\"bold\"\n                    class=\"piece-text\"\n                  >\n                    {{ getPieceText(row, col) }}\n                  </text>\n                  <!-- 棋子未翻开时的背面显示 -->\n                  <g v-if=\"board[row][col] && board[row][col] !== 0 && !board[row][col].revealed\">\n                    <circle\n                      :cx=\"col * 60 + 45\"\n                      :cy=\"row * 60 + 45\"\n                      r=\"20\"\n                      fill=\"#666\"\n                      fill-opacity=\"0.8\"\n                      class=\"piece-back\"\n                    />\n                    <text\n                      :x=\"col * 60 + 45\"\n                      :y=\"row * 60 + 50\"\n                      text-anchor=\"middle\"\n                      font-size=\"10\"\n                      fill=\"white\"\n                      font-weight=\"bold\"\n                    >\n                      ?\n                    </text>\n                  </g>\n                </g>\n              </g>\n            </g>\n            \n            <!-- 棋盘边框装饰 -->\n            <rect x=\"10\" y=\"10\" width=\"380\" height=\"740\" fill=\"none\" stroke=\"#654321\" stroke-width=\"3\" rx=\"10\"/>\n          </svg>\n        </div>\n\n        <!-- 控制按钮 -->\n        <div class=\"game-controls\" v-if=\"gamePhase === 'setup'\">\n          <button @click=\"startGame\" class=\"start-game-btn\" :disabled=\"!canStartGame()\">\n            开始对战\n          </button>\n        </div>\n\n        <!-- 游戏信息面板 -->\n        <div class=\"game-info\">\n          <div class=\"step-info\">\n            步数: {{ step }}\n          </div>\n          <div class=\"history-info\">\n            历史记录: {{ gameManager ? gameManager.history.length : 0 }}\n          </div>\n        </div>\n      </div>\n    </template>\n  </GameLayout>\n</template>\n\n<script>\nimport JunqiGame from \"./Junqi.js\";\n\nexport default {\n  name: \"Junqi\",\n  mixins: [JunqiGame],\n  methods: {\n    // 获取格子填充颜色\n    getCellFill(row, col) {\n      if (this.isCampCell(row, col)) return \"url(#campCell)\";\n      if (this.isBaseCell(row, col)) return \"url(#baseCell)\";\n      if (this.isRailwayCell(row, col)) return \"url(#railwayCell)\";\n      return \"url(#normalCell)\";\n    },\n\n    // 获取格子边框颜色\n    getCellStroke(row, col) {\n      if (this.isCampCell(row, col)) return \"#ffc107\";\n      if (this.isBaseCell(row, col)) return \"#dc3545\";\n      if (this.isRailwayCell(row, col)) return \"#17a2b8\";\n      return \"#ccc\";\n    },\n\n    // 检查是否为行营\n    isCampCell(row, col) {\n      return this.specialPositions.camps.some(pos => pos[0] === row && pos[1] === col);\n    },\n\n    // 检查是否为大本营\n    isBaseCell(row, col) {\n      return this.specialPositions.bases.some(pos => pos[0] === row && pos[1] === col);\n    },\n\n    // 检查是否为铁路线\n    isRailwayCell(row, col) {\n      return this.specialPositions.railways.some(railway => \n        railway.some(pos => pos[0] === row && pos[1] === col)\n      );\n    },\n\n    // 检查是否选中\n    isSelected(row, col) {\n      return this.selectedPiece && this.selectedPiece.row === row && this.selectedPiece.col === col;\n    },\n\n    // 获取棋子填充颜色\n    getPieceFill(row, col) {\n      const piece = this.board[row][col];\n      if (!piece || piece === 0) return \"transparent\";\n      return piece.player === 1 ? \"#007bff\" : \"#28a745\";\n    },\n\n    // 获取棋子边框颜色\n    getPieceStroke(row, col) {\n      const piece = this.board[row][col];\n      if (!piece || piece === 0) return \"transparent\";\n      return piece.player === 1 ? \"#0056b3\" : \"#1e7e34\";\n    },\n\n    // 获取棋子文字颜色\n    getPieceTextColor() {\n      return \"white\";\n    },\n\n    // 获取棋子文字\n    getPieceText(row, col) {\n      const piece = this.board[row][col];\n      if (!piece || piece === 0) return \"\";\n      return this.pieceNames[piece.type].charAt(0);\n    },\n  }\n};\n</script>\n\n<style scoped>\n.junqi-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  min-height: 100vh;\n  color: white;\n}\n\n.game-status {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n  padding: 15px 25px;\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 10px;\n  backdrop-filter: blur(10px);\n  width: 100%;\n  max-width: 600px;\n}\n\n.current-player .player1 {\n  color: #007bff;\n  font-weight: bold;\n}\n\n.current-player .player2 {\n  color: #28a745;\n  font-weight: bold;\n}\n\n.game-phase {\n  font-size: 14px;\n  opacity: 0.8;\n}\n\n.piece-selection {\n  margin-bottom: 20px;\n  padding: 20px;\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 10px;\n  backdrop-filter: blur(10px);\n  width: 100%;\n  max-width: 600px;\n}\n\n.piece-selection h3 {\n  margin-bottom: 15px;\n  text-align: center;\n}\n\n.available-pieces {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n  gap: 10px;\n}\n\n.piece-option {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px 12px;\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 5px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.piece-option:hover {\n  background: rgba(255, 255, 255, 0.2);\n  transform: translateY(-2px);\n}\n\n.piece-name {\n  font-weight: bold;\n}\n\n.piece-count {\n  font-size: 12px;\n  opacity: 0.8;\n}\n\n.board-container {\n  margin-bottom: 20px;\n  padding: 20px;\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 15px;\n  backdrop-filter: blur(10px);\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\n}\n\n.junqi-board {\n  display: block;\n  margin: 0 auto;\n  cursor: pointer;\n}\n\n.cell-rect {\n  transition: all 0.2s ease;\n}\n\n.cell-rect:hover {\n  stroke-width: 3;\n  filter: brightness(1.1);\n}\n\n.piece-circle {\n  transition: all 0.3s ease;\n}\n\n.piece-circle:hover {\n  transform: scale(1.1);\n  filter: drop-shadow(0 0 8px rgba(255, 255, 255, 0.6));\n}\n\n.piece-text {\n  pointer-events: none;\n  user-select: none;\n}\n\n.game-controls {\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n.start-game-btn {\n  padding: 12px 30px;\n  font-size: 16px;\n  font-weight: bold;\n  color: white;\n  background: linear-gradient(45deg, #28a745, #20c997);\n  border: none;\n  border-radius: 25px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);\n}\n\n.start-game-btn:hover:not(:disabled) {\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px rgba(40, 167, 69, 0.4);\n}\n\n.start-game-btn:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n  background: #6c757d;\n}\n\n.game-info {\n  display: flex;\n  justify-content: space-around;\n  padding: 15px;\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 10px;\n  backdrop-filter: blur(10px);\n  width: 100%;\n  max-width: 400px;\n  font-size: 14px;\n}\n\n.step-info, .history-info {\n  text-align: center;\n}\n\n@media (max-width: 768px) {\n  .junqi-container {\n    padding: 10px;\n  }\n  \n  .game-status {\n    flex-direction: column;\n    gap: 10px;\n  }\n  \n  .available-pieces {\n    grid-template-columns: 1fr;\n  }\n  \n  .board-container {\n    padding: 10px;\n    overflow-x: auto;\n  }\n  \n  .junqi-board {\n    min-width: 600px;\n  }\n}\n\n@media (max-width: 480px) {\n  .piece-selection h3 {\n    font-size: 16px;\n  }\n  \n  .start-game-btn {\n    padding: 10px 20px;\n    font-size: 14px;\n  }\n  \n  .game-info {\n    flex-direction: column;\n    gap: 10px;\n  }\n}\n</style>","import { GameComponentPresets } from \"../utils/gameComponentFactory.js\";\n\n/**\n * Junqi（军棋）对象定义了军棋游戏的基础组件\n * 工厂函数会为该组件添加游戏管理、按钮控制、自动操作等功能\n */\n\nconst Junqi = {\n  name: \"Junqi\",\n  data() {\n    return {\n      title: \"军棋\",\n      // 棋盘状态：0=空，1=甲方棋子，2=乙方棋子\n      board: [],\n      // 棋子类型：0=工兵，1=排长，2=连长，3=营长，4=团长，5=旅长，6=师长，7=军长，8=司令，9=炸弹，10=地雷，11=军旗\n      pieces: {\n        甲方: [\n          { type: 11, count: 1 }, // 军旗\n          { type: 8, count: 1 },  // 司令\n          { type: 7, count: 1 },  // 军长\n          { type: 6, count: 2 },  // 师长\n          { type: 5, count: 2 },  // 旅长\n          { type: 4, count: 2 },  // 团长\n          { type: 3, count: 2 },  // 营长\n          { type: 2, count: 3 },  // 连长\n          { type: 1, count: 3 },  // 排长\n          { type: 0, count: 3 },  // 工兵\n          { type: 9, count: 2 },  // 炸弹\n          { type: 10, count: 3 }, // 地雷\n        ],\n        乙方: [\n          { type: 11, count: 1 }, // 军旗\n          { type: 8, count: 1 },  // 司令\n          { type: 7, count: 1 },  // 军长\n          { type: 6, count: 2 },  // 师长\n          { type: 5, count: 2 },  // 旅长\n          { type: 4, count: 2 },  // 团长\n          { type: 3, count: 2 },  // 营长\n          { type: 2, count: 3 },  // 连长\n          { type: 1, count: 3 },  // 排长\n          { type: 0, count: 3 },  // 工兵\n          { type: 9, count: 2 },  // 炸弹\n          { type: 10, count: 3 }, // 地雷\n        ]\n      },\n      // 当前玩家：1=甲方，2=乙方\n      currentPlayer: 1,\n      // 选中的棋子位置\n      selectedPiece: null,\n      // 游戏阶段：setup=布阵，playing=对战\n      gamePhase: 'setup',\n      // 棋盘尺寸：12行x5列\n      rows: 12,\n      cols: 5,\n      // 特殊位置定义\n      specialPositions: {\n        // 行营位置（棋子进入后不能被攻击）\n        camps: [[2,1], [2,3], [3, 2], [4,1], [4,3], [7,1], [7,3], [8, 2], [9,1], [9,3]],\n        // 大本营位置（军旗必须放在这里）\n        bases: [[11,1], [11,3], [0,1], [0,3]],\n        // 铁路线位置（工兵可沿铁路线任意移动）\n        railways: [\n          // 横向铁路线\n          [[1,0], [1,1], [1,2], [1,3], [1,4]],\n          [[5,0], [5,1], [5,2], [5,3], [5,4]],\n          [[6,0], [6,1], [6,2], [6,3], [6,4]],\n          [[10,0], [10,1], [10,2], [10,3], [10,4]],\n          // 纵向铁路线\n          [[2,0], [3,0], [4,0]],\n          [[2,2], [3,2], [4,2]],\n          [[2,4], [3,4], [4,4]],\n          [[7,0], [8,0], [9,0]],\n          [[7,2], [8,2], [9,2]],\n          [[7,4], [8,4], [9,4]]\n        ]\n      }\n    };\n  },\n  computed: {\n    // 获取棋子显示名称\n    pieceNames() {\n      return ['工兵', '排长', '连长', '营长', '团长', '旅长', '师长', '军长', '司令', '炸弹', '地雷', '军旗'];\n    },\n    // 获取当前玩家名称\n    currentPlayerName() {\n      return this.currentPlayer === 1 ? '甲方' : '乙方';\n    },\n    // 检查是否可以布阵\n    canSetup() {\n      return this.gamePhase === 'setup';\n    },\n    // 检查是否可以移动\n    canMove() {\n      return this.gamePhase === 'playing' && !this.selectedPiece;\n    },\n    // 获取可用棋子\n    availablePieces() {\n      const player = this.currentPlayerName;\n      return this.pieces[player].filter(piece => piece.count > 0);\n    }\n  },\n  methods: {\n    // 初始化游戏\n    init() {\n      this.board = Array(this.rows).fill(null).map(() => Array(this.cols).fill(0));\n      this.currentPlayer = 1;\n      this.selectedPiece = null;\n      this.gamePhase = 'setup';\n      \n      // 重置棋子数量\n      Object.keys(this.pieces).forEach(player => {\n        this.pieces[player].forEach(piece => {\n          switch(piece.type) {\n            case 11: piece.count = 1; break; // 军旗\n            case 8: case 7: piece.count = 1; break; // 司令、军长\n            case 6: case 5: case 4: case 3: piece.count = 2; break; // 师、旅、团、营长\n            case 2: case 1: case 0: piece.count = 3; break; // 连、排、工兵\n            case 9: piece.count = 2; break; // 炸弹\n            case 10: piece.count = 3; break; // 地雷\n          }\n        });\n      });\n    },\n\n    // 检查是否可以开始游戏\n    canStartGame() {\n      // 简化检查：确保双方都有棋子\n      let player1Pieces = 0;\n      \n      for (let row = 0; row < this.rows; row++) {\n        for (let col = 0; col < this.cols; col++) {\n          const piece = this.board[row][col];\n          if (piece !== 0) {\n            if (piece.player === 1) player1Pieces++;\n          }\n        }\n      }\n      \n      return player1Pieces >= 25;\n    },\n\n    // 随机摆放指定玩家的棋子\n    randomPlacePlayerPieces(player) {\n      const playerName = player === 1 ? '甲方' : '乙方';\n      const playerPieces = this.pieces[playerName];\n      \n      // 获取该玩家的可放置区域\n      const availablePositions = [];\n      for (let row = 0; row < this.rows; row++) {\n        for (let col = 0; col < this.cols; col++) {\n          // 检查是否在玩家区域内且位置为空\n          const isPlayerArea = player === 1 ? row >= 6 : row <= 5;\n          if (isPlayerArea && this.board[row][col] === 0) {\n            availablePositions.push({ row, col });\n          }\n        }\n      }\n      \n      // 打乱位置顺序\n      this.shuffleArray(availablePositions);\n      \n      let positionIndex = 0;\n      \n      // 按棋子类型顺序放置（先放军旗，然后按等级从高到低）\n      const placeOrder = [11, 8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10]; // 军旗、司令、军长、师长...\n      \n      for (const pieceType of placeOrder) {\n        const pieceConfig = playerPieces.find(p => p.type === pieceType);\n        if (!pieceConfig || pieceConfig.count <= 0) continue;\n        \n        // 放置该类型的所有棋子\n        for (let i = 0; i < pieceConfig.count && positionIndex < availablePositions.length; i++) {\n          const pos = availablePositions[positionIndex++];\n          this.board[pos.row][pos.col] = {\n            player: player,\n            type: pieceType,\n            revealed: false\n          };\n          \n          console.log(`随机放置了 ${playerName} 的 ${this.pieceNames[pieceType]} 在 (${pos.row}, ${pos.col})`);\n        }\n        \n        // 更新棋子数量（已放置的棋子数量设为0）\n        pieceConfig.count = Math.max(0, pieceConfig.count - (positionIndex > 0 ? \n          availablePositions.slice(0, positionIndex).filter(pos => \n            this.board[pos.row][pos.col].type === pieceType\n          ).length : 0));\n      }\n      \n      console.log(`已为 ${playerName} 随机摆放棋子，使用了 ${positionIndex} 个位置`);\n    },\n\n    // 打乱数组顺序（Fisher-Yates算法）\n    shuffleArray(array) {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n      return array;\n    },\n\n    // 点击棋盘格子\n    clickCell(row, col) {\n      console.log(`点击了格子: ${row}, ${col}`);\n      if (this.gamePhase === 'setup') {\n        this.handleSetupClick(row, col);\n      } else if (this.gamePhase === 'playing') {\n        this.handlePlayClick(row, col);\n      }\n    },\n\n    // 处理布阵阶段的点击\n    handleSetupClick(row, col) {\n      const cellPlayer = this.getCellPlayer(row, col);\n      \n      // 如果点击的是自己的棋子，选中它\n      if (cellPlayer === this.currentPlayer) {\n        this.selectedPiece = { row, col };\n        return;\n      }\n      \n      // 如果点击空位置且有可用棋子，选择棋子类型并放置\n      if (cellPlayer === 0 && this.availablePieces.length > 0) {\n        // 选择第一个可用棋子类型（简化处理）\n        const selectedPieceType = this.availablePieces[0].type;\n        if (this.canPlacePiece(row, col)) {\n          this.placePiece(row, col, selectedPieceType);\n        }\n      }\n      \n      // 如果已经选中了棋子，尝试放置\n      if (this.selectedPiece) {\n        if (this.canPlacePiece(row, col)) {\n          this.placePiece(row, col);\n        }\n        this.selectedPiece = null;\n      }\n    },\n\n    // 处理对战阶段的点击\n    handlePlayClick(row, col) {\n      const cellPlayer = this.getCellPlayer(row, col);\n      \n      // 如果点击的是自己的棋子，选中它\n      if (cellPlayer === this.currentPlayer) {\n        this.selectedPiece = { row, col };\n        return;\n      }\n      \n      // 如果已经选中了棋子，尝试移动或攻击\n      if (this.selectedPiece) {\n        if (this.canMovePiece(this.selectedPiece.row, this.selectedPiece.col, row, col)) {\n          this.movePiece(this.selectedPiece.row, this.selectedPiece.col, row, col);\n        }\n        this.selectedPiece = null;\n      }\n    },\n\n    // 获取格子所属玩家\n    getCellPlayer(row, col) {\n      const piece = this.board[row][col];\n      if (!piece) return 0;\n      return piece.player;\n    },\n\n    // 检查是否可以放置棋子\n    canPlacePiece(row, col) {\n      // 检查是否在己方区域\n      const isPlayerArea = this.currentPlayer === 1 ? row >= 6 : row <= 5;\n      if (!isPlayerArea) return false;\n      \n      // 检查位置是否为空\n      if (this.board[row][col] !== 0) return false;\n      \n      return true;\n    },\n\n    // 放置棋子\n    placePiece(row, col, pieceType = null) {\n      // 如果没有指定棋子类型，使用默认工兵\n      if (pieceType === null) {\n        pieceType = 0; // 默认放置工兵\n      }\n      \n      // 检查是否还有该类型的棋子可用\n      const playerPieces = this.pieces[this.currentPlayerName];\n      const pieceConfig = playerPieces.find(p => p.type === pieceType);\n      if (!pieceConfig || pieceConfig.count <= 0) {\n        console.log(`玩家 ${this.currentPlayerName} 没有可用的 ${this.pieceNames[pieceType]} 棋子`);\n        return;\n      }\n      \n      // 放置棋子\n      this.board[row][col] = {\n        player: this.currentPlayer,\n        type: pieceType,\n        revealed: false // 棋子未翻开\n      };\n      \n      // 减少可用棋子数量\n      pieceConfig.count--;\n      \n      this.recordOperation({\n        type: 'place',\n        row: row,\n        col: col,\n        player: this.currentPlayer,\n        pieceType: pieceType\n      });\n      \n      console.log(`在 (${row}, ${col}) 放置了 ${this.currentPlayerName} 的 ${this.pieceNames[pieceType]}`);\n    },\n\n    // 检查是否可以移动棋子\n    canMovePiece(fromRow, fromCol, toRow, toCol) {\n      const piece = this.board[fromRow][fromCol];\n      if (!piece || piece.player !== this.currentPlayer) return false;\n      \n      // 检查目标位置是否为空或敌方棋子\n      const targetPiece = this.board[toRow][toCol];\n      if (targetPiece && targetPiece.player === this.currentPlayer) return false;\n      \n      // 检查移动规则\n      return this.isValidMove(fromRow, fromCol, toRow, toCol, piece);\n    },\n\n    // 检查移动是否有效\n    isValidMove(fromRow, fromCol, toRow, toCol, piece) {\n      const rowDiff = Math.abs(toRow - fromRow);\n      const colDiff = Math.abs(toCol - fromCol);\n      \n      // 工兵可以沿铁路线任意移动\n      if (piece.type === 0 && this.isRailwayMove(fromRow, fromCol, toRow, toCol)) {\n        return true;\n      }\n      \n      // 普通棋子只能移动一格\n      return (rowDiff === 1 && colDiff === 0) || (rowDiff === 0 && colDiff === 1);\n    },\n\n    // 检查是否沿铁路线移动\n    isRailwayMove(fromRow, fromCol, toRow, toCol) {\n      // 简化实现：检查起点和终点是否在同一条铁路线上\n      for (const railway of this.specialPositions.railways) {\n        const hasFrom = railway.some(pos => pos[0] === fromRow && pos[1] === fromCol);\n        const hasTo = railway.some(pos => pos[0] === toRow && pos[1] === toCol);\n        if (hasFrom && hasTo) return true;\n      }\n      return false;\n    },\n\n    // 移动棋子\n    movePiece(fromRow, fromCol, toRow, toCol) {\n      const movingPiece = this.board[fromRow][fromCol];\n      const targetPiece = this.board[toRow][toCol];\n      \n      if (targetPiece) {\n        // 攻击敌方棋子\n        this.attackPiece(movingPiece, targetPiece, fromRow, fromCol, toRow, toCol);\n      } else {\n        // 普通移动\n        this.board[toRow][toCol] = movingPiece;\n        this.board[fromRow][fromCol] = 0;\n        \n        this.recordOperation({\n          type: 'move',\n          fromRow: fromRow,\n          fromCol: fromCol,\n          toRow: toRow,\n          toCol: toCol,\n          piece: movingPiece\n        });\n      }\n      \n      // 切换玩家\n      this.currentPlayer = this.currentPlayer === 1 ? 2 : 1;\n    },\n\n    // 攻击棋子\n    attackPiece(attacker, defender, fromRow, fromCol, toRow, toCol) {\n      let result = this.calculateBattleResult(attacker.type, defender.type);\n      \n      if (result === 'attacker_wins') {\n        this.board[toRow][toCol] = attacker;\n        this.board[fromRow][fromCol] = 0;\n      } else if (result === 'defender_wins') {\n        this.board[fromRow][fromCol] = 0;\n      } else {\n        // 同归于尽\n        this.board[fromRow][fromCol] = 0;\n        this.board[toRow][toCol] = 0;\n      }\n      \n      this.recordOperation({\n        type: 'attack',\n        fromRow: fromRow,\n        fromCol: fromCol,\n        toRow: toRow,\n        toCol: toCol,\n        attacker: attacker,\n        defender: defender,\n        result: result\n      });\n      \n      // 检查游戏结束条件\n      this.checkGameEnd();\n    },\n\n    // 计算战斗结果\n    calculateBattleResult(attackerType, defenderType) {\n      // 军旗被攻击则攻击方获胜\n      if (defenderType === 11) return 'attacker_wins';\n      \n      // 地雷特殊规则\n      if (defenderType === 10) {\n        return attackerType === 0 ? 'attacker_wins' : 'defender_wins'; // 只有工兵能排雷\n      }\n      \n      // 炸弹同归于尽\n      if (attackerType === 9 || defenderType === 9) return 'both_die';\n      \n      // 普通战斗比较等级\n      if (attackerType > defenderType) return 'attacker_wins';\n      if (attackerType < defenderType) return 'defender_wins';\n      return 'both_die'; // 同级同归于尽\n    },\n\n    // 检查游戏结束\n    checkGameEnd() {\n      // 检查军旗是否被夺\n      for (let row = 0; row < this.rows; row++) {\n        for (let col = 0; col < this.cols; col++) {\n          const piece = this.board[row][col];\n          if (piece && piece.type === 11) {\n            // 军旗还存在\n            return;\n          }\n        }\n      }\n      \n      // 军旗被夺，游戏结束\n      this.gameManager.setWin();\n    },\n\n    // 开始游戏（从布阵阶段进入对战阶段）\n    startGame() {\n      this.gamePhase = 'playing';\n      this.selectedPiece = null;\n      \n      // 随机摆放乙方棋子（玩家2）\n      this.randomPlacePlayerPieces(2);\n    },\n\n    // 重新开始\n    goon() {\n      this.init();\n    },\n\n    // 自动模式\n    async stepFn() {\n      if (this.gamePhase == \"setup\") {\n        this.randomPlacePlayerPieces(1);\n        this.startGame();\n        return;\n      }\n\n      // 获取可用移动\n      const availableMoves = this.getAvailableMoves();\n      if (availableMoves.length > 0) {\n        const randomMove = availableMoves[Math.floor(Math.random() * availableMoves.length)];\n        \n        // 先选中源棋子，然后移动到目标位置\n        this.selectedPiece = { row: randomMove.fromRow, col: randomMove.fromCol };\n        this.clickCell(randomMove.toRow, randomMove.toCol);\n      } else {\n        console.log(\"没有可用的移动，游戏可能陷入死锁\");\n      }\n    },\n\n    // 获取可用移动\n    getAvailableMoves() {\n      const moves = [];\n      for (let row = 0; row < this.rows; row++) {\n        for (let col = 0; col < this.cols; col++) {\n          const piece = this.board[row][col];\n          if (piece && piece.player === this.currentPlayer) {\n            // 检查周围的移动\n            const directions = [[-1,0], [1,0], [0,-1], [0,1]];\n            for (const [dr, dc] of directions) {\n              const newRow = row + dr;\n              const newCol = col + dc;\n              if (newRow >= 0 && newRow < this.rows && newCol >= 0 && newCol < this.cols) {\n                if (this.canMovePiece(row, col, newRow, newCol)) {\n                  moves.push({ fromRow: row, fromCol: col, toRow: newRow, toCol: newCol });\n                }\n              }\n            }\n          }\n        }\n      }\n      return moves;\n    },\n\n    // 渲染文本视图（用于测试）\n    renderTextView() {\n      let result = `军棋棋盘 (${this.rows}x${this.cols})\\n`;\n      result += `当前玩家: ${this.currentPlayerName} (${this.currentPlayer})\\n`;\n      result += `游戏阶段: ${this.gamePhase === 'setup' ? '布阵' : '对战'}\\n`;\n      result += `步数: ${this.step}\\n\\n`;\n      \n      // 显示棋盘\n      result += \"棋盘状态:\\n\";\n      for (let row = 0; row < this.rows; row++) {\n        let rowStr = \"\";\n        for (let col = 0; col < this.cols; col++) {\n          const piece = this.board[row][col];\n          if (piece === 0) {\n            rowStr += \". \";\n          } else {\n            const player = piece.player === 1 ? \"A\" : \"B\"; // A=甲方, B=乙方\n            const type = this.pieceNames[piece.type].charAt(0);\n            rowStr += `${player}${type} `;\n          }\n        }\n        result += `${row.toString().padStart(2)}: ${rowStr}\\n`;\n      }\n      \n      result += \"\\n特殊位置:\\n\";\n      result += \"行营: \" + this.specialPositions.camps.map(pos => `(${pos[0]},${pos[1]})`).join(\", \") + \"\\n\";\n      result += \"大本营: \" + this.specialPositions.bases.map(pos => `(${pos[0]},${pos[1]})`).join(\", \") + \"\\n\";\n      \n      console.log(result);\n      return result;\n    },\n\n    // 记录操作\n    recordOperation(operation) {\n      this.gameManager.recordOperation(operation);\n    },\n\n    // 撤销操作\n    handleUndo(operation) {\n      switch (operation.type) {\n        case 'place':\n          this.board[operation.row][operation.col] = 0;\n          break;\n        case 'move':\n          this.board[operation.fromRow][operation.fromCol] = operation.piece;\n          this.board[operation.toRow][operation.toCol] = 0;\n          break;\n        case 'attack':\n          // 恢复战斗前的状态\n          if (operation.result === 'attacker_wins') {\n            this.board[operation.fromRow][operation.fromCol] = operation.attacker;\n            this.board[operation.toRow][operation.toCol] = operation.defender;\n          } else if (operation.result === 'defender_wins') {\n            this.board[operation.fromRow][operation.fromCol] = operation.attacker;\n            this.board[operation.toRow][operation.toCol] = operation.defender;\n          } else {\n            // 同归于尽\n            this.board[operation.fromRow][operation.fromCol] = operation.attacker;\n            this.board[operation.toRow][operation.toCol] = operation.defender;\n          }\n          break;\n      }\n    }\n  },\n  \n  // 初始化时创建游戏\n//   created() {\n//     this.init();\n//   }\n};\n\n// 使用工厂函数创建增强的游戏组件\nexport default GameComponentPresets.strategyGame(Junqi);","import { render } from \"./Junqi.vue?vue&type=template&id=34c0c8a0&scoped=true\"\nimport script from \"./Junqi.vue?vue&type=script&lang=js\"\nexport * from \"./Junqi.vue?vue&type=script&lang=js\"\n\nimport \"./Junqi.vue?vue&type=style&index=0&id=34c0c8a0&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-34c0c8a0\"]])\n\nexport default __exports__","import { createRouter, createWebHashHistory } from \"vue-router\";\nimport Sum from \"@/components/sum.vue\";\nimport Fish from \"@/components/fish.vue\";\nimport point24 from \"@/components/point24.vue\";\nimport Month from \"@/components/month.vue\";\nimport Tortoise from \"@/components/Tortoise.vue\";\nimport Sort from \"@/components/Sort.vue\";\nimport Pairs from \"@/components/Pairs.vue\";\nimport Spider from \"@/components/Spider.vue\";\nimport GridBattle from \"@/components/Chess.vue\";\nimport TowerHanoi from \"@/components/TowerHanoi.vue\";\nimport NumberMaze from \"@/components/NumberMaze.vue\";\nimport NumberPuzzle from \"@/components/NumberPuzzle.vue\";\nimport NumberSequence from \"@/components/NumberSequence.vue\";\nimport Junqi from \"@/components/Junqi.vue\";\n\nconst routes = [\n  {\n    path: \"/\",\n    redirect: \"/month\",\n  },\n  {\n    path: \"/month\",\n    component: Month,\n  },\n  {\n    path: \"/fish\",\n    component: Fish,\n  },\n  {\n    path: \"/point24\",\n    component: point24,\n  },\n  {\n    path: \"/blackjack\",\n    component: Sum,\n  },\n  {\n    path: \"/Tortoise\",\n    component: Tortoise,\n  },\n  {\n    path: \"/Sort\",\n    component: Sort,\n  },\n  {\n    path: \"/Pairs\",\n    component: Pairs,\n  },\n  {\n    path: \"/Spider\",\n    component: Spider,\n  },\n  {\n    path: \"/GridBattle\",\n    component: GridBattle,\n  },\n  {\n    path: \"/TowerHanoi\",\n    component: TowerHanoi,\n  },\n  {\n    path: \"/numbermaze\",\n    component: NumberMaze,\n  },\n  {\n    path: \"/numberpuzzle\",\n    component: NumberPuzzle,\n  },\n  {\n    path: \"/numbersequence\",\n    component: NumberSequence,\n  },\n  {\n    path: \"/junqi\",\n    component: Junqi,\n  },\n];\n\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes,\n});\n\nexport default router;\n","import { createStore } from \"vuex\";\n\nexport default createStore({\n  state: {},\n  mutations: {},\n  actions: {},\n  modules: {},\n});\n","import { createApp } from \"vue\";\nimport App from \"./App.vue\";\nimport router from \"./router\";\nimport store from \"./store\";\nimport { seededRandom } from \"./utils/help.js\";\n\n// preload();\nMath.random = seededRandom;\n\nconst app = createApp(App);\napp.use(router);\napp.use(store);\napp.mount(\"#app\");\n","/**\n * 卡片工具函数\n * 提供卡片相关的常量和工具函数\n */\n\n// 卡片花色\nexport const CARD_TYPES = [\"♥\", \"♠\", \"♦\", \"♣\"];\n\n// 卡片点数\nexport const CARD_POINTS = [\"A\", 2, 3, 4, 5, 6, 7, 8, 9, 10, \"J\", \"Q\", \"K\", \"JOKER\"];\n\n/**\n * 计算卡片占位符文本\n * @param {number|string} cardId - 卡片ID\n * @param {string[]} types - 卡片花色数组\n * @param {Array<string|number>} points - 卡片点数数组\n * @returns {string} 卡片占位符文本\n */\nexport function getCardPlaceholderText(cardId, types = CARD_TYPES, points = CARD_POINTS) {\n  if (typeof cardId === 'number') {\n    const suit = cardId < 52 ? types[cardId % 4] : \"\";\n    const point = points[cardId >> 2];\n    return `${suit}${point}`;\n  }\n  return '';\n}\n\n/**\n * 获取卡片图像URL\n * @param {number|string} cardId - 卡片ID\n * @returns {string} 卡片图像URL\n */\nexport function getCardImageSrc(cardId) {\n  return `./static/${cardId}.webp`;\n}\n\n/**\n * 导出默认对象，方便一次性导入\n */\nexport default {\n  CARD_TYPES,\n  CARD_POINTS,\n  getCardPlaceholderText,\n  getCardImageSrc\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"js/\" + chunkId + \".\" + {\"82\":\"0edd97ec\",\"109\":\"392cd34a\",\"115\":\"ebef74e0\",\"279\":\"807a068c\",\"304\":\"d853afda\",\"526\":\"f4a73ab4\"}[chunkId] + \".js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"css/\" + chunkId + \".\" + {\"82\":\"0ec60025\",\"109\":\"f27d4702\",\"115\":\"168b6652\",\"279\":\"94d13aed\",\"304\":\"88948ce9\",\"526\":\"b5aab8a0\"}[chunkId] + \".css\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var inProgress = {};\nvar dataWebpackPrefix = \"tsubaki-game-library:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = function(url, done, key, chunkId) {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = function(prev, event) {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach(function(fn) { return fn(event); });\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"\";","if (typeof document === \"undefined\") return;\nvar createStylesheet = function(chunkId, fullhref, oldTag, resolve, reject) {\n\tvar linkTag = document.createElement(\"link\");\n\n\tlinkTag.rel = \"stylesheet\";\n\tlinkTag.type = \"text/css\";\n\tif (__webpack_require__.nc) {\n\t\tlinkTag.nonce = __webpack_require__.nc;\n\t}\n\tvar onLinkComplete = function(event) {\n\t\t// avoid mem leaks.\n\t\tlinkTag.onerror = linkTag.onload = null;\n\t\tif (event.type === 'load') {\n\t\t\tresolve();\n\t\t} else {\n\t\t\tvar errorType = event && event.type;\n\t\t\tvar realHref = event && event.target && event.target.href || fullhref;\n\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + errorType + \": \" + realHref + \")\");\n\t\t\terr.name = \"ChunkLoadError\";\n\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n\t\t\terr.type = errorType;\n\t\t\terr.request = realHref;\n\t\t\tif (linkTag.parentNode) linkTag.parentNode.removeChild(linkTag)\n\t\t\treject(err);\n\t\t}\n\t}\n\tlinkTag.onerror = linkTag.onload = onLinkComplete;\n\tlinkTag.href = fullhref;\n\n\n\tif (oldTag) {\n\t\toldTag.parentNode.insertBefore(linkTag, oldTag.nextSibling);\n\t} else {\n\t\tdocument.head.appendChild(linkTag);\n\t}\n\treturn linkTag;\n};\nvar findStylesheet = function(href, fullhref) {\n\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n\tfor(var i = 0; i < existingLinkTags.length; i++) {\n\t\tvar tag = existingLinkTags[i];\n\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return tag;\n\t}\n\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n\tfor(var i = 0; i < existingStyleTags.length; i++) {\n\t\tvar tag = existingStyleTags[i];\n\t\tvar dataHref = tag.getAttribute(\"data-href\");\n\t\tif(dataHref === href || dataHref === fullhref) return tag;\n\t}\n};\nvar loadStylesheet = function(chunkId) {\n\treturn new Promise(function(resolve, reject) {\n\t\tvar href = __webpack_require__.miniCssF(chunkId);\n\t\tvar fullhref = __webpack_require__.p + href;\n\t\tif(findStylesheet(href, fullhref)) return resolve();\n\t\tcreateStylesheet(chunkId, fullhref, null, resolve, reject);\n\t});\n}\n// object to store loaded CSS chunks\nvar installedCssChunks = {\n\t524: 0\n};\n\n__webpack_require__.f.miniCss = function(chunkId, promises) {\n\tvar cssChunks = {\"82\":1,\"109\":1,\"115\":1,\"279\":1,\"304\":1,\"526\":1};\n\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n\t\tpromises.push(installedCssChunks[chunkId] = loadStylesheet(chunkId).then(function() {\n\t\t\tinstalledCssChunks[chunkId] = 0;\n\t\t}, function(e) {\n\t\t\tdelete installedCssChunks[chunkId];\n\t\t\tthrow e;\n\t\t}));\n\t}\n};\n\n// no hmr\n\n// no prefetching\n\n// no preloaded","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n__webpack_require__.f.j = function(chunkId, promises) {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise(function(resolve, reject) { installedChunkData = installedChunks[chunkId] = [resolve, reject]; });\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = function(event) {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktsubaki_game_library\"] = self[\"webpackChunktsubaki_game_library\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(2771); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["GameSettingsManager","constructor","this","listeners","getDelay","gameName","gameDelay","localStorage","getItem","parseInt","globalDelay","saveDelay","delay","applyToAll","setItem","toString","keys","Object","forEach","key","startsWith","removeItem","notifyListeners","reset","clear","addListener","callback","push","removeListener","index","indexOf","splice","error","console","id","_createElementBlock","_hoisted_1","_createVNode","_component_router_view","script","__exports__","render","class","style","_createBlock","_component_GameLayout","_mergeProps","_ctx","gameLayoutProps","label","action","goon","backgroundColor","onGoon","_withCtx","_createElementVNode","src","_hoisted_2","_toDisplayString","score1","_hoisted_3","_hoisted_4","_Fragment","_renderList","arr1","item","_component_CardImage","_hoisted_5","_hoisted_6","arr2","_hoisted_7","_hoisted_8","score2","_component_GameControls","buttons","stepDisabled","autoDisabled","onHitBtn","handleHitBtn","onPassBtn","pass","GameStateManager","options","hitflag","winflag","loseflag","drawflag","history","isAutoRunning","autoInterval","autoStepDelay","maxSteps","_listeners","init","stopAuto","emit","recordOperation","operation","backword","unshift","undo","length","pop","getStepCount","canUndo","startAuto","stepCallback","log","stepCount","wait","clearInterval","setAutoStepDelay","getAutoStepDelay","actualDelay","Promise","resolve","setTimeout","step","setWin","setLose","setDraw","resetCallback","on","event","listener","off","data","getState","setState","state","assign","getDefaultComputedProperties","manager","gameManager","overflag","undoDisabled","restartDisabled","canOperate","gameState","shuffleCards","cards","num","rand","tmp","last","i","Math","floor","seededRandom","equalArray","checkDeadForeach","array","newest","j","count","join","values","s","setSeed","seed","GameComponentPresets","cardGame","baseComponent","createEnhancedGameComponent","hasUndo","hasRestart","simpleGame","customInit","title","includes","stepFn","async","hit","arr","cards2","pairGame","methods","customCleanup","_timer","puzzleGame","showHint","strategyGame","difficulty","setDifficulty","level","actionGame","score","combo","addScore","points","resetCombo","customGame","config","features","customLogic","feature","gameTime","_gameTimer","startTimer","setInterval","stopTimer","highScore","updateScore","delays","easy","normal","hard","call","gameRules","month","fish","point24","Tortoise","Sort","Pairs","Spider","GridBattle","blackjack","NumberMaze","NumberSequence","GameResultModal","GameControls","GameLayout","CardImage","computed","components","baseData","types","CARD_TYPES","point","CARD_POINTS","customButtons","created","Date","now","loadDelaySettings","_settingsChangeHandler","handleSettingsChanged","bind","gameSettingsManager","handleUndo","renderTextView","handleHistoryUpdate","autoCalc","beforeUnmount","displayButtons","defaultButtons","disabled","currentGame","$route","path","substring","gameRule","collectedGameButtons","filter","button","getCardPlaceholderText","seen","WeakMap","pathStack","replacer","value","has","currentPath","set","beforeState","JSON","stringify","$data","afterState","warn","settings","getAvailableActions","actions","actionToMethodMap","methodName","method","toUpperCase","args","a","window","name","template","props","defineAsyncComponent","Sum","cardsChg","number","component","refillCards","currentCard","shift","getScore","player","flag","remainingCards","playerScore","playerCards","map","c","dealerScore","dealerCards","SumComponent","onStep","onAuto","_component_message","show1","_cache","_normalizeStyle","opacity","diff1","diff2","diff3","score3","diff4","_hoisted_9","score4","_hoisted_10","_hoisted_11","_normalizeClass","ssArr","flyin1","flyin2","flyout1","flyout2","message","Fish","cards1","cards3","cards4","time","handle","findIndex","cardCounts","padStart","cardTexts","watch","val","old","FishComponent","style1","onUndo","_component_point24card","card","choose","sign","onClick","$event","clickSign","signs","calc","toFixed","clickCard","point24card","opts","process","nums","len","aim","numij","k","abs","fns","b","Number","isFinite","num1","num2","first","Point24","type","timestamp","combined","left","right","Error","temp","index1","index2","result","f","temp00","temp02","l","r","formulaToString","formula","Array","isArray","operator","operatorSymbol","leftStr","rightStr","String","undefined","formulaStr","h","idx","Point24Component","class1","visibleCards","cardId","Month","months","count13","MonthComponent","originalItem","shanshuo","check","done","next","top","up","next_i","max","fn","m","d","nextCards","signIndex","signCard","CANVAS_ROWS","CANVAS_COLS","canvas","fill","CARD_ROWS","CARD_COLS","LAYOUT_WIDTH","LAYOUT_HEIGHT","activeCards","posIdx","mapInfo","canClick","isSelected","parseFloat","zIndex","cardText","sort","startCol","round","startRow","safeStartRow","min","safeStartCol","row","col","canvasRow","canvasCol","char","borderedCanvas","repeat","TortoiseComponent","n","height","canMoveCard","hide","getCurrentCandidateCard","createCandidate","targetCard","slotIndex","context","candidatePriority","t","currentTargetIdx","ruleBasedScore","currentCandidate","_getters","slotPriority","excludeReason","_feature2","matchNextCard","adjacentEmptyCount","columnEmptyCount","_deep","deep","_winProbability","simulatedCards","slotId","estimateWinProbability","_diff","_feature0","_feature1","_feature3","_feature4","_feature5","countEmptyInColumn","_feature6","countEmptyAbove","_feature7","countEmptyBelow","_feature8","_feature9","_feature10","_feature11","countCardsAbove","_feature12","countCorrectBelow","_feature13","countSameRankCandidates","_feature14","countPossibleMoves","_feature15","calculateEmptyEntropy","_feature16","countRestoredCards","_feature17","matchMode","_feature18","_feature19","_feature20","isBetterCandidate","candidateA","candidateB","valueA","valueB","gameEvaluationMethods","calculateRuleBasedPriority","slotInfo","candidateCard","candidateIdx","slotPrevCard","colSize","slotRow","candidateCol","candidateRow","slotPrevRank","candidateRank","candidateSuit","candidateGroup","candidateScore","prevPosInCandidateCol","prevCardInCandidateCol","prevRankInCandidateCol","prevSuitInCandidateCol","prevGroupInCandidateCol","matchNextCardScore","nextPosInCandidateCol","nextCardInCandidateCol","nextRankInCandidateCol","nextSuitInCandidateCol","nextGroupInCandidateCol","colStart","compareRuleBasedPriority","scoreA","scoreB","colIdx","colEnd","pos","slotIdx","cRank","cSuit","expectedRank","slot","prevCard","prevRank","targetRank","cardGroup","suit","emptyPerCol","totalEmpty","entropy","p","log2","cards1Array","card_group","cardIdx","restoredCount","rank","targetGroup","expectedPosition","allBelowCorrect","checkRank","checkPos","cardAtPos","cardAtPosRank","cardAtPosSuit","cardAtPosGroup","totalCols","totalScore","maxScore","rowScore","evaluateRowScore","blockPenalty","calculateBlockPenalty","baseScore","finalScore","emptySlotsAbove","countEmptySlotsAbove","cardRank","cardSuit","expectedGroup","checkRowBelowCorrect","checkRow","penalty","upperCard","upperRank","possibleMoves","sign_index","candidateIntervals","currentCandidates","$nextTick","updateAllCandidateCycling","beforeDestroy","stopCandidateCycling","startCandidateCycling","getCandidateCardsForSlot","candidates","findAllCardsByRankOffset","currentIndex","calculateStateHash","isStateHashRepeated","hash","find","record","stateHash","recordMove","from","to","executeMove","cardToMove","targetEmptyIndex","cardToMoveIndex","emptySlot","findNextCard","updateN","errorState","findPrevCard","document","scrollTop","wrapper","querySelector","documentElement","body","evaluateCandidateScore","candidate","selectBestCandidate","bestScore","bestIdx","findCardByRankOffset","offset","condition","returnAll","target_rank","target_card","nextIdx","over","prior","slotsToResetPriority","priority","_in","able","bestCard","dead","candidatePriorities","Map","prevFn","prev_c","accumulatedPriority","maxPriority","next_idx","subPriority","get","nextFn","next_c","emptySlotId","card_at_n","prevCandidates","prevCandidate","candidatesWithPriority","tempCards","simulatedHash","allCandidates","ind","road","bestCandidate","candidateInfo","allPrioritiesZero","validSlotCount","setMatchMode","mode","getMatchModeDescription","descriptions","targetSlotCard","targetSlot","colWidth","header","headerRow","separator","footer","slice","rowStr","cellContent","highlight","emptySlotIndex","prevCardIndex","emptyLabel","firstCandidate","candidateText","canMove","isTarget","padding","leftPad","rightPad","sendCustomButtons","nextMode","description","handler","SortComponent","cardPositions","selectedCard","secondSelectedCard","matchedCards","seenCards","totalCards","rowOrPositionIndex","positionIndex","found","gridColumns","isMatched","isGameOver","checkGameCompletion","groupStartIndex","targetCardId","seenInGroupCount","matchedCount","gridRows","line","gridPosition","isFlipped","isSeen","prefix","padEnd","PairsComponent","calss","ref","drag","dragItem","turn","fresh","dragCard","enterItem","start","end","move","color","onMouseenter","enter","onTouchenter","onMouseleave","leave","onTouchleave","getPosition","e","isTouch","touches","clientX","clientY","updateMoveData","el","_moveData","position","offsetX","startPosition","offsetY","prevent","bubbles","cancelable","preventDefault","stopPropagation","detail","dispatchEvent","CustomEvent","listenEvents","events","handles","addEventListener","mounted","binding","vnode","_isInitMove","page","modifiers","isMove","_start","cancel","removeEventListener","_end","_move","passive","install","Vue","directive","directives","setupGameStateListeners","moveEnter","$refs","middleBox","downBox","middleEnters","downEnters","middle","down","$forceUpdate","findPos","addAndCheck","res","checkDown","up1","up2","pos1","pos2","top1","top2","checkUp","checkMove","skipCheck","addCard","lock","add","componentInstance","vm","dataset","offsetLeft","offsetTop","cardWidth","catch","$el","_cardImageRoot","className","match","reduce","sum","deckCards","col1","deckDisplay","col1Last3","row2Data","lastCard","row3Data","cardsDisplay","maxLines","split","paddedData","lines","lineIdx","lineContent","container","offsetWidth","SpiderComponent","width","stepTwiceFn","grades","grade","validBoxes","lowCount","highCount","_modes","modes","getValidBoxes","recordFlip","isAuto","v","friends","_this","moveFn","boxes","box","best","worst","random","suicide","protectedRoad","friendsReach","validMoves","moves","symbol","trim","moveCount","minMoves","towers","tower","towerIndex","selected","selectedTower","clickTower","getTowerName","disk","getDiskClass","getDiskStyle","_hoisted_12","diskCount","onChange","resetGame","_hoisted_13","_hoisted_14","_hoisted_15","TowerHanoi","pow","moveDisk","fromTower","toTower","fromDisks","toDisks","hasValidMoves","solveHanoi","aux","towerNames","diskSize","baseWidth","widthIncrement","getDiskColor","colors","maxHeight","disks","diskIndex","diskVisual","hasDisks","completionPercentage","completedDisks","efficiencyScore","optimalMoves","actualMoves","newVal","oldVal","currentNumberCount","grid","targetPath","clickNumber","pathFound","emptyPos","_hoisted_16","gridSize","numbers","availablePositions","getNeighbors","neighbors","moveNumber","fromPos","toPos","numberValue","moved","neighbor","findValidPath","queue","visited","Set","current","neighborValue","getNextAutoMove","currentNumbers","testGrid","hasPotentialPath","startPos","nextMove","cellStr","replace","pathValues","gridState","NumberMazeComponent","rowIndex","colIndex","TARGET_SEQUENCE","NumberPuzzle","shuffleGrid","getValidMoves","randomMove","direction","directions","_","dir","recordHistory","isAdjacent","oldEmptyPos","row1","row2","col2","rowDiff","colDiff","rowOrDirection","isFinalSixCells","finalCells","finalNumbers","numbersInFinalCells","cell","every","canReachTargetInSteps","targetRow","targetCol","steps","currentPos","findNumberPosition","tempGrid","tempEmptyPos","numberAtMove","newPos","findNumberPositionInGrid","newEmptyPos","canReach","canReachTargetInStepsWithGrid","checkTwoStepLookahead","targetPos10","targetPos14","pos10AfterMove","pos14AfterMove","tenInTarget","fourteenInTarget","firstNumberMoved","firstTargetReached","secondNumber","secondTargetPos","canReachSecondTarget","checkSpecialTargetMoves","currentPos10","currentPos14","allValidMoves","move14to10Target","newPos14","move10to14Target","newPos10","randomMoveInFinalSixCells","finalSixMoves","some","lookaheadMoves","directCorrectMove","findDirectCorrectMove","specialTargetMove","currentTarget","findCurrentTarget","targetNumber","calculateNextMove","makeSafeRandomMove","targetSequence","hasLaterTargetAndIntermediateCompleted","laterTargets","target","laterTarget","laterNumber","laterRow","laterCol","intermediateCompleted","interNumber","interRow","interCol","interIndex","targetIndex","targetIndexInGrid","interIndexInGrid","interNumberInGrid","numberPos","numberPath","findShortestPath","nextNumberPos","requiredEmptyPos","emptyPath","excludeNumber","neighborKey","numberAtPos","isNumberCompleted","continuousCompleted","getContinuousCompletedNumbers","safeMoves","randomSafeMove","currentNumber","prevTargetSquence","hasLaterTarget","findWinningMove","willCompleteGame","isGridComplete","expectedNumber","NumberPuzzleComponent","isCellSelected","isCellSelectableNext","handleCellClick","minSequenceLength","selectedCells","confirmSequence","isValidSequence","clearSelection","isGameComplete","findAllValidSequences","generateGrid","cellData","lastCell","distance","alreadySelected","selectSequence","copyGrid","validSequences","bestSequence","sequences","sequence","findSequenceFrom","currentSequence","dfsFindSequence","allSequences","lastValue","dr","dc","newRow","newCol","isValidCell","beforeGrid","beforeScore","applyGravity","afterScore","afterGrid","checkGameState","prev","curr","writePos","output","NumberSequenceComponent","currentPlayer","currentPlayerName","gamePhase","availablePieces","piece","pieceNames","cols","rows","viewBox","x1","y1","x2","y2","stdDeviation","in","x","y","stroke","rx","$options","getCellFill","getCellStroke","clickCell","isRailwayCell","isCampCell","cx","cy","_hoisted_17","isBaseCell","_hoisted_18","_hoisted_20","board","_hoisted_21","getPieceFill","getPieceStroke","getPieceTextColor","getPieceText","_hoisted_23","revealed","_hoisted_24","_hoisted_26","_hoisted_27","startGame","canStartGame","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","Junqi","pieces","甲方","乙方","selectedPiece","specialPositions","camps","bases","railways","canSetup","player1Pieces","randomPlacePlayerPieces","playerName","playerPieces","isPlayerArea","shuffleArray","placeOrder","pieceType","pieceConfig","handleSetupClick","handlePlayClick","cellPlayer","getCellPlayer","selectedPieceType","canPlacePiece","placePiece","canMovePiece","movePiece","fromRow","fromCol","toRow","toCol","targetPiece","isValidMove","isRailwayMove","railway","hasFrom","hasTo","movingPiece","attackPiece","attacker","defender","calculateBattleResult","checkGameEnd","attackerType","defenderType","availableMoves","getAvailableMoves","charAt","mixins","JunqiGame","routes","redirect","router","createRouter","createWebHashHistory","createStore","mutations","modules","app","createApp","App","use","store","mount","getCardImageSrc","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","deferred","O","chunkIds","notFulfilled","Infinity","fulfilled","getter","__esModule","definition","o","defineProperty","enumerable","chunkId","all","promises","u","miniCssF","g","globalThis","Function","obj","prop","prototype","hasOwnProperty","inProgress","dataWebpackPrefix","url","needAttach","scripts","getElementsByTagName","getAttribute","createElement","charset","nc","setAttribute","onScriptComplete","onerror","onload","clearTimeout","timeout","doneFns","parentNode","removeChild","head","appendChild","Symbol","toStringTag","createStylesheet","fullhref","oldTag","reject","linkTag","rel","nonce","onLinkComplete","errorType","realHref","href","err","code","request","insertBefore","nextSibling","findStylesheet","existingLinkTags","tag","dataHref","existingStyleTags","loadStylesheet","installedCssChunks","miniCss","cssChunks","then","installedChunks","installedChunkData","promise","loadingEnded","realSrc","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","self","__webpack_exports__"],"sourceRoot":""}